
STM32_DS1307_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002044  08002044  00012044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002110  08002110  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002110  08002110  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002110  08002110  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002114  08002114  00012114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000080  08002198  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08002198  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001407  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005e5  00000000  00000000  000214fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00021ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000109  00000000  00000000  00021c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2e8  00000000  00000000  00021d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001928  00000000  00000000  0003e051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d783  00000000  00000000  0003f979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001014  00000000  00000000  000dd0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000de110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800202c 	.word	0x0800202c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800202c 	.word	0x0800202c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <I2C1_STOP>:
static inline void I2C1_START(void) { I2C1->CR2 |= I2C_CR2_START; }

/*
 * Generuje STOP po zakoÅ„czeniu obecnego transferu
 */
static inline void I2C1_STOP(void) { I2C1->CR2 |= I2C_CR2_STOP; }
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <I2C1_STOP+0x1c>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <I2C1_STOP+0x1c>)
 80002ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ce:	6053      	str	r3, [r2, #4]
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40005400 	.word	0x40005400

080002e0 <DS1307_I2C_ENABLE_OSCILLATOR>:
#include "stm32f746xx.h"
#include "DS1307_I2C.h"



void DS1307_I2C_ENABLE_OSCILLATOR(void){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 80002e4:	20d0      	movs	r0, #208	; 0xd0
 80002e6:	f000 f9f7 	bl	80006d8 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(SECONDS_REG);
 80002ea:	2012      	movs	r0, #18
 80002ec:	f000 fa20 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(SECONDS_REG_CLEAR);
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 fa1d 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_STOP();
 80002f6:	f7ff ffe3 	bl	80002c0 <I2C1_STOP>
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}

080002fe <DS1307_SET_24H_MODE>:

void DS1307_SET_24H_MODE(void){
 80002fe:	b580      	push	{r7, lr}
 8000300:	af00      	add	r7, sp, #0
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 8000302:	20d0      	movs	r0, #208	; 0xd0
 8000304:	f000 f9e8 	bl	80006d8 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(HOURS_REG);
 8000308:	2002      	movs	r0, #2
 800030a:	f000 fa11 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(HOURS_REG_CLEAR);
 800030e:	2000      	movs	r0, #0
 8000310:	f000 fa0e 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_STOP();
 8000314:	f7ff ffd4 	bl	80002c0 <I2C1_STOP>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}

0800031c <DS1307_INIT_CONF>:

void DS1307_INIT_CONF(void){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	DS1307_I2C_ENABLE_OSCILLATOR();
 8000320:	f7ff ffde 	bl	80002e0 <DS1307_I2C_ENABLE_OSCILLATOR>
	DS1307_SET_24H_MODE();
 8000324:	f7ff ffeb 	bl	80002fe <DS1307_SET_24H_MODE>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <DS1307_SET_TIME>:

void DS1307_SET_TIME(uint8_t SEC, uint8_t MIN, uint8_t HOUR){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
 8000336:	460b      	mov	r3, r1
 8000338:	71bb      	strb	r3, [r7, #6]
 800033a:	4613      	mov	r3, r2
 800033c:	717b      	strb	r3, [r7, #5]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 800033e:	20d0      	movs	r0, #208	; 0xd0
 8000340:	f000 f9ca 	bl	80006d8 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(SECONDS_REG);
 8000344:	2012      	movs	r0, #18
 8000346:	f000 f9f3 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(SEC & 0x7F);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f9ec 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(MIN & 0x7F);
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800035e:	b2db      	uxtb	r3, r3
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f9e5 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(HOUR & 0x3F);
 8000366:	797b      	ldrb	r3, [r7, #5]
 8000368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f9de 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_STOP();
 8000374:	f7ff ffa4 	bl	80002c0 <I2C1_STOP>
}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <DS1307_SET_DATE>:

void DS1307_SET_DATE(uint8_t DAY, uint8_t DATE, uint8_t MONTH, uint8_t YEAR){
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4604      	mov	r4, r0
 8000388:	4608      	mov	r0, r1
 800038a:	4611      	mov	r1, r2
 800038c:	461a      	mov	r2, r3
 800038e:	4623      	mov	r3, r4
 8000390:	71fb      	strb	r3, [r7, #7]
 8000392:	4603      	mov	r3, r0
 8000394:	71bb      	strb	r3, [r7, #6]
 8000396:	460b      	mov	r3, r1
 8000398:	717b      	strb	r3, [r7, #5]
 800039a:	4613      	mov	r3, r2
 800039c:	713b      	strb	r3, [r7, #4]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 800039e:	20d0      	movs	r0, #208	; 0xd0
 80003a0:	f000 f99a 	bl	80006d8 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(DAYS_REG);
 80003a4:	2003      	movs	r0, #3
 80003a6:	f000 f9c3 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(DAY & 0x07);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f003 0307 	and.w	r3, r3, #7
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f9bc 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(DATE & 0x3F);
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f9b5 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(MONTH & 0x1F);
 80003c6:	797b      	ldrb	r3, [r7, #5]
 80003c8:	f003 031f 	and.w	r3, r3, #31
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f9ae 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(YEAR);
 80003d4:	793b      	ldrb	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f9aa 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_STOP();
 80003dc:	f7ff ff70 	bl	80002c0 <I2C1_STOP>
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd90      	pop	{r4, r7, pc}

080003e8 <DS1307_GET_TIME>:

void DS1307_GET_TIME(uint8_t *ptr_SEC, uint8_t *ptr_MIN, uint8_t *ptr_HOUR){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 80003f4:	20d0      	movs	r0, #208	; 0xd0
 80003f6:	f000 f96f 	bl	80006d8 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(SECONDS_REG);
 80003fa:	2012      	movs	r0, #18
 80003fc:	f000 f998 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000400:	20d1      	movs	r0, #209	; 0xd1
 8000402:	f000 f97e 	bl	8000702 <I2C1_SELECT_AND_START_RD>
	*ptr_SEC = (I2C1_READ_BYTE() & 0x7F);
 8000406:	f000 f9ad 	bl	8000764 <I2C1_READ_BYTE>
 800040a:	4603      	mov	r3, r0
 800040c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000410:	b2da      	uxtb	r2, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000416:	20d1      	movs	r0, #209	; 0xd1
 8000418:	f000 f973 	bl	8000702 <I2C1_SELECT_AND_START_RD>
	*ptr_MIN = (I2C1_READ_BYTE() & 0x7F);
 800041c:	f000 f9a2 	bl	8000764 <I2C1_READ_BYTE>
 8000420:	4603      	mov	r3, r0
 8000422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000426:	b2da      	uxtb	r2, r3
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 800042c:	20d1      	movs	r0, #209	; 0xd1
 800042e:	f000 f968 	bl	8000702 <I2C1_SELECT_AND_START_RD>
	*ptr_HOUR = (I2C1_READ_BYTE() & 0x3F);
 8000432:	f000 f997 	bl	8000764 <I2C1_READ_BYTE>
 8000436:	4603      	mov	r3, r0
 8000438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800043c:	b2da      	uxtb	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	701a      	strb	r2, [r3, #0]
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <DS1307_GET_DATE>:

void DS1307_GET_DATE(uint8_t *ptr_DAY, uint8_t *ptr_DATE, uint8_t *ptr_MONTH, uint8_t *ptr_YEAR){
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	60f8      	str	r0, [r7, #12]
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	607a      	str	r2, [r7, #4]
 8000456:	603b      	str	r3, [r7, #0]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 8000458:	20d0      	movs	r0, #208	; 0xd0
 800045a:	f000 f93d 	bl	80006d8 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(DAYS_REG);
 800045e:	2003      	movs	r0, #3
 8000460:	f000 f966 	bl	8000730 <I2C1_SEND_BYTE>
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000464:	20d1      	movs	r0, #209	; 0xd1
 8000466:	f000 f94c 	bl	8000702 <I2C1_SELECT_AND_START_RD>
	*ptr_DAY = (I2C1_READ_BYTE() & 0x07);
 800046a:	f000 f97b 	bl	8000764 <I2C1_READ_BYTE>
 800046e:	4603      	mov	r3, r0
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	b2da      	uxtb	r2, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 800047a:	20d1      	movs	r0, #209	; 0xd1
 800047c:	f000 f941 	bl	8000702 <I2C1_SELECT_AND_START_RD>
	*ptr_DATE = (I2C1_READ_BYTE() & 0x3F);
 8000480:	f000 f970 	bl	8000764 <I2C1_READ_BYTE>
 8000484:	4603      	mov	r3, r0
 8000486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800048a:	b2da      	uxtb	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000490:	20d1      	movs	r0, #209	; 0xd1
 8000492:	f000 f936 	bl	8000702 <I2C1_SELECT_AND_START_RD>
	*ptr_MONTH = (I2C1_READ_BYTE() & 0x1F);
 8000496:	f000 f965 	bl	8000764 <I2C1_READ_BYTE>
 800049a:	4603      	mov	r3, r0
 800049c:	f003 031f 	and.w	r3, r3, #31
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 80004a6:	20d1      	movs	r0, #209	; 0xd1
 80004a8:	f000 f92b 	bl	8000702 <I2C1_SELECT_AND_START_RD>
	*ptr_YEAR = I2C1_READ_BYTE();
 80004ac:	f000 f95a 	bl	8000764 <I2C1_READ_BYTE>
 80004b0:	4603      	mov	r3, r0
 80004b2:	461a      	mov	r2, r3
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	701a      	strb	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <I2C1_START>:
static inline void I2C1_START(void) { I2C1->CR2 |= I2C_CR2_START; }
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <I2C1_START+0x1c>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <I2C1_START+0x1c>)
 80004ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ce:	6053      	str	r3, [r2, #4]
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40005400 	.word	0x40005400

080004e0 <I2C1_SET_ADDR>:

/*
 * Ustawia adres urzÄ…dznia docelowego
 */
static inline void I2C1_SET_ADDR(uint8_t Address) { I2C1->CR2 |= Address; }
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <I2C1_SET_ADDR+0x24>)
 80004ec:	685a      	ldr	r2, [r3, #4]
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <I2C1_SET_ADDR+0x24>)
 80004f2:	4313      	orrs	r3, r2
 80004f4:	604b      	str	r3, [r1, #4]
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40005400 	.word	0x40005400

08000508 <I2C1_SET_WRITE>:

/*
 * Ustawia I2C na wysyÅ‚anie danych
 */
static inline void I2C1_SET_WRITE(void) { I2C1->CR2 &= ~(I2C_CR2_RD_WRN); }
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <I2C1_SET_WRITE+0x1c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <I2C1_SET_WRITE+0x1c>)
 8000512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000516:	6053      	str	r3, [r2, #4]
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40005400 	.word	0x40005400

08000528 <I2C1_SET_READ>:

/*
 * Ustawia I2C na odbieranie danych
 */
static inline void I2C1_SET_READ(void) { I2C1->CR2 |= I2C_CR2_RD_WRN; }
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <I2C1_SET_READ+0x1c>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <I2C1_SET_READ+0x1c>)
 8000532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000536:	6053      	str	r3, [r2, #4]
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40005400 	.word	0x40005400

08000548 <I2C1_SET_1_BYTE_TRANSFER>:

/*
 * Ustawia I2C na wysÅ‚anie/odbieranie 1 bajtu
 */
static inline void I2C1_SET_1_BYTE_TRANSFER(void) { I2C1->CR2 |= (1 << 16); }
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <I2C1_SET_1_BYTE_TRANSFER+0x1c>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <I2C1_SET_1_BYTE_TRANSFER+0x1c>)
 8000552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000556:	6053      	str	r3, [r2, #4]
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40005400 	.word	0x40005400

08000568 <I2C1_WAIT_FOR_START>:

/*
 * Ustawia I2C na wysÅ‚anie/odbieranie 1 bajtu
 */
static inline void I2C1_WAIT_FOR_START(void) {
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	while(I2C1->CR2 & I2C_CR2_START){  }
 800056c:	bf00      	nop
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <I2C1_WAIT_FOR_START+0x20>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f9      	bne.n	800056e <I2C1_WAIT_FOR_START+0x6>
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40005400 	.word	0x40005400

0800058c <I2C1_WAIT_FOR_TXDR_EMPTY>:

/*
 * Czeka na oprÃ³Å¼nienie rejestru TXDR
 */
static inline void I2C1_WAIT_FOR_TXDR_EMPTY(void) {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	while(!(I2C1->ISR & I2C_ISR_TXE)){  }
 8000590:	bf00      	nop
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <I2C1_WAIT_FOR_TXDR_EMPTY+0x20>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f9      	beq.n	8000592 <I2C1_WAIT_FOR_TXDR_EMPTY+0x6>
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40005400 	.word	0x40005400

080005b0 <I2C1_WAIT_FOR_REC_COMPLETE>:

/*
 * Czeka na zakoÅ„czenie odbioru danych
 */
static inline void I2C1_WAIT_FOR_REC_COMPLETE(void) {
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	while(!(I2C1->ISR & I2C_ISR_RXNE)){  }
 80005b4:	bf00      	nop
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <I2C1_WAIT_FOR_REC_COMPLETE+0x20>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <I2C1_WAIT_FOR_REC_COMPLETE+0x6>
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40005400 	.word	0x40005400

080005d4 <I2C1_SEND_NACK>:

/*
 * WysyÅ‚a NACK po odebraniu bajtu
 */
static inline void I2C1_SEND_NACK(void) { I2C1->CR2 |= I2C_CR2_NACK; }
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <I2C1_SEND_NACK+0x1c>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <I2C1_SEND_NACK+0x1c>)
 80005de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e2:	6053      	str	r3, [r2, #4]
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40005400 	.word	0x40005400

080005f4 <I2C1_GPIO_CONF>:

#include <stdint.h>
#include "stm32f746xx.h"
#include "i2c1.h"

void I2C1_GPIO_CONF(void){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	//GPIOB CLOCK ENABLE
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <I2C1_GPIO_CONF+0x4c>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <I2C1_GPIO_CONF+0x4c>)
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
	//ALTERNATE FUNCTION MODE
	GPIOB->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <I2C1_GPIO_CONF+0x50>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <I2C1_GPIO_CONF+0x50>)
 800060a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800060e:	6013      	str	r3, [r2, #0]
	//OUTPUT SPEED HIGH
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1 | GPIO_OSPEEDER_OSPEEDR9_1;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <I2C1_GPIO_CONF+0x50>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <I2C1_GPIO_CONF+0x50>)
 8000616:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800061a:	6093      	str	r3, [r2, #8]
	//PULL UP
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR9_0;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <I2C1_GPIO_CONF+0x50>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <I2C1_GPIO_CONF+0x50>)
 8000622:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000626:	60d3      	str	r3, [r2, #12]
	//ALTERNATE FUNCTION SELECT (AF4)
	GPIOB->AFR[1] |= (0x4 << 0) | (0x4 << 4);
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <I2C1_GPIO_CONF+0x50>)
 800062a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <I2C1_GPIO_CONF+0x50>)
 800062e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000632:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020400 	.word	0x40020400

08000648 <I2C1_CONF>:

void I2C1_CONF(void){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	//I2C1 CLOCK ENABLE
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <I2C1_CONF+0x88>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a1f      	ldr	r2, [pc, #124]	; (80006d0 <I2C1_CONF+0x88>)
 8000652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40

	//PERIPHERAL DISABLE (RESET)
	I2C1->CR1 &= ~(I2C_CR1_PE);
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <I2C1_CONF+0x8c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <I2C1_CONF+0x8c>)
 800065e:	f023 0301 	bic.w	r3, r3, #1
 8000662:	6013      	str	r3, [r2, #0]

	//APB1 PERIPHERAL CLOCK -> 16 MHZ
	//TIMING REGISTER
	//TIMING PRESCALLER
	I2C1->TIMINGR |= (3 << 28);
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <I2C1_CONF+0x8c>)
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <I2C1_CONF+0x8c>)
 800066a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800066e:	6113      	str	r3, [r2, #16]
	//DATA SETUP TIME (SCLDEL)
	I2C1->TIMINGR |= (0x4 << 20);
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <I2C1_CONF+0x8c>)
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <I2C1_CONF+0x8c>)
 8000676:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800067a:	6113      	str	r3, [r2, #16]
	//DATA HOLD TIME (SDADEL)
	I2C1->TIMINGR |= (0x2 << 16);
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <I2C1_CONF+0x8c>)
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <I2C1_CONF+0x8c>)
 8000682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000686:	6113      	str	r3, [r2, #16]
	//SCL HIGH PERIOD
	I2C1->TIMINGR |= (0xF << 8);
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <I2C1_CONF+0x8c>)
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <I2C1_CONF+0x8c>)
 800068e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000692:	6113      	str	r3, [r2, #16]
	//SCL LOW PERIOD
	I2C1->TIMINGR |= (0x13 << 0);
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <I2C1_CONF+0x8c>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <I2C1_CONF+0x8c>)
 800069a:	f043 0313 	orr.w	r3, r3, #19
 800069e:	6113      	str	r3, [r2, #16]

	//NOSTRECH BIT CLEARED (STM IN MASTER MODE)
	I2C1->CR1 &= ~(I2C_CR1_NOSTRETCH);
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <I2C1_CONF+0x8c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <I2C1_CONF+0x8c>)
 80006a6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006aa:	6013      	str	r3, [r2, #0]

	//SET OWN ADDRESS
	I2C1->OAR1 |= 0x03 << 1;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <I2C1_CONF+0x8c>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <I2C1_CONF+0x8c>)
 80006b2:	f043 0306 	orr.w	r3, r3, #6
 80006b6:	6093      	str	r3, [r2, #8]

	//PERIPHERAL ENABLE
	I2C1->CR1 |= I2C_CR1_PE;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <I2C1_CONF+0x8c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <I2C1_CONF+0x8c>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40005400 	.word	0x40005400

080006d8 <I2C1_SELECT_AND_START_WR>:

void I2C1_SELECT_AND_START_WR(uint8_t Address){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	I2C1_SET_ADDR(Address);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fefb 	bl	80004e0 <I2C1_SET_ADDR>
	I2C1_SET_WRITE();
 80006ea:	f7ff ff0d 	bl	8000508 <I2C1_SET_WRITE>
	I2C1_SET_1_BYTE_TRANSFER();
 80006ee:	f7ff ff2b 	bl	8000548 <I2C1_SET_1_BYTE_TRANSFER>
	I2C1_START();
 80006f2:	f7ff fee5 	bl	80004c0 <I2C1_START>

	I2C1_WAIT_FOR_START();
 80006f6:	f7ff ff37 	bl	8000568 <I2C1_WAIT_FOR_START>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <I2C1_SELECT_AND_START_RD>:

void I2C1_SELECT_AND_START_RD(uint8_t Address){
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	4603      	mov	r3, r0
 800070a:	71fb      	strb	r3, [r7, #7]
	I2C1_SET_ADDR(Address);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fee6 	bl	80004e0 <I2C1_SET_ADDR>
	I2C1_SET_READ();
 8000714:	f7ff ff08 	bl	8000528 <I2C1_SET_READ>
	I2C1_SET_1_BYTE_TRANSFER();
 8000718:	f7ff ff16 	bl	8000548 <I2C1_SET_1_BYTE_TRANSFER>
	I2C1_SEND_NACK();
 800071c:	f7ff ff5a 	bl	80005d4 <I2C1_SEND_NACK>
	I2C1_START();
 8000720:	f7ff fece 	bl	80004c0 <I2C1_START>

	I2C1_WAIT_FOR_START();
 8000724:	f7ff ff20 	bl	8000568 <I2C1_WAIT_FOR_START>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <I2C1_SEND_BYTE>:

void I2C1_SEND_BYTE(uint8_t Byte){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	I2C1_WAIT_FOR_TXDR_EMPTY();
 800073a:	f7ff ff27 	bl	800058c <I2C1_WAIT_FOR_TXDR_EMPTY>
	I2C1->TXDR = Byte;
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <I2C1_SEND_BYTE+0x2c>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	6293      	str	r3, [r2, #40]	; 0x28
	printf("%d\n", Byte);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <I2C1_SEND_BYTE+0x30>)
 800074a:	f000 fd9f 	bl	800128c <iprintf>
	I2C1_WAIT_FOR_TXDR_EMPTY();
 800074e:	f7ff ff1d 	bl	800058c <I2C1_WAIT_FOR_TXDR_EMPTY>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40005400 	.word	0x40005400
 8000760:	08002044 	.word	0x08002044

08000764 <I2C1_READ_BYTE>:

uint8_t I2C1_READ_BYTE(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	I2C1_WAIT_FOR_REC_COMPLETE();
 8000768:	f7ff ff22 	bl	80005b0 <I2C1_WAIT_FOR_REC_COMPLETE>
	return I2C1->RXDR;
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <I2C1_READ_BYTE+0x14>)
 800076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000770:	b2db      	uxtb	r3, r3
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40005400 	.word	0x40005400

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f7ff ffc2 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <bcd2bin>:
#include <stdint.h>
#include "stm32f746xx.h"
#include "i2c1.h"
#include "DS1307_I2C.h"

uint8_t bcd2bin(uint8_t n) { return ((((n >> 4) & 0x0F) * 10) + (n & 0x0F)); }
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	091b      	lsrs	r3, r3, #4
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	0092      	lsls	r2, r2, #2
 8000828:	4413      	add	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 030f 	and.w	r3, r3, #15
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4413      	add	r3, r2
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <bin2bcd>:

uint8_t bin2bcd(uint8_t n) { return (((n / 10) << 4) | (n % 10)); }
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <bin2bcd+0x44>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	b258      	sxtb	r0, r3
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <bin2bcd+0x44>)
 8000866:	fba3 1302 	umull	r1, r3, r3, r2
 800086a:	08d9      	lsrs	r1, r3, #3
 800086c:	460b      	mov	r3, r1
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b2db      	uxtb	r3, r3
 8000878:	b25b      	sxtb	r3, r3
 800087a:	4303      	orrs	r3, r0
 800087c:	b25b      	sxtb	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	cccccccd 	.word	0xcccccccd

08000890 <SysTick_Handler>:
uint8_t *ptr_MONTH = &MONTH;
uint8_t *ptr_YEAR = &YEAR;



void SysTick_Handler(void){
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	//INCREASE SYSTEM TIMER
	Tick++;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SysTick_Handler+0x18>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <SysTick_Handler+0x18>)
 800089c:	6013      	str	r3, [r2, #0]
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	2000009c 	.word	0x2000009c

080008ac <DELAY>:

void DELAY(uint32_t Delay_ms){
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
    uint32_t StartTime = Tick;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <DELAY+0x2c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
    while(Tick < (StartTime + Delay_ms))
 80008ba:	bf00      	nop
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	441a      	add	r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <DELAY+0x2c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d8f8      	bhi.n	80008bc <DELAY+0x10>
    {
        // Just wait
    }
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	2000009c 	.word	0x2000009c

080008dc <main>:
/*
 * Funkcja gÅ‚Ã³wna programu
 */

int main(void)
{
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af02      	add	r7, sp, #8

	SysTick_Config(16000000/1000);
 80008e2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80008e6:	f7ff ff73 	bl	80007d0 <SysTick_Config>

	initialise_monitor_handles();
 80008ea:	f000 fb91 	bl	8001010 <initialise_monitor_handles>
	/*
	 * Czas poczÄ…tkowy:
	 * 08:00:00
	 * 1 (poniedziaÅ‚ek), 1/3/2024
	 */
	SEC = bin2bcd(0);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff ffaa 	bl	8000848 <bin2bcd>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b6f      	ldr	r3, [pc, #444]	; (8000ab8 <main+0x1dc>)
 80008fa:	701a      	strb	r2, [r3, #0]
	MIN = bin2bcd(0);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ffa3 	bl	8000848 <bin2bcd>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4b6d      	ldr	r3, [pc, #436]	; (8000abc <main+0x1e0>)
 8000908:	701a      	strb	r2, [r3, #0]
	HOUR = bin2bcd(8);
 800090a:	2008      	movs	r0, #8
 800090c:	f7ff ff9c 	bl	8000848 <bin2bcd>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	4b6a      	ldr	r3, [pc, #424]	; (8000ac0 <main+0x1e4>)
 8000916:	701a      	strb	r2, [r3, #0]
	DAY = bin2bcd(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff ff95 	bl	8000848 <bin2bcd>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <main+0x1e8>)
 8000924:	701a      	strb	r2, [r3, #0]
	DATE = bin2bcd(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff ff8e 	bl	8000848 <bin2bcd>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	4b65      	ldr	r3, [pc, #404]	; (8000ac8 <main+0x1ec>)
 8000932:	701a      	strb	r2, [r3, #0]
	MONTH = bin2bcd(3);
 8000934:	2003      	movs	r0, #3
 8000936:	f7ff ff87 	bl	8000848 <bin2bcd>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b63      	ldr	r3, [pc, #396]	; (8000acc <main+0x1f0>)
 8000940:	701a      	strb	r2, [r3, #0]
	YEAR = bin2bcd(24);
 8000942:	2018      	movs	r0, #24
 8000944:	f7ff ff80 	bl	8000848 <bin2bcd>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <main+0x1f4>)
 800094e:	701a      	strb	r2, [r3, #0]

	I2C1_GPIO_CONF();
 8000950:	f7ff fe50 	bl	80005f4 <I2C1_GPIO_CONF>
	I2C1_CONF();
 8000954:	f7ff fe78 	bl	8000648 <I2C1_CONF>

	printf("I2C skonfigurowane\n");
 8000958:	485e      	ldr	r0, [pc, #376]	; (8000ad4 <main+0x1f8>)
 800095a:	f000 fcfd 	bl	8001358 <puts>

	DS1307_INIT_CONF();
 800095e:	f7ff fcdd 	bl	800031c <DS1307_INIT_CONF>

	printf("DS1307 skonfigurowany\n");
 8000962:	485d      	ldr	r0, [pc, #372]	; (8000ad8 <main+0x1fc>)
 8000964:	f000 fcf8 	bl	8001358 <puts>

	DS1307_SET_TIME(SEC, MIN, HOUR);
 8000968:	4b53      	ldr	r3, [pc, #332]	; (8000ab8 <main+0x1dc>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4a53      	ldr	r2, [pc, #332]	; (8000abc <main+0x1e0>)
 800096e:	7811      	ldrb	r1, [r2, #0]
 8000970:	4a53      	ldr	r2, [pc, #332]	; (8000ac0 <main+0x1e4>)
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fcd9 	bl	800032c <DS1307_SET_TIME>
	DS1307_SET_DATE(DAY, DATE, MONTH, YEAR);
 800097a:	4b52      	ldr	r3, [pc, #328]	; (8000ac4 <main+0x1e8>)
 800097c:	7818      	ldrb	r0, [r3, #0]
 800097e:	4b52      	ldr	r3, [pc, #328]	; (8000ac8 <main+0x1ec>)
 8000980:	7819      	ldrb	r1, [r3, #0]
 8000982:	4b52      	ldr	r3, [pc, #328]	; (8000acc <main+0x1f0>)
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b52      	ldr	r3, [pc, #328]	; (8000ad0 <main+0x1f4>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	f7ff fcf9 	bl	8000380 <DS1307_SET_DATE>

	printf("Czas poczÄ…tkowy:\n");
 800098e:	4853      	ldr	r0, [pc, #332]	; (8000adc <main+0x200>)
 8000990:	f000 fce2 	bl	8001358 <puts>
	printf("Godzina: %d : %d : %d", bcd2bin(HOUR), bcd2bin(MIN), bcd2bin(SEC));
 8000994:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <main+0x1e4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff3b 	bl	8000814 <bcd2bin>
 800099e:	4603      	mov	r3, r0
 80009a0:	461c      	mov	r4, r3
 80009a2:	4b46      	ldr	r3, [pc, #280]	; (8000abc <main+0x1e0>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff34 	bl	8000814 <bcd2bin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461d      	mov	r5, r3
 80009b0:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <main+0x1dc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff2d 	bl	8000814 <bcd2bin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	462a      	mov	r2, r5
 80009be:	4621      	mov	r1, r4
 80009c0:	4847      	ldr	r0, [pc, #284]	; (8000ae0 <main+0x204>)
 80009c2:	f000 fc63 	bl	800128c <iprintf>
	printf("        Data: %d / %d / %d / 20%d\n", bcd2bin(DAY), bcd2bin(DATE), bcd2bin(MONTH), bcd2bin(YEAR));
 80009c6:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <main+0x1e8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff22 	bl	8000814 <bcd2bin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461c      	mov	r4, r3
 80009d4:	4b3c      	ldr	r3, [pc, #240]	; (8000ac8 <main+0x1ec>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff1b 	bl	8000814 <bcd2bin>
 80009de:	4603      	mov	r3, r0
 80009e0:	461d      	mov	r5, r3
 80009e2:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <main+0x1f0>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff14 	bl	8000814 <bcd2bin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461e      	mov	r6, r3
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <main+0x1f4>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff0d 	bl	8000814 <bcd2bin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	4633      	mov	r3, r6
 8000a00:	462a      	mov	r2, r5
 8000a02:	4621      	mov	r1, r4
 8000a04:	4837      	ldr	r0, [pc, #220]	; (8000ae4 <main+0x208>)
 8000a06:	f000 fc41 	bl	800128c <iprintf>

	while(1){

		DELAY(1000);
 8000a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0e:	f7ff ff4d 	bl	80008ac <DELAY>
		DELAY(1000);
 8000a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a16:	f7ff ff49 	bl	80008ac <DELAY>

		DS1307_GET_TIME(ptr_SEC, ptr_MIN, ptr_HOUR);
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <main+0x20c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a33      	ldr	r2, [pc, #204]	; (8000aec <main+0x210>)
 8000a20:	6811      	ldr	r1, [r2, #0]
 8000a22:	4a33      	ldr	r2, [pc, #204]	; (8000af0 <main+0x214>)
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fcde 	bl	80003e8 <DS1307_GET_TIME>
		DS1307_GET_DATE(ptr_DAY, ptr_DATE, ptr_MONTH, ptr_YEAR);
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <main+0x218>)
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <main+0x21c>)
 8000a32:	6819      	ldr	r1, [r3, #0]
 8000a34:	4b31      	ldr	r3, [pc, #196]	; (8000afc <main+0x220>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <main+0x224>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f7ff fd05 	bl	800044a <DS1307_GET_DATE>

		printf("Godzina: %d : %d : %d", bcd2bin(HOUR), bcd2bin(MIN), bcd2bin(SEC));
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <main+0x1e4>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fee5 	bl	8000814 <bcd2bin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461c      	mov	r4, r3
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <main+0x1e0>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fede 	bl	8000814 <bcd2bin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461d      	mov	r5, r3
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <main+0x1dc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fed7 	bl	8000814 <bcd2bin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	462a      	mov	r2, r5
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <main+0x204>)
 8000a6e:	f000 fc0d 	bl	800128c <iprintf>
		printf("        Data: %d / %d / %d / 20%d\n", bcd2bin(DAY), bcd2bin(DATE), bcd2bin(MONTH), bcd2bin(YEAR));
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <main+0x1e8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fecc 	bl	8000814 <bcd2bin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461c      	mov	r4, r3
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <main+0x1ec>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fec5 	bl	8000814 <bcd2bin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461d      	mov	r5, r3
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <main+0x1f0>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff febe 	bl	8000814 <bcd2bin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461e      	mov	r6, r3
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <main+0x1f4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff feb7 	bl	8000814 <bcd2bin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	4633      	mov	r3, r6
 8000aac:	462a      	mov	r2, r5
 8000aae:	4621      	mov	r1, r4
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <main+0x208>)
 8000ab2:	f000 fbeb 	bl	800128c <iprintf>
		DELAY(1000);
 8000ab6:	e7a8      	b.n	8000a0a <main+0x12e>
 8000ab8:	200000a0 	.word	0x200000a0
 8000abc:	200000a1 	.word	0x200000a1
 8000ac0:	200000a2 	.word	0x200000a2
 8000ac4:	200000a3 	.word	0x200000a3
 8000ac8:	200000a4 	.word	0x200000a4
 8000acc:	200000a5 	.word	0x200000a5
 8000ad0:	200000a6 	.word	0x200000a6
 8000ad4:	08002048 	.word	0x08002048
 8000ad8:	0800205c 	.word	0x0800205c
 8000adc:	08002074 	.word	0x08002074
 8000ae0:	08002088 	.word	0x08002088
 8000ae4:	080020a0 	.word	0x080020a0
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000004 	.word	0x20000004
 8000af0:	20000008 	.word	0x20000008
 8000af4:	2000000c 	.word	0x2000000c
 8000af8:	20000010 	.word	0x20000010
 8000afc:	20000014 	.word	0x20000014
 8000b00:	20000018 	.word	0x20000018

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f000 fd3e 	bl	80015b4 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20050000 	.word	0x20050000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	200000a8 	.word	0x200000a8
 8000b6c:	200002a8 	.word	0x200002a8

08000b70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	; (8000bac <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <LoopForever+0xe>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	; (8000bbc <LoopForever+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b9e:	f000 fd0f 	bl	80015c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff fe9b 	bl	80008dc <main>

08000ba6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ba6:	e7fe      	b.n	8000ba6 <LoopForever>
  ldr   r0, =_estack
 8000ba8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000bb4:	08002118 	.word	0x08002118
  ldr r2, =_sbss
 8000bb8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000bbc:	200002a4 	.word	0x200002a4

08000bc0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <findslot>:
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <findslot+0x2c>)
 8000bc6:	b510      	push	{r4, lr}
 8000bc8:	4604      	mov	r4, r0
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	b118      	cbz	r0, 8000bd6 <findslot+0x12>
 8000bce:	6a03      	ldr	r3, [r0, #32]
 8000bd0:	b90b      	cbnz	r3, 8000bd6 <findslot+0x12>
 8000bd2:	f000 fb25 	bl	8001220 <__sinit>
 8000bd6:	2c13      	cmp	r4, #19
 8000bd8:	d807      	bhi.n	8000bea <findslot+0x26>
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <findslot+0x30>)
 8000bdc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8000be0:	3201      	adds	r2, #1
 8000be2:	d002      	beq.n	8000bea <findslot+0x26>
 8000be4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	2000      	movs	r0, #0
 8000bec:	e7fc      	b.n	8000be8 <findslot+0x24>
 8000bee:	bf00      	nop
 8000bf0:	2000007c 	.word	0x2000007c
 8000bf4:	200000b8 	.word	0x200000b8

08000bf8 <error>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	f000 fcda 	bl	80015b4 <__errno>
 8000c00:	2613      	movs	r6, #19
 8000c02:	4605      	mov	r5, r0
 8000c04:	2700      	movs	r7, #0
 8000c06:	4630      	mov	r0, r6
 8000c08:	4639      	mov	r1, r7
 8000c0a:	beab      	bkpt	0x00ab
 8000c0c:	4606      	mov	r6, r0
 8000c0e:	602e      	str	r6, [r5, #0]
 8000c10:	4620      	mov	r0, r4
 8000c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c14 <checkerror>:
 8000c14:	1c43      	adds	r3, r0, #1
 8000c16:	d101      	bne.n	8000c1c <checkerror+0x8>
 8000c18:	f7ff bfee 	b.w	8000bf8 <error>
 8000c1c:	4770      	bx	lr

08000c1e <_swiread>:
 8000c1e:	b530      	push	{r4, r5, lr}
 8000c20:	b085      	sub	sp, #20
 8000c22:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000c26:	9203      	str	r2, [sp, #12]
 8000c28:	2406      	movs	r4, #6
 8000c2a:	ad01      	add	r5, sp, #4
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	beab      	bkpt	0x00ab
 8000c32:	4604      	mov	r4, r0
 8000c34:	4620      	mov	r0, r4
 8000c36:	f7ff ffed 	bl	8000c14 <checkerror>
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bd30      	pop	{r4, r5, pc}

08000c3e <_read>:
 8000c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c40:	4615      	mov	r5, r2
 8000c42:	9101      	str	r1, [sp, #4]
 8000c44:	f7ff ffbe 	bl	8000bc4 <findslot>
 8000c48:	9901      	ldr	r1, [sp, #4]
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	b938      	cbnz	r0, 8000c5e <_read+0x20>
 8000c4e:	f000 fcb1 	bl	80015b4 <__errno>
 8000c52:	2309      	movs	r3, #9
 8000c54:	6003      	str	r3, [r0, #0]
 8000c56:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5a:	b003      	add	sp, #12
 8000c5c:	bd30      	pop	{r4, r5, pc}
 8000c5e:	6800      	ldr	r0, [r0, #0]
 8000c60:	462a      	mov	r2, r5
 8000c62:	f7ff ffdc 	bl	8000c1e <_swiread>
 8000c66:	1c43      	adds	r3, r0, #1
 8000c68:	d0f7      	beq.n	8000c5a <_read+0x1c>
 8000c6a:	6863      	ldr	r3, [r4, #4]
 8000c6c:	1a2a      	subs	r2, r5, r0
 8000c6e:	4413      	add	r3, r2
 8000c70:	6063      	str	r3, [r4, #4]
 8000c72:	4610      	mov	r0, r2
 8000c74:	e7f1      	b.n	8000c5a <_read+0x1c>

08000c76 <_swilseek>:
 8000c76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c78:	460c      	mov	r4, r1
 8000c7a:	4616      	mov	r6, r2
 8000c7c:	f7ff ffa2 	bl	8000bc4 <findslot>
 8000c80:	4605      	mov	r5, r0
 8000c82:	b940      	cbnz	r0, 8000c96 <_swilseek+0x20>
 8000c84:	f000 fc96 	bl	80015b4 <__errno>
 8000c88:	2309      	movs	r3, #9
 8000c8a:	6003      	str	r3, [r0, #0]
 8000c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8000c90:	4620      	mov	r0, r4
 8000c92:	b003      	add	sp, #12
 8000c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c96:	2e02      	cmp	r6, #2
 8000c98:	d903      	bls.n	8000ca2 <_swilseek+0x2c>
 8000c9a:	f000 fc8b 	bl	80015b4 <__errno>
 8000c9e:	2316      	movs	r3, #22
 8000ca0:	e7f3      	b.n	8000c8a <_swilseek+0x14>
 8000ca2:	2e01      	cmp	r6, #1
 8000ca4:	d112      	bne.n	8000ccc <_swilseek+0x56>
 8000ca6:	6843      	ldr	r3, [r0, #4]
 8000ca8:	18e4      	adds	r4, r4, r3
 8000caa:	d4f6      	bmi.n	8000c9a <_swilseek+0x24>
 8000cac:	682b      	ldr	r3, [r5, #0]
 8000cae:	260a      	movs	r6, #10
 8000cb0:	e9cd 3400 	strd	r3, r4, [sp]
 8000cb4:	466f      	mov	r7, sp
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	4639      	mov	r1, r7
 8000cba:	beab      	bkpt	0x00ab
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f7ff ffa8 	bl	8000c14 <checkerror>
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	dbe1      	blt.n	8000c8c <_swilseek+0x16>
 8000cc8:	606c      	str	r4, [r5, #4]
 8000cca:	e7e1      	b.n	8000c90 <_swilseek+0x1a>
 8000ccc:	2e02      	cmp	r6, #2
 8000cce:	6803      	ldr	r3, [r0, #0]
 8000cd0:	d1ec      	bne.n	8000cac <_swilseek+0x36>
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	260c      	movs	r6, #12
 8000cd6:	466f      	mov	r7, sp
 8000cd8:	4630      	mov	r0, r6
 8000cda:	4639      	mov	r1, r7
 8000cdc:	beab      	bkpt	0x00ab
 8000cde:	4606      	mov	r6, r0
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f7ff ff97 	bl	8000c14 <checkerror>
 8000ce6:	1c43      	adds	r3, r0, #1
 8000ce8:	d0d0      	beq.n	8000c8c <_swilseek+0x16>
 8000cea:	4404      	add	r4, r0
 8000cec:	e7de      	b.n	8000cac <_swilseek+0x36>

08000cee <_lseek>:
 8000cee:	f7ff bfc2 	b.w	8000c76 <_swilseek>

08000cf2 <_swiwrite>:
 8000cf2:	b530      	push	{r4, r5, lr}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000cfa:	9203      	str	r2, [sp, #12]
 8000cfc:	2405      	movs	r4, #5
 8000cfe:	ad01      	add	r5, sp, #4
 8000d00:	4620      	mov	r0, r4
 8000d02:	4629      	mov	r1, r5
 8000d04:	beab      	bkpt	0x00ab
 8000d06:	4604      	mov	r4, r0
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f7ff ff83 	bl	8000c14 <checkerror>
 8000d0e:	b005      	add	sp, #20
 8000d10:	bd30      	pop	{r4, r5, pc}

08000d12 <_write>:
 8000d12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d14:	4615      	mov	r5, r2
 8000d16:	9101      	str	r1, [sp, #4]
 8000d18:	f7ff ff54 	bl	8000bc4 <findslot>
 8000d1c:	9901      	ldr	r1, [sp, #4]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	b930      	cbnz	r0, 8000d30 <_write+0x1e>
 8000d22:	f000 fc47 	bl	80015b4 <__errno>
 8000d26:	2309      	movs	r3, #9
 8000d28:	6003      	str	r3, [r0, #0]
 8000d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2e:	e012      	b.n	8000d56 <_write+0x44>
 8000d30:	6800      	ldr	r0, [r0, #0]
 8000d32:	462a      	mov	r2, r5
 8000d34:	f7ff ffdd 	bl	8000cf2 <_swiwrite>
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	dbf6      	blt.n	8000d2a <_write+0x18>
 8000d3c:	6862      	ldr	r2, [r4, #4]
 8000d3e:	1a2b      	subs	r3, r5, r0
 8000d40:	441a      	add	r2, r3
 8000d42:	42a8      	cmp	r0, r5
 8000d44:	6062      	str	r2, [r4, #4]
 8000d46:	d105      	bne.n	8000d54 <_write+0x42>
 8000d48:	2000      	movs	r0, #0
 8000d4a:	b003      	add	sp, #12
 8000d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d50:	f7ff bf52 	b.w	8000bf8 <error>
 8000d54:	4618      	mov	r0, r3
 8000d56:	b003      	add	sp, #12
 8000d58:	bd30      	pop	{r4, r5, pc}

08000d5a <_swiclose>:
 8000d5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d5c:	2402      	movs	r4, #2
 8000d5e:	9001      	str	r0, [sp, #4]
 8000d60:	ad01      	add	r5, sp, #4
 8000d62:	4620      	mov	r0, r4
 8000d64:	4629      	mov	r1, r5
 8000d66:	beab      	bkpt	0x00ab
 8000d68:	4604      	mov	r4, r0
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f7ff ff52 	bl	8000c14 <checkerror>
 8000d70:	b003      	add	sp, #12
 8000d72:	bd30      	pop	{r4, r5, pc}

08000d74 <_close>:
 8000d74:	b538      	push	{r3, r4, r5, lr}
 8000d76:	4605      	mov	r5, r0
 8000d78:	f7ff ff24 	bl	8000bc4 <findslot>
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	b930      	cbnz	r0, 8000d8e <_close+0x1a>
 8000d80:	f000 fc18 	bl	80015b4 <__errno>
 8000d84:	2309      	movs	r3, #9
 8000d86:	6003      	str	r3, [r0, #0]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	bd38      	pop	{r3, r4, r5, pc}
 8000d8e:	3d01      	subs	r5, #1
 8000d90:	2d01      	cmp	r5, #1
 8000d92:	d809      	bhi.n	8000da8 <_close+0x34>
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <_close+0x48>)
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d104      	bne.n	8000da8 <_close+0x34>
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	6003      	str	r3, [r0, #0]
 8000da4:	2000      	movs	r0, #0
 8000da6:	e7f1      	b.n	8000d8c <_close+0x18>
 8000da8:	6820      	ldr	r0, [r4, #0]
 8000daa:	f7ff ffd6 	bl	8000d5a <_swiclose>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d1ec      	bne.n	8000d8c <_close+0x18>
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	6023      	str	r3, [r4, #0]
 8000db8:	e7e8      	b.n	8000d8c <_close+0x18>
 8000dba:	bf00      	nop
 8000dbc:	200000b8 	.word	0x200000b8

08000dc0 <_swistat>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	f7ff fefe 	bl	8000bc4 <findslot>
 8000dc8:	4605      	mov	r5, r0
 8000dca:	b930      	cbnz	r0, 8000dda <_swistat+0x1a>
 8000dcc:	f000 fbf2 	bl	80015b4 <__errno>
 8000dd0:	2309      	movs	r3, #9
 8000dd2:	6003      	str	r3, [r0, #0]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
 8000dda:	6863      	ldr	r3, [r4, #4]
 8000ddc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000de0:	6063      	str	r3, [r4, #4]
 8000de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de6:	64a3      	str	r3, [r4, #72]	; 0x48
 8000de8:	260c      	movs	r6, #12
 8000dea:	4630      	mov	r0, r6
 8000dec:	4629      	mov	r1, r5
 8000dee:	beab      	bkpt	0x00ab
 8000df0:	4605      	mov	r5, r0
 8000df2:	4628      	mov	r0, r5
 8000df4:	f7ff ff0e 	bl	8000c14 <checkerror>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	bf1c      	itt	ne
 8000dfc:	6120      	strne	r0, [r4, #16]
 8000dfe:	2000      	movne	r0, #0
 8000e00:	e7ea      	b.n	8000dd8 <_swistat+0x18>

08000e02 <_fstat>:
 8000e02:	460b      	mov	r3, r1
 8000e04:	b510      	push	{r4, lr}
 8000e06:	2100      	movs	r1, #0
 8000e08:	4604      	mov	r4, r0
 8000e0a:	2258      	movs	r2, #88	; 0x58
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fb83 	bl	8001518 <memset>
 8000e12:	4601      	mov	r1, r0
 8000e14:	4620      	mov	r0, r4
 8000e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e1a:	f7ff bfd1 	b.w	8000dc0 <_swistat>

08000e1e <_stat>:
 8000e1e:	b538      	push	{r3, r4, r5, lr}
 8000e20:	460d      	mov	r5, r1
 8000e22:	4604      	mov	r4, r0
 8000e24:	2258      	movs	r2, #88	; 0x58
 8000e26:	2100      	movs	r1, #0
 8000e28:	4628      	mov	r0, r5
 8000e2a:	f000 fb75 	bl	8001518 <memset>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	2100      	movs	r1, #0
 8000e32:	f000 f811 	bl	8000e58 <_swiopen>
 8000e36:	1c43      	adds	r3, r0, #1
 8000e38:	4604      	mov	r4, r0
 8000e3a:	d00b      	beq.n	8000e54 <_stat+0x36>
 8000e3c:	686b      	ldr	r3, [r5, #4]
 8000e3e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8000e42:	606b      	str	r3, [r5, #4]
 8000e44:	4629      	mov	r1, r5
 8000e46:	f7ff ffbb 	bl	8000dc0 <_swistat>
 8000e4a:	4605      	mov	r5, r0
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f7ff ff91 	bl	8000d74 <_close>
 8000e52:	462c      	mov	r4, r5
 8000e54:	4620      	mov	r0, r4
 8000e56:	bd38      	pop	{r3, r4, r5, pc}

08000e58 <_swiopen>:
 8000e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e5c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000f08 <_swiopen+0xb0>
 8000e60:	b097      	sub	sp, #92	; 0x5c
 8000e62:	4607      	mov	r7, r0
 8000e64:	460e      	mov	r6, r1
 8000e66:	2500      	movs	r5, #0
 8000e68:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8000e6c:	1c61      	adds	r1, r4, #1
 8000e6e:	d037      	beq.n	8000ee0 <_swiopen+0x88>
 8000e70:	3501      	adds	r5, #1
 8000e72:	2d14      	cmp	r5, #20
 8000e74:	d1f8      	bne.n	8000e68 <_swiopen+0x10>
 8000e76:	f000 fb9d 	bl	80015b4 <__errno>
 8000e7a:	2318      	movs	r3, #24
 8000e7c:	6003      	str	r3, [r0, #0]
 8000e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8000e82:	e03d      	b.n	8000f00 <_swiopen+0xa8>
 8000e84:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8000e88:	f240 6301 	movw	r3, #1537	; 0x601
 8000e8c:	07b2      	lsls	r2, r6, #30
 8000e8e:	bf48      	it	mi
 8000e90:	f044 0402 	orrmi.w	r4, r4, #2
 8000e94:	421e      	tst	r6, r3
 8000e96:	bf18      	it	ne
 8000e98:	f044 0404 	orrne.w	r4, r4, #4
 8000e9c:	0733      	lsls	r3, r6, #28
 8000e9e:	bf48      	it	mi
 8000ea0:	f024 0404 	bicmi.w	r4, r4, #4
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	bf48      	it	mi
 8000ea8:	f044 0408 	orrmi.w	r4, r4, #8
 8000eac:	9700      	str	r7, [sp, #0]
 8000eae:	f7ff f9af 	bl	8000210 <strlen>
 8000eb2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8000eb6:	2401      	movs	r4, #1
 8000eb8:	4620      	mov	r0, r4
 8000eba:	4649      	mov	r1, r9
 8000ebc:	beab      	bkpt	0x00ab
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	db08      	blt.n	8000ed6 <_swiopen+0x7e>
 8000ec4:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8000ec8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c8 3004 	str.w	r3, [r8, #4]
 8000ed2:	462c      	mov	r4, r5
 8000ed4:	e014      	b.n	8000f00 <_swiopen+0xa8>
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f7ff fe8e 	bl	8000bf8 <error>
 8000edc:	4604      	mov	r4, r0
 8000ede:	e00f      	b.n	8000f00 <_swiopen+0xa8>
 8000ee0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8000ee4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8000ee8:	46e9      	mov	r9, sp
 8000eea:	d1cb      	bne.n	8000e84 <_swiopen+0x2c>
 8000eec:	4649      	mov	r1, r9
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f7ff ff95 	bl	8000e1e <_stat>
 8000ef4:	3001      	adds	r0, #1
 8000ef6:	d0c5      	beq.n	8000e84 <_swiopen+0x2c>
 8000ef8:	f000 fb5c 	bl	80015b4 <__errno>
 8000efc:	2311      	movs	r3, #17
 8000efe:	6003      	str	r3, [r0, #0]
 8000f00:	4620      	mov	r0, r4
 8000f02:	b017      	add	sp, #92	; 0x5c
 8000f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f08:	200000b8 	.word	0x200000b8

08000f0c <_get_semihosting_exts>:
 8000f0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f10:	4606      	mov	r6, r0
 8000f12:	460f      	mov	r7, r1
 8000f14:	482a      	ldr	r0, [pc, #168]	; (8000fc0 <_get_semihosting_exts+0xb4>)
 8000f16:	2100      	movs	r1, #0
 8000f18:	4615      	mov	r5, r2
 8000f1a:	f7ff ff9d 	bl	8000e58 <_swiopen>
 8000f1e:	462a      	mov	r2, r5
 8000f20:	4604      	mov	r4, r0
 8000f22:	2100      	movs	r1, #0
 8000f24:	4630      	mov	r0, r6
 8000f26:	f000 faf7 	bl	8001518 <memset>
 8000f2a:	1c63      	adds	r3, r4, #1
 8000f2c:	d016      	beq.n	8000f5c <_get_semihosting_exts+0x50>
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f7ff fe48 	bl	8000bc4 <findslot>
 8000f34:	f04f 080c 	mov.w	r8, #12
 8000f38:	4681      	mov	r9, r0
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	beab      	bkpt	0x00ab
 8000f40:	4680      	mov	r8, r0
 8000f42:	4640      	mov	r0, r8
 8000f44:	f7ff fe66 	bl	8000c14 <checkerror>
 8000f48:	2803      	cmp	r0, #3
 8000f4a:	dd02      	ble.n	8000f52 <_get_semihosting_exts+0x46>
 8000f4c:	1ec3      	subs	r3, r0, #3
 8000f4e:	42ab      	cmp	r3, r5
 8000f50:	dc08      	bgt.n	8000f64 <_get_semihosting_exts+0x58>
 8000f52:	4620      	mov	r0, r4
 8000f54:	f7ff ff0e 	bl	8000d74 <_close>
 8000f58:	f04f 34ff 	mov.w	r4, #4294967295
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	b003      	add	sp, #12
 8000f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f64:	2204      	movs	r2, #4
 8000f66:	eb0d 0102 	add.w	r1, sp, r2
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f7ff fe67 	bl	8000c3e <_read>
 8000f70:	2803      	cmp	r0, #3
 8000f72:	ddee      	ble.n	8000f52 <_get_semihosting_exts+0x46>
 8000f74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f78:	2b53      	cmp	r3, #83	; 0x53
 8000f7a:	d1ea      	bne.n	8000f52 <_get_semihosting_exts+0x46>
 8000f7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000f80:	2b48      	cmp	r3, #72	; 0x48
 8000f82:	d1e6      	bne.n	8000f52 <_get_semihosting_exts+0x46>
 8000f84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000f88:	2b46      	cmp	r3, #70	; 0x46
 8000f8a:	d1e2      	bne.n	8000f52 <_get_semihosting_exts+0x46>
 8000f8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f90:	2b42      	cmp	r3, #66	; 0x42
 8000f92:	d1de      	bne.n	8000f52 <_get_semihosting_exts+0x46>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4639      	mov	r1, r7
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f7ff fe6c 	bl	8000c76 <_swilseek>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	dbd7      	blt.n	8000f52 <_get_semihosting_exts+0x46>
 8000fa2:	462a      	mov	r2, r5
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f7ff fe49 	bl	8000c3e <_read>
 8000fac:	4605      	mov	r5, r0
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f7ff fee0 	bl	8000d74 <_close>
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	f7ff fe2d 	bl	8000c14 <checkerror>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	e7ce      	b.n	8000f5c <_get_semihosting_exts+0x50>
 8000fbe:	bf00      	nop
 8000fc0:	080020c3 	.word	0x080020c3

08000fc4 <initialise_semihosting_exts>:
 8000fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fc6:	4d0a      	ldr	r5, [pc, #40]	; (8000ff0 <initialise_semihosting_exts+0x2c>)
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <initialise_semihosting_exts+0x30>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2201      	movs	r2, #1
 8000fce:	a801      	add	r0, sp, #4
 8000fd0:	6029      	str	r1, [r5, #0]
 8000fd2:	6022      	str	r2, [r4, #0]
 8000fd4:	f7ff ff9a 	bl	8000f0c <_get_semihosting_exts>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	dd07      	ble.n	8000fec <initialise_semihosting_exts+0x28>
 8000fdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000fe0:	f003 0201 	and.w	r2, r3, #1
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	602a      	str	r2, [r5, #0]
 8000fea:	6023      	str	r3, [r4, #0]
 8000fec:	b003      	add	sp, #12
 8000fee:	bd30      	pop	{r4, r5, pc}
 8000ff0:	2000001c 	.word	0x2000001c
 8000ff4:	20000020 	.word	0x20000020

08000ff8 <_has_ext_stdout_stderr>:
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	4c04      	ldr	r4, [pc, #16]	; (800100c <_has_ext_stdout_stderr+0x14>)
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da01      	bge.n	8001006 <_has_ext_stdout_stderr+0xe>
 8001002:	f7ff ffdf 	bl	8000fc4 <initialise_semihosting_exts>
 8001006:	6820      	ldr	r0, [r4, #0]
 8001008:	bd10      	pop	{r4, pc}
 800100a:	bf00      	nop
 800100c:	20000020 	.word	0x20000020

08001010 <initialise_monitor_handles>:
 8001010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001014:	b085      	sub	sp, #20
 8001016:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80010c8 <initialise_monitor_handles+0xb8>
 800101a:	f8cd 9004 	str.w	r9, [sp, #4]
 800101e:	2303      	movs	r3, #3
 8001020:	2400      	movs	r4, #0
 8001022:	9303      	str	r3, [sp, #12]
 8001024:	af01      	add	r7, sp, #4
 8001026:	9402      	str	r4, [sp, #8]
 8001028:	2501      	movs	r5, #1
 800102a:	4628      	mov	r0, r5
 800102c:	4639      	mov	r1, r7
 800102e:	beab      	bkpt	0x00ab
 8001030:	4605      	mov	r5, r0
 8001032:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80010cc <initialise_monitor_handles+0xbc>
 8001036:	4623      	mov	r3, r4
 8001038:	4c20      	ldr	r4, [pc, #128]	; (80010bc <initialise_monitor_handles+0xac>)
 800103a:	f8c8 5000 	str.w	r5, [r8]
 800103e:	f04f 32ff 	mov.w	r2, #4294967295
 8001042:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001046:	3301      	adds	r3, #1
 8001048:	2b14      	cmp	r3, #20
 800104a:	d1fa      	bne.n	8001042 <initialise_monitor_handles+0x32>
 800104c:	f7ff ffd4 	bl	8000ff8 <_has_ext_stdout_stderr>
 8001050:	4d1b      	ldr	r5, [pc, #108]	; (80010c0 <initialise_monitor_handles+0xb0>)
 8001052:	b1d0      	cbz	r0, 800108a <initialise_monitor_handles+0x7a>
 8001054:	f04f 0a03 	mov.w	sl, #3
 8001058:	2304      	movs	r3, #4
 800105a:	f8cd 9004 	str.w	r9, [sp, #4]
 800105e:	2601      	movs	r6, #1
 8001060:	f8cd a00c 	str.w	sl, [sp, #12]
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	4630      	mov	r0, r6
 8001068:	4639      	mov	r1, r7
 800106a:	beab      	bkpt	0x00ab
 800106c:	4683      	mov	fp, r0
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <initialise_monitor_handles+0xb4>)
 8001070:	f8cd 9004 	str.w	r9, [sp, #4]
 8001074:	f8c3 b000 	str.w	fp, [r3]
 8001078:	2308      	movs	r3, #8
 800107a:	f8cd a00c 	str.w	sl, [sp, #12]
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	4630      	mov	r0, r6
 8001082:	4639      	mov	r1, r7
 8001084:	beab      	bkpt	0x00ab
 8001086:	4606      	mov	r6, r0
 8001088:	602e      	str	r6, [r5, #0]
 800108a:	682b      	ldr	r3, [r5, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	bf02      	ittt	eq
 8001090:	4b0c      	ldreq	r3, [pc, #48]	; (80010c4 <initialise_monitor_handles+0xb4>)
 8001092:	681b      	ldreq	r3, [r3, #0]
 8001094:	602b      	streq	r3, [r5, #0]
 8001096:	2600      	movs	r6, #0
 8001098:	f8d8 3000 	ldr.w	r3, [r8]
 800109c:	6023      	str	r3, [r4, #0]
 800109e:	6066      	str	r6, [r4, #4]
 80010a0:	f7ff ffaa 	bl	8000ff8 <_has_ext_stdout_stderr>
 80010a4:	b130      	cbz	r0, 80010b4 <initialise_monitor_handles+0xa4>
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <initialise_monitor_handles+0xb4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80010ae:	682b      	ldr	r3, [r5, #0]
 80010b0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80010b4:	b005      	add	sp, #20
 80010b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010ba:	bf00      	nop
 80010bc:	200000b8 	.word	0x200000b8
 80010c0:	200000ac 	.word	0x200000ac
 80010c4:	200000b4 	.word	0x200000b4
 80010c8:	080020d9 	.word	0x080020d9
 80010cc:	200000b0 	.word	0x200000b0

080010d0 <_isatty>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	f7ff fd77 	bl	8000bc4 <findslot>
 80010d6:	2509      	movs	r5, #9
 80010d8:	4604      	mov	r4, r0
 80010da:	b920      	cbnz	r0, 80010e6 <_isatty+0x16>
 80010dc:	f000 fa6a 	bl	80015b4 <__errno>
 80010e0:	6005      	str	r5, [r0, #0]
 80010e2:	4620      	mov	r0, r4
 80010e4:	bd70      	pop	{r4, r5, r6, pc}
 80010e6:	4628      	mov	r0, r5
 80010e8:	4621      	mov	r1, r4
 80010ea:	beab      	bkpt	0x00ab
 80010ec:	4604      	mov	r4, r0
 80010ee:	2c01      	cmp	r4, #1
 80010f0:	d0f7      	beq.n	80010e2 <_isatty+0x12>
 80010f2:	f000 fa5f 	bl	80015b4 <__errno>
 80010f6:	2400      	movs	r4, #0
 80010f8:	4605      	mov	r5, r0
 80010fa:	2613      	movs	r6, #19
 80010fc:	4630      	mov	r0, r6
 80010fe:	4621      	mov	r1, r4
 8001100:	beab      	bkpt	0x00ab
 8001102:	4606      	mov	r6, r0
 8001104:	602e      	str	r6, [r5, #0]
 8001106:	e7ec      	b.n	80010e2 <_isatty+0x12>

08001108 <std>:
 8001108:	2300      	movs	r3, #0
 800110a:	b510      	push	{r4, lr}
 800110c:	4604      	mov	r4, r0
 800110e:	e9c0 3300 	strd	r3, r3, [r0]
 8001112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001116:	6083      	str	r3, [r0, #8]
 8001118:	8181      	strh	r1, [r0, #12]
 800111a:	6643      	str	r3, [r0, #100]	; 0x64
 800111c:	81c2      	strh	r2, [r0, #14]
 800111e:	6183      	str	r3, [r0, #24]
 8001120:	4619      	mov	r1, r3
 8001122:	2208      	movs	r2, #8
 8001124:	305c      	adds	r0, #92	; 0x5c
 8001126:	f000 f9f7 	bl	8001518 <memset>
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <std+0x58>)
 800112c:	6263      	str	r3, [r4, #36]	; 0x24
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <std+0x5c>)
 8001130:	62a3      	str	r3, [r4, #40]	; 0x28
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <std+0x60>)
 8001134:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <std+0x64>)
 8001138:	6323      	str	r3, [r4, #48]	; 0x30
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <std+0x68>)
 800113c:	6224      	str	r4, [r4, #32]
 800113e:	429c      	cmp	r4, r3
 8001140:	d006      	beq.n	8001150 <std+0x48>
 8001142:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001146:	4294      	cmp	r4, r2
 8001148:	d002      	beq.n	8001150 <std+0x48>
 800114a:	33d0      	adds	r3, #208	; 0xd0
 800114c:	429c      	cmp	r4, r3
 800114e:	d105      	bne.n	800115c <std+0x54>
 8001150:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001158:	f000 ba56 	b.w	8001608 <__retarget_lock_init_recursive>
 800115c:	bd10      	pop	{r4, pc}
 800115e:	bf00      	nop
 8001160:	08001369 	.word	0x08001369
 8001164:	0800138b 	.word	0x0800138b
 8001168:	080013c3 	.word	0x080013c3
 800116c:	080013e7 	.word	0x080013e7
 8001170:	20000158 	.word	0x20000158

08001174 <stdio_exit_handler>:
 8001174:	4a02      	ldr	r2, [pc, #8]	; (8001180 <stdio_exit_handler+0xc>)
 8001176:	4903      	ldr	r1, [pc, #12]	; (8001184 <stdio_exit_handler+0x10>)
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <stdio_exit_handler+0x14>)
 800117a:	f000 b869 	b.w	8001250 <_fwalk_sglue>
 800117e:	bf00      	nop
 8001180:	20000024 	.word	0x20000024
 8001184:	08001eb5 	.word	0x08001eb5
 8001188:	20000030 	.word	0x20000030

0800118c <cleanup_stdio>:
 800118c:	6841      	ldr	r1, [r0, #4]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <cleanup_stdio+0x34>)
 8001190:	4299      	cmp	r1, r3
 8001192:	b510      	push	{r4, lr}
 8001194:	4604      	mov	r4, r0
 8001196:	d001      	beq.n	800119c <cleanup_stdio+0x10>
 8001198:	f000 fe8c 	bl	8001eb4 <_fflush_r>
 800119c:	68a1      	ldr	r1, [r4, #8]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <cleanup_stdio+0x38>)
 80011a0:	4299      	cmp	r1, r3
 80011a2:	d002      	beq.n	80011aa <cleanup_stdio+0x1e>
 80011a4:	4620      	mov	r0, r4
 80011a6:	f000 fe85 	bl	8001eb4 <_fflush_r>
 80011aa:	68e1      	ldr	r1, [r4, #12]
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <cleanup_stdio+0x3c>)
 80011ae:	4299      	cmp	r1, r3
 80011b0:	d004      	beq.n	80011bc <cleanup_stdio+0x30>
 80011b2:	4620      	mov	r0, r4
 80011b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b8:	f000 be7c 	b.w	8001eb4 <_fflush_r>
 80011bc:	bd10      	pop	{r4, pc}
 80011be:	bf00      	nop
 80011c0:	20000158 	.word	0x20000158
 80011c4:	200001c0 	.word	0x200001c0
 80011c8:	20000228 	.word	0x20000228

080011cc <global_stdio_init.part.0>:
 80011cc:	b510      	push	{r4, lr}
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <global_stdio_init.part.0+0x30>)
 80011d0:	4c0b      	ldr	r4, [pc, #44]	; (8001200 <global_stdio_init.part.0+0x34>)
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <global_stdio_init.part.0+0x38>)
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	4620      	mov	r0, r4
 80011d8:	2200      	movs	r2, #0
 80011da:	2104      	movs	r1, #4
 80011dc:	f7ff ff94 	bl	8001108 <std>
 80011e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80011e4:	2201      	movs	r2, #1
 80011e6:	2109      	movs	r1, #9
 80011e8:	f7ff ff8e 	bl	8001108 <std>
 80011ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80011f0:	2202      	movs	r2, #2
 80011f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011f6:	2112      	movs	r1, #18
 80011f8:	f7ff bf86 	b.w	8001108 <std>
 80011fc:	20000290 	.word	0x20000290
 8001200:	20000158 	.word	0x20000158
 8001204:	08001175 	.word	0x08001175

08001208 <__sfp_lock_acquire>:
 8001208:	4801      	ldr	r0, [pc, #4]	; (8001210 <__sfp_lock_acquire+0x8>)
 800120a:	f000 b9fe 	b.w	800160a <__retarget_lock_acquire_recursive>
 800120e:	bf00      	nop
 8001210:	20000299 	.word	0x20000299

08001214 <__sfp_lock_release>:
 8001214:	4801      	ldr	r0, [pc, #4]	; (800121c <__sfp_lock_release+0x8>)
 8001216:	f000 b9f9 	b.w	800160c <__retarget_lock_release_recursive>
 800121a:	bf00      	nop
 800121c:	20000299 	.word	0x20000299

08001220 <__sinit>:
 8001220:	b510      	push	{r4, lr}
 8001222:	4604      	mov	r4, r0
 8001224:	f7ff fff0 	bl	8001208 <__sfp_lock_acquire>
 8001228:	6a23      	ldr	r3, [r4, #32]
 800122a:	b11b      	cbz	r3, 8001234 <__sinit+0x14>
 800122c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001230:	f7ff bff0 	b.w	8001214 <__sfp_lock_release>
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__sinit+0x28>)
 8001236:	6223      	str	r3, [r4, #32]
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__sinit+0x2c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f5      	bne.n	800122c <__sinit+0xc>
 8001240:	f7ff ffc4 	bl	80011cc <global_stdio_init.part.0>
 8001244:	e7f2      	b.n	800122c <__sinit+0xc>
 8001246:	bf00      	nop
 8001248:	0800118d 	.word	0x0800118d
 800124c:	20000290 	.word	0x20000290

08001250 <_fwalk_sglue>:
 8001250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001254:	4607      	mov	r7, r0
 8001256:	4688      	mov	r8, r1
 8001258:	4614      	mov	r4, r2
 800125a:	2600      	movs	r6, #0
 800125c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001260:	f1b9 0901 	subs.w	r9, r9, #1
 8001264:	d505      	bpl.n	8001272 <_fwalk_sglue+0x22>
 8001266:	6824      	ldr	r4, [r4, #0]
 8001268:	2c00      	cmp	r4, #0
 800126a:	d1f7      	bne.n	800125c <_fwalk_sglue+0xc>
 800126c:	4630      	mov	r0, r6
 800126e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001272:	89ab      	ldrh	r3, [r5, #12]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d907      	bls.n	8001288 <_fwalk_sglue+0x38>
 8001278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800127c:	3301      	adds	r3, #1
 800127e:	d003      	beq.n	8001288 <_fwalk_sglue+0x38>
 8001280:	4629      	mov	r1, r5
 8001282:	4638      	mov	r0, r7
 8001284:	47c0      	blx	r8
 8001286:	4306      	orrs	r6, r0
 8001288:	3568      	adds	r5, #104	; 0x68
 800128a:	e7e9      	b.n	8001260 <_fwalk_sglue+0x10>

0800128c <iprintf>:
 800128c:	b40f      	push	{r0, r1, r2, r3}
 800128e:	b507      	push	{r0, r1, r2, lr}
 8001290:	4906      	ldr	r1, [pc, #24]	; (80012ac <iprintf+0x20>)
 8001292:	ab04      	add	r3, sp, #16
 8001294:	6808      	ldr	r0, [r1, #0]
 8001296:	f853 2b04 	ldr.w	r2, [r3], #4
 800129a:	6881      	ldr	r1, [r0, #8]
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	f000 fad9 	bl	8001854 <_vfiprintf_r>
 80012a2:	b003      	add	sp, #12
 80012a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80012a8:	b004      	add	sp, #16
 80012aa:	4770      	bx	lr
 80012ac:	2000007c 	.word	0x2000007c

080012b0 <_puts_r>:
 80012b0:	6a03      	ldr	r3, [r0, #32]
 80012b2:	b570      	push	{r4, r5, r6, lr}
 80012b4:	6884      	ldr	r4, [r0, #8]
 80012b6:	4605      	mov	r5, r0
 80012b8:	460e      	mov	r6, r1
 80012ba:	b90b      	cbnz	r3, 80012c0 <_puts_r+0x10>
 80012bc:	f7ff ffb0 	bl	8001220 <__sinit>
 80012c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012c2:	07db      	lsls	r3, r3, #31
 80012c4:	d405      	bmi.n	80012d2 <_puts_r+0x22>
 80012c6:	89a3      	ldrh	r3, [r4, #12]
 80012c8:	0598      	lsls	r0, r3, #22
 80012ca:	d402      	bmi.n	80012d2 <_puts_r+0x22>
 80012cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012ce:	f000 f99c 	bl	800160a <__retarget_lock_acquire_recursive>
 80012d2:	89a3      	ldrh	r3, [r4, #12]
 80012d4:	0719      	lsls	r1, r3, #28
 80012d6:	d513      	bpl.n	8001300 <_puts_r+0x50>
 80012d8:	6923      	ldr	r3, [r4, #16]
 80012da:	b18b      	cbz	r3, 8001300 <_puts_r+0x50>
 80012dc:	3e01      	subs	r6, #1
 80012de:	68a3      	ldr	r3, [r4, #8]
 80012e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60a3      	str	r3, [r4, #8]
 80012e8:	b9e9      	cbnz	r1, 8001326 <_puts_r+0x76>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da2e      	bge.n	800134c <_puts_r+0x9c>
 80012ee:	4622      	mov	r2, r4
 80012f0:	210a      	movs	r1, #10
 80012f2:	4628      	mov	r0, r5
 80012f4:	f000 f87b 	bl	80013ee <__swbuf_r>
 80012f8:	3001      	adds	r0, #1
 80012fa:	d007      	beq.n	800130c <_puts_r+0x5c>
 80012fc:	250a      	movs	r5, #10
 80012fe:	e007      	b.n	8001310 <_puts_r+0x60>
 8001300:	4621      	mov	r1, r4
 8001302:	4628      	mov	r0, r5
 8001304:	f000 f8b0 	bl	8001468 <__swsetup_r>
 8001308:	2800      	cmp	r0, #0
 800130a:	d0e7      	beq.n	80012dc <_puts_r+0x2c>
 800130c:	f04f 35ff 	mov.w	r5, #4294967295
 8001310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001312:	07da      	lsls	r2, r3, #31
 8001314:	d405      	bmi.n	8001322 <_puts_r+0x72>
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	059b      	lsls	r3, r3, #22
 800131a:	d402      	bmi.n	8001322 <_puts_r+0x72>
 800131c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800131e:	f000 f975 	bl	800160c <__retarget_lock_release_recursive>
 8001322:	4628      	mov	r0, r5
 8001324:	bd70      	pop	{r4, r5, r6, pc}
 8001326:	2b00      	cmp	r3, #0
 8001328:	da04      	bge.n	8001334 <_puts_r+0x84>
 800132a:	69a2      	ldr	r2, [r4, #24]
 800132c:	429a      	cmp	r2, r3
 800132e:	dc06      	bgt.n	800133e <_puts_r+0x8e>
 8001330:	290a      	cmp	r1, #10
 8001332:	d004      	beq.n	800133e <_puts_r+0x8e>
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	6022      	str	r2, [r4, #0]
 800133a:	7019      	strb	r1, [r3, #0]
 800133c:	e7cf      	b.n	80012de <_puts_r+0x2e>
 800133e:	4622      	mov	r2, r4
 8001340:	4628      	mov	r0, r5
 8001342:	f000 f854 	bl	80013ee <__swbuf_r>
 8001346:	3001      	adds	r0, #1
 8001348:	d1c9      	bne.n	80012de <_puts_r+0x2e>
 800134a:	e7df      	b.n	800130c <_puts_r+0x5c>
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	250a      	movs	r5, #10
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	6022      	str	r2, [r4, #0]
 8001354:	701d      	strb	r5, [r3, #0]
 8001356:	e7db      	b.n	8001310 <_puts_r+0x60>

08001358 <puts>:
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <puts+0xc>)
 800135a:	4601      	mov	r1, r0
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	f7ff bfa7 	b.w	80012b0 <_puts_r>
 8001362:	bf00      	nop
 8001364:	2000007c 	.word	0x2000007c

08001368 <__sread>:
 8001368:	b510      	push	{r4, lr}
 800136a:	460c      	mov	r4, r1
 800136c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001370:	f000 f8fc 	bl	800156c <_read_r>
 8001374:	2800      	cmp	r0, #0
 8001376:	bfab      	itete	ge
 8001378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800137a:	89a3      	ldrhlt	r3, [r4, #12]
 800137c:	181b      	addge	r3, r3, r0
 800137e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001382:	bfac      	ite	ge
 8001384:	6563      	strge	r3, [r4, #84]	; 0x54
 8001386:	81a3      	strhlt	r3, [r4, #12]
 8001388:	bd10      	pop	{r4, pc}

0800138a <__swrite>:
 800138a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800138e:	461f      	mov	r7, r3
 8001390:	898b      	ldrh	r3, [r1, #12]
 8001392:	05db      	lsls	r3, r3, #23
 8001394:	4605      	mov	r5, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4616      	mov	r6, r2
 800139a:	d505      	bpl.n	80013a8 <__swrite+0x1e>
 800139c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a0:	2302      	movs	r3, #2
 80013a2:	2200      	movs	r2, #0
 80013a4:	f000 f8d0 	bl	8001548 <_lseek_r>
 80013a8:	89a3      	ldrh	r3, [r4, #12]
 80013aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013b2:	81a3      	strh	r3, [r4, #12]
 80013b4:	4632      	mov	r2, r6
 80013b6:	463b      	mov	r3, r7
 80013b8:	4628      	mov	r0, r5
 80013ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013be:	f000 b8e7 	b.w	8001590 <_write_r>

080013c2 <__sseek>:
 80013c2:	b510      	push	{r4, lr}
 80013c4:	460c      	mov	r4, r1
 80013c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013ca:	f000 f8bd 	bl	8001548 <_lseek_r>
 80013ce:	1c43      	adds	r3, r0, #1
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	bf15      	itete	ne
 80013d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80013d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80013da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80013de:	81a3      	strheq	r3, [r4, #12]
 80013e0:	bf18      	it	ne
 80013e2:	81a3      	strhne	r3, [r4, #12]
 80013e4:	bd10      	pop	{r4, pc}

080013e6 <__sclose>:
 80013e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013ea:	f000 b89d 	b.w	8001528 <_close_r>

080013ee <__swbuf_r>:
 80013ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f0:	460e      	mov	r6, r1
 80013f2:	4614      	mov	r4, r2
 80013f4:	4605      	mov	r5, r0
 80013f6:	b118      	cbz	r0, 8001400 <__swbuf_r+0x12>
 80013f8:	6a03      	ldr	r3, [r0, #32]
 80013fa:	b90b      	cbnz	r3, 8001400 <__swbuf_r+0x12>
 80013fc:	f7ff ff10 	bl	8001220 <__sinit>
 8001400:	69a3      	ldr	r3, [r4, #24]
 8001402:	60a3      	str	r3, [r4, #8]
 8001404:	89a3      	ldrh	r3, [r4, #12]
 8001406:	071a      	lsls	r2, r3, #28
 8001408:	d525      	bpl.n	8001456 <__swbuf_r+0x68>
 800140a:	6923      	ldr	r3, [r4, #16]
 800140c:	b31b      	cbz	r3, 8001456 <__swbuf_r+0x68>
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	6922      	ldr	r2, [r4, #16]
 8001412:	1a98      	subs	r0, r3, r2
 8001414:	6963      	ldr	r3, [r4, #20]
 8001416:	b2f6      	uxtb	r6, r6
 8001418:	4283      	cmp	r3, r0
 800141a:	4637      	mov	r7, r6
 800141c:	dc04      	bgt.n	8001428 <__swbuf_r+0x3a>
 800141e:	4621      	mov	r1, r4
 8001420:	4628      	mov	r0, r5
 8001422:	f000 fd47 	bl	8001eb4 <_fflush_r>
 8001426:	b9e0      	cbnz	r0, 8001462 <__swbuf_r+0x74>
 8001428:	68a3      	ldr	r3, [r4, #8]
 800142a:	3b01      	subs	r3, #1
 800142c:	60a3      	str	r3, [r4, #8]
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	6022      	str	r2, [r4, #0]
 8001434:	701e      	strb	r6, [r3, #0]
 8001436:	6962      	ldr	r2, [r4, #20]
 8001438:	1c43      	adds	r3, r0, #1
 800143a:	429a      	cmp	r2, r3
 800143c:	d004      	beq.n	8001448 <__swbuf_r+0x5a>
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	07db      	lsls	r3, r3, #31
 8001442:	d506      	bpl.n	8001452 <__swbuf_r+0x64>
 8001444:	2e0a      	cmp	r6, #10
 8001446:	d104      	bne.n	8001452 <__swbuf_r+0x64>
 8001448:	4621      	mov	r1, r4
 800144a:	4628      	mov	r0, r5
 800144c:	f000 fd32 	bl	8001eb4 <_fflush_r>
 8001450:	b938      	cbnz	r0, 8001462 <__swbuf_r+0x74>
 8001452:	4638      	mov	r0, r7
 8001454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001456:	4621      	mov	r1, r4
 8001458:	4628      	mov	r0, r5
 800145a:	f000 f805 	bl	8001468 <__swsetup_r>
 800145e:	2800      	cmp	r0, #0
 8001460:	d0d5      	beq.n	800140e <__swbuf_r+0x20>
 8001462:	f04f 37ff 	mov.w	r7, #4294967295
 8001466:	e7f4      	b.n	8001452 <__swbuf_r+0x64>

08001468 <__swsetup_r>:
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <__swsetup_r+0xac>)
 800146c:	4605      	mov	r5, r0
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	460c      	mov	r4, r1
 8001472:	b118      	cbz	r0, 800147c <__swsetup_r+0x14>
 8001474:	6a03      	ldr	r3, [r0, #32]
 8001476:	b90b      	cbnz	r3, 800147c <__swsetup_r+0x14>
 8001478:	f7ff fed2 	bl	8001220 <__sinit>
 800147c:	89a3      	ldrh	r3, [r4, #12]
 800147e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001482:	0718      	lsls	r0, r3, #28
 8001484:	d422      	bmi.n	80014cc <__swsetup_r+0x64>
 8001486:	06d9      	lsls	r1, r3, #27
 8001488:	d407      	bmi.n	800149a <__swsetup_r+0x32>
 800148a:	2309      	movs	r3, #9
 800148c:	602b      	str	r3, [r5, #0]
 800148e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001492:	81a3      	strh	r3, [r4, #12]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	e034      	b.n	8001504 <__swsetup_r+0x9c>
 800149a:	0758      	lsls	r0, r3, #29
 800149c:	d512      	bpl.n	80014c4 <__swsetup_r+0x5c>
 800149e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014a0:	b141      	cbz	r1, 80014b4 <__swsetup_r+0x4c>
 80014a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014a6:	4299      	cmp	r1, r3
 80014a8:	d002      	beq.n	80014b0 <__swsetup_r+0x48>
 80014aa:	4628      	mov	r0, r5
 80014ac:	f000 f8b0 	bl	8001610 <_free_r>
 80014b0:	2300      	movs	r3, #0
 80014b2:	6363      	str	r3, [r4, #52]	; 0x34
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014ba:	81a3      	strh	r3, [r4, #12]
 80014bc:	2300      	movs	r3, #0
 80014be:	6063      	str	r3, [r4, #4]
 80014c0:	6923      	ldr	r3, [r4, #16]
 80014c2:	6023      	str	r3, [r4, #0]
 80014c4:	89a3      	ldrh	r3, [r4, #12]
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	81a3      	strh	r3, [r4, #12]
 80014cc:	6923      	ldr	r3, [r4, #16]
 80014ce:	b94b      	cbnz	r3, 80014e4 <__swsetup_r+0x7c>
 80014d0:	89a3      	ldrh	r3, [r4, #12]
 80014d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014da:	d003      	beq.n	80014e4 <__swsetup_r+0x7c>
 80014dc:	4621      	mov	r1, r4
 80014de:	4628      	mov	r0, r5
 80014e0:	f000 fd36 	bl	8001f50 <__smakebuf_r>
 80014e4:	89a0      	ldrh	r0, [r4, #12]
 80014e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014ea:	f010 0301 	ands.w	r3, r0, #1
 80014ee:	d00a      	beq.n	8001506 <__swsetup_r+0x9e>
 80014f0:	2300      	movs	r3, #0
 80014f2:	60a3      	str	r3, [r4, #8]
 80014f4:	6963      	ldr	r3, [r4, #20]
 80014f6:	425b      	negs	r3, r3
 80014f8:	61a3      	str	r3, [r4, #24]
 80014fa:	6923      	ldr	r3, [r4, #16]
 80014fc:	b943      	cbnz	r3, 8001510 <__swsetup_r+0xa8>
 80014fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001502:	d1c4      	bne.n	800148e <__swsetup_r+0x26>
 8001504:	bd38      	pop	{r3, r4, r5, pc}
 8001506:	0781      	lsls	r1, r0, #30
 8001508:	bf58      	it	pl
 800150a:	6963      	ldrpl	r3, [r4, #20]
 800150c:	60a3      	str	r3, [r4, #8]
 800150e:	e7f4      	b.n	80014fa <__swsetup_r+0x92>
 8001510:	2000      	movs	r0, #0
 8001512:	e7f7      	b.n	8001504 <__swsetup_r+0x9c>
 8001514:	2000007c 	.word	0x2000007c

08001518 <memset>:
 8001518:	4402      	add	r2, r0
 800151a:	4603      	mov	r3, r0
 800151c:	4293      	cmp	r3, r2
 800151e:	d100      	bne.n	8001522 <memset+0xa>
 8001520:	4770      	bx	lr
 8001522:	f803 1b01 	strb.w	r1, [r3], #1
 8001526:	e7f9      	b.n	800151c <memset+0x4>

08001528 <_close_r>:
 8001528:	b538      	push	{r3, r4, r5, lr}
 800152a:	4d06      	ldr	r5, [pc, #24]	; (8001544 <_close_r+0x1c>)
 800152c:	2300      	movs	r3, #0
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	602b      	str	r3, [r5, #0]
 8001534:	f7ff fc1e 	bl	8000d74 <_close>
 8001538:	1c43      	adds	r3, r0, #1
 800153a:	d102      	bne.n	8001542 <_close_r+0x1a>
 800153c:	682b      	ldr	r3, [r5, #0]
 800153e:	b103      	cbz	r3, 8001542 <_close_r+0x1a>
 8001540:	6023      	str	r3, [r4, #0]
 8001542:	bd38      	pop	{r3, r4, r5, pc}
 8001544:	20000294 	.word	0x20000294

08001548 <_lseek_r>:
 8001548:	b538      	push	{r3, r4, r5, lr}
 800154a:	4d07      	ldr	r5, [pc, #28]	; (8001568 <_lseek_r+0x20>)
 800154c:	4604      	mov	r4, r0
 800154e:	4608      	mov	r0, r1
 8001550:	4611      	mov	r1, r2
 8001552:	2200      	movs	r2, #0
 8001554:	602a      	str	r2, [r5, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	f7ff fbc9 	bl	8000cee <_lseek>
 800155c:	1c43      	adds	r3, r0, #1
 800155e:	d102      	bne.n	8001566 <_lseek_r+0x1e>
 8001560:	682b      	ldr	r3, [r5, #0]
 8001562:	b103      	cbz	r3, 8001566 <_lseek_r+0x1e>
 8001564:	6023      	str	r3, [r4, #0]
 8001566:	bd38      	pop	{r3, r4, r5, pc}
 8001568:	20000294 	.word	0x20000294

0800156c <_read_r>:
 800156c:	b538      	push	{r3, r4, r5, lr}
 800156e:	4d07      	ldr	r5, [pc, #28]	; (800158c <_read_r+0x20>)
 8001570:	4604      	mov	r4, r0
 8001572:	4608      	mov	r0, r1
 8001574:	4611      	mov	r1, r2
 8001576:	2200      	movs	r2, #0
 8001578:	602a      	str	r2, [r5, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	f7ff fb5f 	bl	8000c3e <_read>
 8001580:	1c43      	adds	r3, r0, #1
 8001582:	d102      	bne.n	800158a <_read_r+0x1e>
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	b103      	cbz	r3, 800158a <_read_r+0x1e>
 8001588:	6023      	str	r3, [r4, #0]
 800158a:	bd38      	pop	{r3, r4, r5, pc}
 800158c:	20000294 	.word	0x20000294

08001590 <_write_r>:
 8001590:	b538      	push	{r3, r4, r5, lr}
 8001592:	4d07      	ldr	r5, [pc, #28]	; (80015b0 <_write_r+0x20>)
 8001594:	4604      	mov	r4, r0
 8001596:	4608      	mov	r0, r1
 8001598:	4611      	mov	r1, r2
 800159a:	2200      	movs	r2, #0
 800159c:	602a      	str	r2, [r5, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	f7ff fbb7 	bl	8000d12 <_write>
 80015a4:	1c43      	adds	r3, r0, #1
 80015a6:	d102      	bne.n	80015ae <_write_r+0x1e>
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	b103      	cbz	r3, 80015ae <_write_r+0x1e>
 80015ac:	6023      	str	r3, [r4, #0]
 80015ae:	bd38      	pop	{r3, r4, r5, pc}
 80015b0:	20000294 	.word	0x20000294

080015b4 <__errno>:
 80015b4:	4b01      	ldr	r3, [pc, #4]	; (80015bc <__errno+0x8>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	2000007c 	.word	0x2000007c

080015c0 <__libc_init_array>:
 80015c0:	b570      	push	{r4, r5, r6, lr}
 80015c2:	4d0d      	ldr	r5, [pc, #52]	; (80015f8 <__libc_init_array+0x38>)
 80015c4:	4c0d      	ldr	r4, [pc, #52]	; (80015fc <__libc_init_array+0x3c>)
 80015c6:	1b64      	subs	r4, r4, r5
 80015c8:	10a4      	asrs	r4, r4, #2
 80015ca:	2600      	movs	r6, #0
 80015cc:	42a6      	cmp	r6, r4
 80015ce:	d109      	bne.n	80015e4 <__libc_init_array+0x24>
 80015d0:	4d0b      	ldr	r5, [pc, #44]	; (8001600 <__libc_init_array+0x40>)
 80015d2:	4c0c      	ldr	r4, [pc, #48]	; (8001604 <__libc_init_array+0x44>)
 80015d4:	f000 fd2a 	bl	800202c <_init>
 80015d8:	1b64      	subs	r4, r4, r5
 80015da:	10a4      	asrs	r4, r4, #2
 80015dc:	2600      	movs	r6, #0
 80015de:	42a6      	cmp	r6, r4
 80015e0:	d105      	bne.n	80015ee <__libc_init_array+0x2e>
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
 80015e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e8:	4798      	blx	r3
 80015ea:	3601      	adds	r6, #1
 80015ec:	e7ee      	b.n	80015cc <__libc_init_array+0xc>
 80015ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80015f2:	4798      	blx	r3
 80015f4:	3601      	adds	r6, #1
 80015f6:	e7f2      	b.n	80015de <__libc_init_array+0x1e>
 80015f8:	08002110 	.word	0x08002110
 80015fc:	08002110 	.word	0x08002110
 8001600:	08002110 	.word	0x08002110
 8001604:	08002114 	.word	0x08002114

08001608 <__retarget_lock_init_recursive>:
 8001608:	4770      	bx	lr

0800160a <__retarget_lock_acquire_recursive>:
 800160a:	4770      	bx	lr

0800160c <__retarget_lock_release_recursive>:
 800160c:	4770      	bx	lr
	...

08001610 <_free_r>:
 8001610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001612:	2900      	cmp	r1, #0
 8001614:	d044      	beq.n	80016a0 <_free_r+0x90>
 8001616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800161a:	9001      	str	r0, [sp, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f1a1 0404 	sub.w	r4, r1, #4
 8001622:	bfb8      	it	lt
 8001624:	18e4      	addlt	r4, r4, r3
 8001626:	f000 f8df 	bl	80017e8 <__malloc_lock>
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <_free_r+0x94>)
 800162c:	9801      	ldr	r0, [sp, #4]
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	b933      	cbnz	r3, 8001640 <_free_r+0x30>
 8001632:	6063      	str	r3, [r4, #4]
 8001634:	6014      	str	r4, [r2, #0]
 8001636:	b003      	add	sp, #12
 8001638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800163c:	f000 b8da 	b.w	80017f4 <__malloc_unlock>
 8001640:	42a3      	cmp	r3, r4
 8001642:	d908      	bls.n	8001656 <_free_r+0x46>
 8001644:	6825      	ldr	r5, [r4, #0]
 8001646:	1961      	adds	r1, r4, r5
 8001648:	428b      	cmp	r3, r1
 800164a:	bf01      	itttt	eq
 800164c:	6819      	ldreq	r1, [r3, #0]
 800164e:	685b      	ldreq	r3, [r3, #4]
 8001650:	1949      	addeq	r1, r1, r5
 8001652:	6021      	streq	r1, [r4, #0]
 8001654:	e7ed      	b.n	8001632 <_free_r+0x22>
 8001656:	461a      	mov	r2, r3
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	b10b      	cbz	r3, 8001660 <_free_r+0x50>
 800165c:	42a3      	cmp	r3, r4
 800165e:	d9fa      	bls.n	8001656 <_free_r+0x46>
 8001660:	6811      	ldr	r1, [r2, #0]
 8001662:	1855      	adds	r5, r2, r1
 8001664:	42a5      	cmp	r5, r4
 8001666:	d10b      	bne.n	8001680 <_free_r+0x70>
 8001668:	6824      	ldr	r4, [r4, #0]
 800166a:	4421      	add	r1, r4
 800166c:	1854      	adds	r4, r2, r1
 800166e:	42a3      	cmp	r3, r4
 8001670:	6011      	str	r1, [r2, #0]
 8001672:	d1e0      	bne.n	8001636 <_free_r+0x26>
 8001674:	681c      	ldr	r4, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	6053      	str	r3, [r2, #4]
 800167a:	440c      	add	r4, r1
 800167c:	6014      	str	r4, [r2, #0]
 800167e:	e7da      	b.n	8001636 <_free_r+0x26>
 8001680:	d902      	bls.n	8001688 <_free_r+0x78>
 8001682:	230c      	movs	r3, #12
 8001684:	6003      	str	r3, [r0, #0]
 8001686:	e7d6      	b.n	8001636 <_free_r+0x26>
 8001688:	6825      	ldr	r5, [r4, #0]
 800168a:	1961      	adds	r1, r4, r5
 800168c:	428b      	cmp	r3, r1
 800168e:	bf04      	itt	eq
 8001690:	6819      	ldreq	r1, [r3, #0]
 8001692:	685b      	ldreq	r3, [r3, #4]
 8001694:	6063      	str	r3, [r4, #4]
 8001696:	bf04      	itt	eq
 8001698:	1949      	addeq	r1, r1, r5
 800169a:	6021      	streq	r1, [r4, #0]
 800169c:	6054      	str	r4, [r2, #4]
 800169e:	e7ca      	b.n	8001636 <_free_r+0x26>
 80016a0:	b003      	add	sp, #12
 80016a2:	bd30      	pop	{r4, r5, pc}
 80016a4:	2000029c 	.word	0x2000029c

080016a8 <sbrk_aligned>:
 80016a8:	b570      	push	{r4, r5, r6, lr}
 80016aa:	4e0e      	ldr	r6, [pc, #56]	; (80016e4 <sbrk_aligned+0x3c>)
 80016ac:	460c      	mov	r4, r1
 80016ae:	6831      	ldr	r1, [r6, #0]
 80016b0:	4605      	mov	r5, r0
 80016b2:	b911      	cbnz	r1, 80016ba <sbrk_aligned+0x12>
 80016b4:	f000 fcaa 	bl	800200c <_sbrk_r>
 80016b8:	6030      	str	r0, [r6, #0]
 80016ba:	4621      	mov	r1, r4
 80016bc:	4628      	mov	r0, r5
 80016be:	f000 fca5 	bl	800200c <_sbrk_r>
 80016c2:	1c43      	adds	r3, r0, #1
 80016c4:	d00a      	beq.n	80016dc <sbrk_aligned+0x34>
 80016c6:	1cc4      	adds	r4, r0, #3
 80016c8:	f024 0403 	bic.w	r4, r4, #3
 80016cc:	42a0      	cmp	r0, r4
 80016ce:	d007      	beq.n	80016e0 <sbrk_aligned+0x38>
 80016d0:	1a21      	subs	r1, r4, r0
 80016d2:	4628      	mov	r0, r5
 80016d4:	f000 fc9a 	bl	800200c <_sbrk_r>
 80016d8:	3001      	adds	r0, #1
 80016da:	d101      	bne.n	80016e0 <sbrk_aligned+0x38>
 80016dc:	f04f 34ff 	mov.w	r4, #4294967295
 80016e0:	4620      	mov	r0, r4
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
 80016e4:	200002a0 	.word	0x200002a0

080016e8 <_malloc_r>:
 80016e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016ec:	1ccd      	adds	r5, r1, #3
 80016ee:	f025 0503 	bic.w	r5, r5, #3
 80016f2:	3508      	adds	r5, #8
 80016f4:	2d0c      	cmp	r5, #12
 80016f6:	bf38      	it	cc
 80016f8:	250c      	movcc	r5, #12
 80016fa:	2d00      	cmp	r5, #0
 80016fc:	4607      	mov	r7, r0
 80016fe:	db01      	blt.n	8001704 <_malloc_r+0x1c>
 8001700:	42a9      	cmp	r1, r5
 8001702:	d905      	bls.n	8001710 <_malloc_r+0x28>
 8001704:	230c      	movs	r3, #12
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	2600      	movs	r6, #0
 800170a:	4630      	mov	r0, r6
 800170c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80017e4 <_malloc_r+0xfc>
 8001714:	f000 f868 	bl	80017e8 <__malloc_lock>
 8001718:	f8d8 3000 	ldr.w	r3, [r8]
 800171c:	461c      	mov	r4, r3
 800171e:	bb5c      	cbnz	r4, 8001778 <_malloc_r+0x90>
 8001720:	4629      	mov	r1, r5
 8001722:	4638      	mov	r0, r7
 8001724:	f7ff ffc0 	bl	80016a8 <sbrk_aligned>
 8001728:	1c43      	adds	r3, r0, #1
 800172a:	4604      	mov	r4, r0
 800172c:	d155      	bne.n	80017da <_malloc_r+0xf2>
 800172e:	f8d8 4000 	ldr.w	r4, [r8]
 8001732:	4626      	mov	r6, r4
 8001734:	2e00      	cmp	r6, #0
 8001736:	d145      	bne.n	80017c4 <_malloc_r+0xdc>
 8001738:	2c00      	cmp	r4, #0
 800173a:	d048      	beq.n	80017ce <_malloc_r+0xe6>
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	4631      	mov	r1, r6
 8001740:	4638      	mov	r0, r7
 8001742:	eb04 0903 	add.w	r9, r4, r3
 8001746:	f000 fc61 	bl	800200c <_sbrk_r>
 800174a:	4581      	cmp	r9, r0
 800174c:	d13f      	bne.n	80017ce <_malloc_r+0xe6>
 800174e:	6821      	ldr	r1, [r4, #0]
 8001750:	1a6d      	subs	r5, r5, r1
 8001752:	4629      	mov	r1, r5
 8001754:	4638      	mov	r0, r7
 8001756:	f7ff ffa7 	bl	80016a8 <sbrk_aligned>
 800175a:	3001      	adds	r0, #1
 800175c:	d037      	beq.n	80017ce <_malloc_r+0xe6>
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	442b      	add	r3, r5
 8001762:	6023      	str	r3, [r4, #0]
 8001764:	f8d8 3000 	ldr.w	r3, [r8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d038      	beq.n	80017de <_malloc_r+0xf6>
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	42a2      	cmp	r2, r4
 8001770:	d12b      	bne.n	80017ca <_malloc_r+0xe2>
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	e00f      	b.n	8001798 <_malloc_r+0xb0>
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	1b52      	subs	r2, r2, r5
 800177c:	d41f      	bmi.n	80017be <_malloc_r+0xd6>
 800177e:	2a0b      	cmp	r2, #11
 8001780:	d917      	bls.n	80017b2 <_malloc_r+0xca>
 8001782:	1961      	adds	r1, r4, r5
 8001784:	42a3      	cmp	r3, r4
 8001786:	6025      	str	r5, [r4, #0]
 8001788:	bf18      	it	ne
 800178a:	6059      	strne	r1, [r3, #4]
 800178c:	6863      	ldr	r3, [r4, #4]
 800178e:	bf08      	it	eq
 8001790:	f8c8 1000 	streq.w	r1, [r8]
 8001794:	5162      	str	r2, [r4, r5]
 8001796:	604b      	str	r3, [r1, #4]
 8001798:	4638      	mov	r0, r7
 800179a:	f104 060b 	add.w	r6, r4, #11
 800179e:	f000 f829 	bl	80017f4 <__malloc_unlock>
 80017a2:	f026 0607 	bic.w	r6, r6, #7
 80017a6:	1d23      	adds	r3, r4, #4
 80017a8:	1af2      	subs	r2, r6, r3
 80017aa:	d0ae      	beq.n	800170a <_malloc_r+0x22>
 80017ac:	1b9b      	subs	r3, r3, r6
 80017ae:	50a3      	str	r3, [r4, r2]
 80017b0:	e7ab      	b.n	800170a <_malloc_r+0x22>
 80017b2:	42a3      	cmp	r3, r4
 80017b4:	6862      	ldr	r2, [r4, #4]
 80017b6:	d1dd      	bne.n	8001774 <_malloc_r+0x8c>
 80017b8:	f8c8 2000 	str.w	r2, [r8]
 80017bc:	e7ec      	b.n	8001798 <_malloc_r+0xb0>
 80017be:	4623      	mov	r3, r4
 80017c0:	6864      	ldr	r4, [r4, #4]
 80017c2:	e7ac      	b.n	800171e <_malloc_r+0x36>
 80017c4:	4634      	mov	r4, r6
 80017c6:	6876      	ldr	r6, [r6, #4]
 80017c8:	e7b4      	b.n	8001734 <_malloc_r+0x4c>
 80017ca:	4613      	mov	r3, r2
 80017cc:	e7cc      	b.n	8001768 <_malloc_r+0x80>
 80017ce:	230c      	movs	r3, #12
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4638      	mov	r0, r7
 80017d4:	f000 f80e 	bl	80017f4 <__malloc_unlock>
 80017d8:	e797      	b.n	800170a <_malloc_r+0x22>
 80017da:	6025      	str	r5, [r4, #0]
 80017dc:	e7dc      	b.n	8001798 <_malloc_r+0xb0>
 80017de:	605b      	str	r3, [r3, #4]
 80017e0:	deff      	udf	#255	; 0xff
 80017e2:	bf00      	nop
 80017e4:	2000029c 	.word	0x2000029c

080017e8 <__malloc_lock>:
 80017e8:	4801      	ldr	r0, [pc, #4]	; (80017f0 <__malloc_lock+0x8>)
 80017ea:	f7ff bf0e 	b.w	800160a <__retarget_lock_acquire_recursive>
 80017ee:	bf00      	nop
 80017f0:	20000298 	.word	0x20000298

080017f4 <__malloc_unlock>:
 80017f4:	4801      	ldr	r0, [pc, #4]	; (80017fc <__malloc_unlock+0x8>)
 80017f6:	f7ff bf09 	b.w	800160c <__retarget_lock_release_recursive>
 80017fa:	bf00      	nop
 80017fc:	20000298 	.word	0x20000298

08001800 <__sfputc_r>:
 8001800:	6893      	ldr	r3, [r2, #8]
 8001802:	3b01      	subs	r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	b410      	push	{r4}
 8001808:	6093      	str	r3, [r2, #8]
 800180a:	da08      	bge.n	800181e <__sfputc_r+0x1e>
 800180c:	6994      	ldr	r4, [r2, #24]
 800180e:	42a3      	cmp	r3, r4
 8001810:	db01      	blt.n	8001816 <__sfputc_r+0x16>
 8001812:	290a      	cmp	r1, #10
 8001814:	d103      	bne.n	800181e <__sfputc_r+0x1e>
 8001816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800181a:	f7ff bde8 	b.w	80013ee <__swbuf_r>
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	1c58      	adds	r0, r3, #1
 8001822:	6010      	str	r0, [r2, #0]
 8001824:	7019      	strb	r1, [r3, #0]
 8001826:	4608      	mov	r0, r1
 8001828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800182c:	4770      	bx	lr

0800182e <__sfputs_r>:
 800182e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001830:	4606      	mov	r6, r0
 8001832:	460f      	mov	r7, r1
 8001834:	4614      	mov	r4, r2
 8001836:	18d5      	adds	r5, r2, r3
 8001838:	42ac      	cmp	r4, r5
 800183a:	d101      	bne.n	8001840 <__sfputs_r+0x12>
 800183c:	2000      	movs	r0, #0
 800183e:	e007      	b.n	8001850 <__sfputs_r+0x22>
 8001840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001844:	463a      	mov	r2, r7
 8001846:	4630      	mov	r0, r6
 8001848:	f7ff ffda 	bl	8001800 <__sfputc_r>
 800184c:	1c43      	adds	r3, r0, #1
 800184e:	d1f3      	bne.n	8001838 <__sfputs_r+0xa>
 8001850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001854 <_vfiprintf_r>:
 8001854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001858:	460d      	mov	r5, r1
 800185a:	b09d      	sub	sp, #116	; 0x74
 800185c:	4614      	mov	r4, r2
 800185e:	4698      	mov	r8, r3
 8001860:	4606      	mov	r6, r0
 8001862:	b118      	cbz	r0, 800186c <_vfiprintf_r+0x18>
 8001864:	6a03      	ldr	r3, [r0, #32]
 8001866:	b90b      	cbnz	r3, 800186c <_vfiprintf_r+0x18>
 8001868:	f7ff fcda 	bl	8001220 <__sinit>
 800186c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800186e:	07d9      	lsls	r1, r3, #31
 8001870:	d405      	bmi.n	800187e <_vfiprintf_r+0x2a>
 8001872:	89ab      	ldrh	r3, [r5, #12]
 8001874:	059a      	lsls	r2, r3, #22
 8001876:	d402      	bmi.n	800187e <_vfiprintf_r+0x2a>
 8001878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800187a:	f7ff fec6 	bl	800160a <__retarget_lock_acquire_recursive>
 800187e:	89ab      	ldrh	r3, [r5, #12]
 8001880:	071b      	lsls	r3, r3, #28
 8001882:	d501      	bpl.n	8001888 <_vfiprintf_r+0x34>
 8001884:	692b      	ldr	r3, [r5, #16]
 8001886:	b99b      	cbnz	r3, 80018b0 <_vfiprintf_r+0x5c>
 8001888:	4629      	mov	r1, r5
 800188a:	4630      	mov	r0, r6
 800188c:	f7ff fdec 	bl	8001468 <__swsetup_r>
 8001890:	b170      	cbz	r0, 80018b0 <_vfiprintf_r+0x5c>
 8001892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001894:	07dc      	lsls	r4, r3, #31
 8001896:	d504      	bpl.n	80018a2 <_vfiprintf_r+0x4e>
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	b01d      	add	sp, #116	; 0x74
 800189e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018a2:	89ab      	ldrh	r3, [r5, #12]
 80018a4:	0598      	lsls	r0, r3, #22
 80018a6:	d4f7      	bmi.n	8001898 <_vfiprintf_r+0x44>
 80018a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018aa:	f7ff feaf 	bl	800160c <__retarget_lock_release_recursive>
 80018ae:	e7f3      	b.n	8001898 <_vfiprintf_r+0x44>
 80018b0:	2300      	movs	r3, #0
 80018b2:	9309      	str	r3, [sp, #36]	; 0x24
 80018b4:	2320      	movs	r3, #32
 80018b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80018be:	2330      	movs	r3, #48	; 0x30
 80018c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001a74 <_vfiprintf_r+0x220>
 80018c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018c8:	f04f 0901 	mov.w	r9, #1
 80018cc:	4623      	mov	r3, r4
 80018ce:	469a      	mov	sl, r3
 80018d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018d4:	b10a      	cbz	r2, 80018da <_vfiprintf_r+0x86>
 80018d6:	2a25      	cmp	r2, #37	; 0x25
 80018d8:	d1f9      	bne.n	80018ce <_vfiprintf_r+0x7a>
 80018da:	ebba 0b04 	subs.w	fp, sl, r4
 80018de:	d00b      	beq.n	80018f8 <_vfiprintf_r+0xa4>
 80018e0:	465b      	mov	r3, fp
 80018e2:	4622      	mov	r2, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	4630      	mov	r0, r6
 80018e8:	f7ff ffa1 	bl	800182e <__sfputs_r>
 80018ec:	3001      	adds	r0, #1
 80018ee:	f000 80a9 	beq.w	8001a44 <_vfiprintf_r+0x1f0>
 80018f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018f4:	445a      	add	r2, fp
 80018f6:	9209      	str	r2, [sp, #36]	; 0x24
 80018f8:	f89a 3000 	ldrb.w	r3, [sl]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80a1 	beq.w	8001a44 <_vfiprintf_r+0x1f0>
 8001902:	2300      	movs	r3, #0
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800190c:	f10a 0a01 	add.w	sl, sl, #1
 8001910:	9304      	str	r3, [sp, #16]
 8001912:	9307      	str	r3, [sp, #28]
 8001914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001918:	931a      	str	r3, [sp, #104]	; 0x68
 800191a:	4654      	mov	r4, sl
 800191c:	2205      	movs	r2, #5
 800191e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001922:	4854      	ldr	r0, [pc, #336]	; (8001a74 <_vfiprintf_r+0x220>)
 8001924:	f7fe fc7c 	bl	8000220 <memchr>
 8001928:	9a04      	ldr	r2, [sp, #16]
 800192a:	b9d8      	cbnz	r0, 8001964 <_vfiprintf_r+0x110>
 800192c:	06d1      	lsls	r1, r2, #27
 800192e:	bf44      	itt	mi
 8001930:	2320      	movmi	r3, #32
 8001932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001936:	0713      	lsls	r3, r2, #28
 8001938:	bf44      	itt	mi
 800193a:	232b      	movmi	r3, #43	; 0x2b
 800193c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001940:	f89a 3000 	ldrb.w	r3, [sl]
 8001944:	2b2a      	cmp	r3, #42	; 0x2a
 8001946:	d015      	beq.n	8001974 <_vfiprintf_r+0x120>
 8001948:	9a07      	ldr	r2, [sp, #28]
 800194a:	4654      	mov	r4, sl
 800194c:	2000      	movs	r0, #0
 800194e:	f04f 0c0a 	mov.w	ip, #10
 8001952:	4621      	mov	r1, r4
 8001954:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001958:	3b30      	subs	r3, #48	; 0x30
 800195a:	2b09      	cmp	r3, #9
 800195c:	d94d      	bls.n	80019fa <_vfiprintf_r+0x1a6>
 800195e:	b1b0      	cbz	r0, 800198e <_vfiprintf_r+0x13a>
 8001960:	9207      	str	r2, [sp, #28]
 8001962:	e014      	b.n	800198e <_vfiprintf_r+0x13a>
 8001964:	eba0 0308 	sub.w	r3, r0, r8
 8001968:	fa09 f303 	lsl.w	r3, r9, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	9304      	str	r3, [sp, #16]
 8001970:	46a2      	mov	sl, r4
 8001972:	e7d2      	b.n	800191a <_vfiprintf_r+0xc6>
 8001974:	9b03      	ldr	r3, [sp, #12]
 8001976:	1d19      	adds	r1, r3, #4
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	9103      	str	r1, [sp, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	bfbb      	ittet	lt
 8001980:	425b      	neglt	r3, r3
 8001982:	f042 0202 	orrlt.w	r2, r2, #2
 8001986:	9307      	strge	r3, [sp, #28]
 8001988:	9307      	strlt	r3, [sp, #28]
 800198a:	bfb8      	it	lt
 800198c:	9204      	strlt	r2, [sp, #16]
 800198e:	7823      	ldrb	r3, [r4, #0]
 8001990:	2b2e      	cmp	r3, #46	; 0x2e
 8001992:	d10c      	bne.n	80019ae <_vfiprintf_r+0x15a>
 8001994:	7863      	ldrb	r3, [r4, #1]
 8001996:	2b2a      	cmp	r3, #42	; 0x2a
 8001998:	d134      	bne.n	8001a04 <_vfiprintf_r+0x1b0>
 800199a:	9b03      	ldr	r3, [sp, #12]
 800199c:	1d1a      	adds	r2, r3, #4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	9203      	str	r2, [sp, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bfb8      	it	lt
 80019a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80019aa:	3402      	adds	r4, #2
 80019ac:	9305      	str	r3, [sp, #20]
 80019ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001a84 <_vfiprintf_r+0x230>
 80019b2:	7821      	ldrb	r1, [r4, #0]
 80019b4:	2203      	movs	r2, #3
 80019b6:	4650      	mov	r0, sl
 80019b8:	f7fe fc32 	bl	8000220 <memchr>
 80019bc:	b138      	cbz	r0, 80019ce <_vfiprintf_r+0x17a>
 80019be:	9b04      	ldr	r3, [sp, #16]
 80019c0:	eba0 000a 	sub.w	r0, r0, sl
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	4082      	lsls	r2, r0
 80019c8:	4313      	orrs	r3, r2
 80019ca:	3401      	adds	r4, #1
 80019cc:	9304      	str	r3, [sp, #16]
 80019ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019d2:	4829      	ldr	r0, [pc, #164]	; (8001a78 <_vfiprintf_r+0x224>)
 80019d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019d8:	2206      	movs	r2, #6
 80019da:	f7fe fc21 	bl	8000220 <memchr>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d03f      	beq.n	8001a62 <_vfiprintf_r+0x20e>
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <_vfiprintf_r+0x228>)
 80019e4:	bb1b      	cbnz	r3, 8001a2e <_vfiprintf_r+0x1da>
 80019e6:	9b03      	ldr	r3, [sp, #12]
 80019e8:	3307      	adds	r3, #7
 80019ea:	f023 0307 	bic.w	r3, r3, #7
 80019ee:	3308      	adds	r3, #8
 80019f0:	9303      	str	r3, [sp, #12]
 80019f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019f4:	443b      	add	r3, r7
 80019f6:	9309      	str	r3, [sp, #36]	; 0x24
 80019f8:	e768      	b.n	80018cc <_vfiprintf_r+0x78>
 80019fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80019fe:	460c      	mov	r4, r1
 8001a00:	2001      	movs	r0, #1
 8001a02:	e7a6      	b.n	8001952 <_vfiprintf_r+0xfe>
 8001a04:	2300      	movs	r3, #0
 8001a06:	3401      	adds	r4, #1
 8001a08:	9305      	str	r3, [sp, #20]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 0c0a 	mov.w	ip, #10
 8001a10:	4620      	mov	r0, r4
 8001a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a16:	3a30      	subs	r2, #48	; 0x30
 8001a18:	2a09      	cmp	r2, #9
 8001a1a:	d903      	bls.n	8001a24 <_vfiprintf_r+0x1d0>
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0c6      	beq.n	80019ae <_vfiprintf_r+0x15a>
 8001a20:	9105      	str	r1, [sp, #20]
 8001a22:	e7c4      	b.n	80019ae <_vfiprintf_r+0x15a>
 8001a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a28:	4604      	mov	r4, r0
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e7f0      	b.n	8001a10 <_vfiprintf_r+0x1bc>
 8001a2e:	ab03      	add	r3, sp, #12
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	462a      	mov	r2, r5
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <_vfiprintf_r+0x22c>)
 8001a36:	a904      	add	r1, sp, #16
 8001a38:	4630      	mov	r0, r6
 8001a3a:	f3af 8000 	nop.w
 8001a3e:	4607      	mov	r7, r0
 8001a40:	1c78      	adds	r0, r7, #1
 8001a42:	d1d6      	bne.n	80019f2 <_vfiprintf_r+0x19e>
 8001a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a46:	07d9      	lsls	r1, r3, #31
 8001a48:	d405      	bmi.n	8001a56 <_vfiprintf_r+0x202>
 8001a4a:	89ab      	ldrh	r3, [r5, #12]
 8001a4c:	059a      	lsls	r2, r3, #22
 8001a4e:	d402      	bmi.n	8001a56 <_vfiprintf_r+0x202>
 8001a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a52:	f7ff fddb 	bl	800160c <__retarget_lock_release_recursive>
 8001a56:	89ab      	ldrh	r3, [r5, #12]
 8001a58:	065b      	lsls	r3, r3, #25
 8001a5a:	f53f af1d 	bmi.w	8001898 <_vfiprintf_r+0x44>
 8001a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a60:	e71c      	b.n	800189c <_vfiprintf_r+0x48>
 8001a62:	ab03      	add	r3, sp, #12
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	462a      	mov	r2, r5
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <_vfiprintf_r+0x22c>)
 8001a6a:	a904      	add	r1, sp, #16
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f000 f879 	bl	8001b64 <_printf_i>
 8001a72:	e7e4      	b.n	8001a3e <_vfiprintf_r+0x1ea>
 8001a74:	080020dd 	.word	0x080020dd
 8001a78:	080020e7 	.word	0x080020e7
 8001a7c:	00000000 	.word	0x00000000
 8001a80:	0800182f 	.word	0x0800182f
 8001a84:	080020e3 	.word	0x080020e3

08001a88 <_printf_common>:
 8001a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a8c:	4616      	mov	r6, r2
 8001a8e:	4699      	mov	r9, r3
 8001a90:	688a      	ldr	r2, [r1, #8]
 8001a92:	690b      	ldr	r3, [r1, #16]
 8001a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	bfb8      	it	lt
 8001a9c:	4613      	movlt	r3, r2
 8001a9e:	6033      	str	r3, [r6, #0]
 8001aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001aa4:	4607      	mov	r7, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	b10a      	cbz	r2, 8001aae <_printf_common+0x26>
 8001aaa:	3301      	adds	r3, #1
 8001aac:	6033      	str	r3, [r6, #0]
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	0699      	lsls	r1, r3, #26
 8001ab2:	bf42      	ittt	mi
 8001ab4:	6833      	ldrmi	r3, [r6, #0]
 8001ab6:	3302      	addmi	r3, #2
 8001ab8:	6033      	strmi	r3, [r6, #0]
 8001aba:	6825      	ldr	r5, [r4, #0]
 8001abc:	f015 0506 	ands.w	r5, r5, #6
 8001ac0:	d106      	bne.n	8001ad0 <_printf_common+0x48>
 8001ac2:	f104 0a19 	add.w	sl, r4, #25
 8001ac6:	68e3      	ldr	r3, [r4, #12]
 8001ac8:	6832      	ldr	r2, [r6, #0]
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	42ab      	cmp	r3, r5
 8001ace:	dc26      	bgt.n	8001b1e <_printf_common+0x96>
 8001ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ad4:	1e13      	subs	r3, r2, #0
 8001ad6:	6822      	ldr	r2, [r4, #0]
 8001ad8:	bf18      	it	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	0692      	lsls	r2, r2, #26
 8001ade:	d42b      	bmi.n	8001b38 <_printf_common+0xb0>
 8001ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ae4:	4649      	mov	r1, r9
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	47c0      	blx	r8
 8001aea:	3001      	adds	r0, #1
 8001aec:	d01e      	beq.n	8001b2c <_printf_common+0xa4>
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	6922      	ldr	r2, [r4, #16]
 8001af2:	f003 0306 	and.w	r3, r3, #6
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf02      	ittt	eq
 8001afa:	68e5      	ldreq	r5, [r4, #12]
 8001afc:	6833      	ldreq	r3, [r6, #0]
 8001afe:	1aed      	subeq	r5, r5, r3
 8001b00:	68a3      	ldr	r3, [r4, #8]
 8001b02:	bf0c      	ite	eq
 8001b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b08:	2500      	movne	r5, #0
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	bfc4      	itt	gt
 8001b0e:	1a9b      	subgt	r3, r3, r2
 8001b10:	18ed      	addgt	r5, r5, r3
 8001b12:	2600      	movs	r6, #0
 8001b14:	341a      	adds	r4, #26
 8001b16:	42b5      	cmp	r5, r6
 8001b18:	d11a      	bne.n	8001b50 <_printf_common+0xc8>
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e008      	b.n	8001b30 <_printf_common+0xa8>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4652      	mov	r2, sl
 8001b22:	4649      	mov	r1, r9
 8001b24:	4638      	mov	r0, r7
 8001b26:	47c0      	blx	r8
 8001b28:	3001      	adds	r0, #1
 8001b2a:	d103      	bne.n	8001b34 <_printf_common+0xac>
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b34:	3501      	adds	r5, #1
 8001b36:	e7c6      	b.n	8001ac6 <_printf_common+0x3e>
 8001b38:	18e1      	adds	r1, r4, r3
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	2030      	movs	r0, #48	; 0x30
 8001b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b42:	4422      	add	r2, r4
 8001b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	e7c7      	b.n	8001ae0 <_printf_common+0x58>
 8001b50:	2301      	movs	r3, #1
 8001b52:	4622      	mov	r2, r4
 8001b54:	4649      	mov	r1, r9
 8001b56:	4638      	mov	r0, r7
 8001b58:	47c0      	blx	r8
 8001b5a:	3001      	adds	r0, #1
 8001b5c:	d0e6      	beq.n	8001b2c <_printf_common+0xa4>
 8001b5e:	3601      	adds	r6, #1
 8001b60:	e7d9      	b.n	8001b16 <_printf_common+0x8e>
	...

08001b64 <_printf_i>:
 8001b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b68:	7e0f      	ldrb	r7, [r1, #24]
 8001b6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b6c:	2f78      	cmp	r7, #120	; 0x78
 8001b6e:	4691      	mov	r9, r2
 8001b70:	4680      	mov	r8, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	469a      	mov	sl, r3
 8001b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b7a:	d807      	bhi.n	8001b8c <_printf_i+0x28>
 8001b7c:	2f62      	cmp	r7, #98	; 0x62
 8001b7e:	d80a      	bhi.n	8001b96 <_printf_i+0x32>
 8001b80:	2f00      	cmp	r7, #0
 8001b82:	f000 80d4 	beq.w	8001d2e <_printf_i+0x1ca>
 8001b86:	2f58      	cmp	r7, #88	; 0x58
 8001b88:	f000 80c0 	beq.w	8001d0c <_printf_i+0x1a8>
 8001b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b94:	e03a      	b.n	8001c0c <_printf_i+0xa8>
 8001b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b9a:	2b15      	cmp	r3, #21
 8001b9c:	d8f6      	bhi.n	8001b8c <_printf_i+0x28>
 8001b9e:	a101      	add	r1, pc, #4	; (adr r1, 8001ba4 <_printf_i+0x40>)
 8001ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ba4:	08001bfd 	.word	0x08001bfd
 8001ba8:	08001c11 	.word	0x08001c11
 8001bac:	08001b8d 	.word	0x08001b8d
 8001bb0:	08001b8d 	.word	0x08001b8d
 8001bb4:	08001b8d 	.word	0x08001b8d
 8001bb8:	08001b8d 	.word	0x08001b8d
 8001bbc:	08001c11 	.word	0x08001c11
 8001bc0:	08001b8d 	.word	0x08001b8d
 8001bc4:	08001b8d 	.word	0x08001b8d
 8001bc8:	08001b8d 	.word	0x08001b8d
 8001bcc:	08001b8d 	.word	0x08001b8d
 8001bd0:	08001d15 	.word	0x08001d15
 8001bd4:	08001c3d 	.word	0x08001c3d
 8001bd8:	08001ccf 	.word	0x08001ccf
 8001bdc:	08001b8d 	.word	0x08001b8d
 8001be0:	08001b8d 	.word	0x08001b8d
 8001be4:	08001d37 	.word	0x08001d37
 8001be8:	08001b8d 	.word	0x08001b8d
 8001bec:	08001c3d 	.word	0x08001c3d
 8001bf0:	08001b8d 	.word	0x08001b8d
 8001bf4:	08001b8d 	.word	0x08001b8d
 8001bf8:	08001cd7 	.word	0x08001cd7
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	1d1a      	adds	r2, r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	602a      	str	r2, [r5, #0]
 8001c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e09f      	b.n	8001d50 <_printf_i+0x1ec>
 8001c10:	6820      	ldr	r0, [r4, #0]
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	0607      	lsls	r7, r0, #24
 8001c16:	f103 0104 	add.w	r1, r3, #4
 8001c1a:	6029      	str	r1, [r5, #0]
 8001c1c:	d501      	bpl.n	8001c22 <_printf_i+0xbe>
 8001c1e:	681e      	ldr	r6, [r3, #0]
 8001c20:	e003      	b.n	8001c2a <_printf_i+0xc6>
 8001c22:	0646      	lsls	r6, r0, #25
 8001c24:	d5fb      	bpl.n	8001c1e <_printf_i+0xba>
 8001c26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001c2a:	2e00      	cmp	r6, #0
 8001c2c:	da03      	bge.n	8001c36 <_printf_i+0xd2>
 8001c2e:	232d      	movs	r3, #45	; 0x2d
 8001c30:	4276      	negs	r6, r6
 8001c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c36:	485a      	ldr	r0, [pc, #360]	; (8001da0 <_printf_i+0x23c>)
 8001c38:	230a      	movs	r3, #10
 8001c3a:	e012      	b.n	8001c62 <_printf_i+0xfe>
 8001c3c:	682b      	ldr	r3, [r5, #0]
 8001c3e:	6820      	ldr	r0, [r4, #0]
 8001c40:	1d19      	adds	r1, r3, #4
 8001c42:	6029      	str	r1, [r5, #0]
 8001c44:	0605      	lsls	r5, r0, #24
 8001c46:	d501      	bpl.n	8001c4c <_printf_i+0xe8>
 8001c48:	681e      	ldr	r6, [r3, #0]
 8001c4a:	e002      	b.n	8001c52 <_printf_i+0xee>
 8001c4c:	0641      	lsls	r1, r0, #25
 8001c4e:	d5fb      	bpl.n	8001c48 <_printf_i+0xe4>
 8001c50:	881e      	ldrh	r6, [r3, #0]
 8001c52:	4853      	ldr	r0, [pc, #332]	; (8001da0 <_printf_i+0x23c>)
 8001c54:	2f6f      	cmp	r7, #111	; 0x6f
 8001c56:	bf0c      	ite	eq
 8001c58:	2308      	moveq	r3, #8
 8001c5a:	230a      	movne	r3, #10
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c62:	6865      	ldr	r5, [r4, #4]
 8001c64:	60a5      	str	r5, [r4, #8]
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	bfa2      	ittt	ge
 8001c6a:	6821      	ldrge	r1, [r4, #0]
 8001c6c:	f021 0104 	bicge.w	r1, r1, #4
 8001c70:	6021      	strge	r1, [r4, #0]
 8001c72:	b90e      	cbnz	r6, 8001c78 <_printf_i+0x114>
 8001c74:	2d00      	cmp	r5, #0
 8001c76:	d04b      	beq.n	8001d10 <_printf_i+0x1ac>
 8001c78:	4615      	mov	r5, r2
 8001c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8001c82:	5dc7      	ldrb	r7, [r0, r7]
 8001c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c88:	4637      	mov	r7, r6
 8001c8a:	42bb      	cmp	r3, r7
 8001c8c:	460e      	mov	r6, r1
 8001c8e:	d9f4      	bls.n	8001c7a <_printf_i+0x116>
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d10b      	bne.n	8001cac <_printf_i+0x148>
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	07de      	lsls	r6, r3, #31
 8001c98:	d508      	bpl.n	8001cac <_printf_i+0x148>
 8001c9a:	6923      	ldr	r3, [r4, #16]
 8001c9c:	6861      	ldr	r1, [r4, #4]
 8001c9e:	4299      	cmp	r1, r3
 8001ca0:	bfde      	ittt	le
 8001ca2:	2330      	movle	r3, #48	; 0x30
 8001ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001cac:	1b52      	subs	r2, r2, r5
 8001cae:	6122      	str	r2, [r4, #16]
 8001cb0:	f8cd a000 	str.w	sl, [sp]
 8001cb4:	464b      	mov	r3, r9
 8001cb6:	aa03      	add	r2, sp, #12
 8001cb8:	4621      	mov	r1, r4
 8001cba:	4640      	mov	r0, r8
 8001cbc:	f7ff fee4 	bl	8001a88 <_printf_common>
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	d14a      	bne.n	8001d5a <_printf_i+0x1f6>
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	b004      	add	sp, #16
 8001cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	f043 0320 	orr.w	r3, r3, #32
 8001cd4:	6023      	str	r3, [r4, #0]
 8001cd6:	4833      	ldr	r0, [pc, #204]	; (8001da4 <_printf_i+0x240>)
 8001cd8:	2778      	movs	r7, #120	; 0x78
 8001cda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	6829      	ldr	r1, [r5, #0]
 8001ce2:	061f      	lsls	r7, r3, #24
 8001ce4:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ce8:	d402      	bmi.n	8001cf0 <_printf_i+0x18c>
 8001cea:	065f      	lsls	r7, r3, #25
 8001cec:	bf48      	it	mi
 8001cee:	b2b6      	uxthmi	r6, r6
 8001cf0:	07df      	lsls	r7, r3, #31
 8001cf2:	bf48      	it	mi
 8001cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8001cf8:	6029      	str	r1, [r5, #0]
 8001cfa:	bf48      	it	mi
 8001cfc:	6023      	strmi	r3, [r4, #0]
 8001cfe:	b91e      	cbnz	r6, 8001d08 <_printf_i+0x1a4>
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	f023 0320 	bic.w	r3, r3, #32
 8001d06:	6023      	str	r3, [r4, #0]
 8001d08:	2310      	movs	r3, #16
 8001d0a:	e7a7      	b.n	8001c5c <_printf_i+0xf8>
 8001d0c:	4824      	ldr	r0, [pc, #144]	; (8001da0 <_printf_i+0x23c>)
 8001d0e:	e7e4      	b.n	8001cda <_printf_i+0x176>
 8001d10:	4615      	mov	r5, r2
 8001d12:	e7bd      	b.n	8001c90 <_printf_i+0x12c>
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	6826      	ldr	r6, [r4, #0]
 8001d18:	6961      	ldr	r1, [r4, #20]
 8001d1a:	1d18      	adds	r0, r3, #4
 8001d1c:	6028      	str	r0, [r5, #0]
 8001d1e:	0635      	lsls	r5, r6, #24
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	d501      	bpl.n	8001d28 <_printf_i+0x1c4>
 8001d24:	6019      	str	r1, [r3, #0]
 8001d26:	e002      	b.n	8001d2e <_printf_i+0x1ca>
 8001d28:	0670      	lsls	r0, r6, #25
 8001d2a:	d5fb      	bpl.n	8001d24 <_printf_i+0x1c0>
 8001d2c:	8019      	strh	r1, [r3, #0]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	6123      	str	r3, [r4, #16]
 8001d32:	4615      	mov	r5, r2
 8001d34:	e7bc      	b.n	8001cb0 <_printf_i+0x14c>
 8001d36:	682b      	ldr	r3, [r5, #0]
 8001d38:	1d1a      	adds	r2, r3, #4
 8001d3a:	602a      	str	r2, [r5, #0]
 8001d3c:	681d      	ldr	r5, [r3, #0]
 8001d3e:	6862      	ldr	r2, [r4, #4]
 8001d40:	2100      	movs	r1, #0
 8001d42:	4628      	mov	r0, r5
 8001d44:	f7fe fa6c 	bl	8000220 <memchr>
 8001d48:	b108      	cbz	r0, 8001d4e <_printf_i+0x1ea>
 8001d4a:	1b40      	subs	r0, r0, r5
 8001d4c:	6060      	str	r0, [r4, #4]
 8001d4e:	6863      	ldr	r3, [r4, #4]
 8001d50:	6123      	str	r3, [r4, #16]
 8001d52:	2300      	movs	r3, #0
 8001d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d58:	e7aa      	b.n	8001cb0 <_printf_i+0x14c>
 8001d5a:	6923      	ldr	r3, [r4, #16]
 8001d5c:	462a      	mov	r2, r5
 8001d5e:	4649      	mov	r1, r9
 8001d60:	4640      	mov	r0, r8
 8001d62:	47d0      	blx	sl
 8001d64:	3001      	adds	r0, #1
 8001d66:	d0ad      	beq.n	8001cc4 <_printf_i+0x160>
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	079b      	lsls	r3, r3, #30
 8001d6c:	d413      	bmi.n	8001d96 <_printf_i+0x232>
 8001d6e:	68e0      	ldr	r0, [r4, #12]
 8001d70:	9b03      	ldr	r3, [sp, #12]
 8001d72:	4298      	cmp	r0, r3
 8001d74:	bfb8      	it	lt
 8001d76:	4618      	movlt	r0, r3
 8001d78:	e7a6      	b.n	8001cc8 <_printf_i+0x164>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	4632      	mov	r2, r6
 8001d7e:	4649      	mov	r1, r9
 8001d80:	4640      	mov	r0, r8
 8001d82:	47d0      	blx	sl
 8001d84:	3001      	adds	r0, #1
 8001d86:	d09d      	beq.n	8001cc4 <_printf_i+0x160>
 8001d88:	3501      	adds	r5, #1
 8001d8a:	68e3      	ldr	r3, [r4, #12]
 8001d8c:	9903      	ldr	r1, [sp, #12]
 8001d8e:	1a5b      	subs	r3, r3, r1
 8001d90:	42ab      	cmp	r3, r5
 8001d92:	dcf2      	bgt.n	8001d7a <_printf_i+0x216>
 8001d94:	e7eb      	b.n	8001d6e <_printf_i+0x20a>
 8001d96:	2500      	movs	r5, #0
 8001d98:	f104 0619 	add.w	r6, r4, #25
 8001d9c:	e7f5      	b.n	8001d8a <_printf_i+0x226>
 8001d9e:	bf00      	nop
 8001da0:	080020ee 	.word	0x080020ee
 8001da4:	080020ff 	.word	0x080020ff

08001da8 <__sflush_r>:
 8001da8:	898a      	ldrh	r2, [r1, #12]
 8001daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dae:	4605      	mov	r5, r0
 8001db0:	0710      	lsls	r0, r2, #28
 8001db2:	460c      	mov	r4, r1
 8001db4:	d458      	bmi.n	8001e68 <__sflush_r+0xc0>
 8001db6:	684b      	ldr	r3, [r1, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	dc05      	bgt.n	8001dc8 <__sflush_r+0x20>
 8001dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	dc02      	bgt.n	8001dc8 <__sflush_r+0x20>
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d0f9      	beq.n	8001dc2 <__sflush_r+0x1a>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001dd4:	682f      	ldr	r7, [r5, #0]
 8001dd6:	6a21      	ldr	r1, [r4, #32]
 8001dd8:	602b      	str	r3, [r5, #0]
 8001dda:	d032      	beq.n	8001e42 <__sflush_r+0x9a>
 8001ddc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001dde:	89a3      	ldrh	r3, [r4, #12]
 8001de0:	075a      	lsls	r2, r3, #29
 8001de2:	d505      	bpl.n	8001df0 <__sflush_r+0x48>
 8001de4:	6863      	ldr	r3, [r4, #4]
 8001de6:	1ac0      	subs	r0, r0, r3
 8001de8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dea:	b10b      	cbz	r3, 8001df0 <__sflush_r+0x48>
 8001dec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dee:	1ac0      	subs	r0, r0, r3
 8001df0:	2300      	movs	r3, #0
 8001df2:	4602      	mov	r2, r0
 8001df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001df6:	6a21      	ldr	r1, [r4, #32]
 8001df8:	4628      	mov	r0, r5
 8001dfa:	47b0      	blx	r6
 8001dfc:	1c43      	adds	r3, r0, #1
 8001dfe:	89a3      	ldrh	r3, [r4, #12]
 8001e00:	d106      	bne.n	8001e10 <__sflush_r+0x68>
 8001e02:	6829      	ldr	r1, [r5, #0]
 8001e04:	291d      	cmp	r1, #29
 8001e06:	d82b      	bhi.n	8001e60 <__sflush_r+0xb8>
 8001e08:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <__sflush_r+0x108>)
 8001e0a:	410a      	asrs	r2, r1
 8001e0c:	07d6      	lsls	r6, r2, #31
 8001e0e:	d427      	bmi.n	8001e60 <__sflush_r+0xb8>
 8001e10:	2200      	movs	r2, #0
 8001e12:	6062      	str	r2, [r4, #4]
 8001e14:	04d9      	lsls	r1, r3, #19
 8001e16:	6922      	ldr	r2, [r4, #16]
 8001e18:	6022      	str	r2, [r4, #0]
 8001e1a:	d504      	bpl.n	8001e26 <__sflush_r+0x7e>
 8001e1c:	1c42      	adds	r2, r0, #1
 8001e1e:	d101      	bne.n	8001e24 <__sflush_r+0x7c>
 8001e20:	682b      	ldr	r3, [r5, #0]
 8001e22:	b903      	cbnz	r3, 8001e26 <__sflush_r+0x7e>
 8001e24:	6560      	str	r0, [r4, #84]	; 0x54
 8001e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e28:	602f      	str	r7, [r5, #0]
 8001e2a:	2900      	cmp	r1, #0
 8001e2c:	d0c9      	beq.n	8001dc2 <__sflush_r+0x1a>
 8001e2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e32:	4299      	cmp	r1, r3
 8001e34:	d002      	beq.n	8001e3c <__sflush_r+0x94>
 8001e36:	4628      	mov	r0, r5
 8001e38:	f7ff fbea 	bl	8001610 <_free_r>
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	6360      	str	r0, [r4, #52]	; 0x34
 8001e40:	e7c0      	b.n	8001dc4 <__sflush_r+0x1c>
 8001e42:	2301      	movs	r3, #1
 8001e44:	4628      	mov	r0, r5
 8001e46:	47b0      	blx	r6
 8001e48:	1c41      	adds	r1, r0, #1
 8001e4a:	d1c8      	bne.n	8001dde <__sflush_r+0x36>
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0c5      	beq.n	8001dde <__sflush_r+0x36>
 8001e52:	2b1d      	cmp	r3, #29
 8001e54:	d001      	beq.n	8001e5a <__sflush_r+0xb2>
 8001e56:	2b16      	cmp	r3, #22
 8001e58:	d101      	bne.n	8001e5e <__sflush_r+0xb6>
 8001e5a:	602f      	str	r7, [r5, #0]
 8001e5c:	e7b1      	b.n	8001dc2 <__sflush_r+0x1a>
 8001e5e:	89a3      	ldrh	r3, [r4, #12]
 8001e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e64:	81a3      	strh	r3, [r4, #12]
 8001e66:	e7ad      	b.n	8001dc4 <__sflush_r+0x1c>
 8001e68:	690f      	ldr	r7, [r1, #16]
 8001e6a:	2f00      	cmp	r7, #0
 8001e6c:	d0a9      	beq.n	8001dc2 <__sflush_r+0x1a>
 8001e6e:	0793      	lsls	r3, r2, #30
 8001e70:	680e      	ldr	r6, [r1, #0]
 8001e72:	bf08      	it	eq
 8001e74:	694b      	ldreq	r3, [r1, #20]
 8001e76:	600f      	str	r7, [r1, #0]
 8001e78:	bf18      	it	ne
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	eba6 0807 	sub.w	r8, r6, r7
 8001e80:	608b      	str	r3, [r1, #8]
 8001e82:	f1b8 0f00 	cmp.w	r8, #0
 8001e86:	dd9c      	ble.n	8001dc2 <__sflush_r+0x1a>
 8001e88:	6a21      	ldr	r1, [r4, #32]
 8001e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e8c:	4643      	mov	r3, r8
 8001e8e:	463a      	mov	r2, r7
 8001e90:	4628      	mov	r0, r5
 8001e92:	47b0      	blx	r6
 8001e94:	2800      	cmp	r0, #0
 8001e96:	dc06      	bgt.n	8001ea6 <__sflush_r+0xfe>
 8001e98:	89a3      	ldrh	r3, [r4, #12]
 8001e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9e:	81a3      	strh	r3, [r4, #12]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	e78e      	b.n	8001dc4 <__sflush_r+0x1c>
 8001ea6:	4407      	add	r7, r0
 8001ea8:	eba8 0800 	sub.w	r8, r8, r0
 8001eac:	e7e9      	b.n	8001e82 <__sflush_r+0xda>
 8001eae:	bf00      	nop
 8001eb0:	dfbffffe 	.word	0xdfbffffe

08001eb4 <_fflush_r>:
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	690b      	ldr	r3, [r1, #16]
 8001eb8:	4605      	mov	r5, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	b913      	cbnz	r3, 8001ec4 <_fflush_r+0x10>
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
 8001ec4:	b118      	cbz	r0, 8001ece <_fflush_r+0x1a>
 8001ec6:	6a03      	ldr	r3, [r0, #32]
 8001ec8:	b90b      	cbnz	r3, 8001ece <_fflush_r+0x1a>
 8001eca:	f7ff f9a9 	bl	8001220 <__sinit>
 8001ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f3      	beq.n	8001ebe <_fflush_r+0xa>
 8001ed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ed8:	07d0      	lsls	r0, r2, #31
 8001eda:	d404      	bmi.n	8001ee6 <_fflush_r+0x32>
 8001edc:	0599      	lsls	r1, r3, #22
 8001ede:	d402      	bmi.n	8001ee6 <_fflush_r+0x32>
 8001ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ee2:	f7ff fb92 	bl	800160a <__retarget_lock_acquire_recursive>
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	4621      	mov	r1, r4
 8001eea:	f7ff ff5d 	bl	8001da8 <__sflush_r>
 8001eee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ef0:	07da      	lsls	r2, r3, #31
 8001ef2:	4605      	mov	r5, r0
 8001ef4:	d4e4      	bmi.n	8001ec0 <_fflush_r+0xc>
 8001ef6:	89a3      	ldrh	r3, [r4, #12]
 8001ef8:	059b      	lsls	r3, r3, #22
 8001efa:	d4e1      	bmi.n	8001ec0 <_fflush_r+0xc>
 8001efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001efe:	f7ff fb85 	bl	800160c <__retarget_lock_release_recursive>
 8001f02:	e7dd      	b.n	8001ec0 <_fflush_r+0xc>

08001f04 <__swhatbuf_r>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	460c      	mov	r4, r1
 8001f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f0c:	2900      	cmp	r1, #0
 8001f0e:	b096      	sub	sp, #88	; 0x58
 8001f10:	4615      	mov	r5, r2
 8001f12:	461e      	mov	r6, r3
 8001f14:	da0d      	bge.n	8001f32 <__swhatbuf_r+0x2e>
 8001f16:	89a3      	ldrh	r3, [r4, #12]
 8001f18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	bf0c      	ite	eq
 8001f22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001f26:	2340      	movne	r3, #64	; 0x40
 8001f28:	2000      	movs	r0, #0
 8001f2a:	6031      	str	r1, [r6, #0]
 8001f2c:	602b      	str	r3, [r5, #0]
 8001f2e:	b016      	add	sp, #88	; 0x58
 8001f30:	bd70      	pop	{r4, r5, r6, pc}
 8001f32:	466a      	mov	r2, sp
 8001f34:	f000 f848 	bl	8001fc8 <_fstat_r>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	dbec      	blt.n	8001f16 <__swhatbuf_r+0x12>
 8001f3c:	9901      	ldr	r1, [sp, #4]
 8001f3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001f42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001f46:	4259      	negs	r1, r3
 8001f48:	4159      	adcs	r1, r3
 8001f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4e:	e7eb      	b.n	8001f28 <__swhatbuf_r+0x24>

08001f50 <__smakebuf_r>:
 8001f50:	898b      	ldrh	r3, [r1, #12]
 8001f52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f54:	079d      	lsls	r5, r3, #30
 8001f56:	4606      	mov	r6, r0
 8001f58:	460c      	mov	r4, r1
 8001f5a:	d507      	bpl.n	8001f6c <__smakebuf_r+0x1c>
 8001f5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f60:	6023      	str	r3, [r4, #0]
 8001f62:	6123      	str	r3, [r4, #16]
 8001f64:	2301      	movs	r3, #1
 8001f66:	6163      	str	r3, [r4, #20]
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
 8001f6c:	ab01      	add	r3, sp, #4
 8001f6e:	466a      	mov	r2, sp
 8001f70:	f7ff ffc8 	bl	8001f04 <__swhatbuf_r>
 8001f74:	9900      	ldr	r1, [sp, #0]
 8001f76:	4605      	mov	r5, r0
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f7ff fbb5 	bl	80016e8 <_malloc_r>
 8001f7e:	b948      	cbnz	r0, 8001f94 <__smakebuf_r+0x44>
 8001f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f84:	059a      	lsls	r2, r3, #22
 8001f86:	d4ef      	bmi.n	8001f68 <__smakebuf_r+0x18>
 8001f88:	f023 0303 	bic.w	r3, r3, #3
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	81a3      	strh	r3, [r4, #12]
 8001f92:	e7e3      	b.n	8001f5c <__smakebuf_r+0xc>
 8001f94:	89a3      	ldrh	r3, [r4, #12]
 8001f96:	6020      	str	r0, [r4, #0]
 8001f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9c:	81a3      	strh	r3, [r4, #12]
 8001f9e:	9b00      	ldr	r3, [sp, #0]
 8001fa0:	6163      	str	r3, [r4, #20]
 8001fa2:	9b01      	ldr	r3, [sp, #4]
 8001fa4:	6120      	str	r0, [r4, #16]
 8001fa6:	b15b      	cbz	r3, 8001fc0 <__smakebuf_r+0x70>
 8001fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fac:	4630      	mov	r0, r6
 8001fae:	f000 f81d 	bl	8001fec <_isatty_r>
 8001fb2:	b128      	cbz	r0, 8001fc0 <__smakebuf_r+0x70>
 8001fb4:	89a3      	ldrh	r3, [r4, #12]
 8001fb6:	f023 0303 	bic.w	r3, r3, #3
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	81a3      	strh	r3, [r4, #12]
 8001fc0:	89a3      	ldrh	r3, [r4, #12]
 8001fc2:	431d      	orrs	r5, r3
 8001fc4:	81a5      	strh	r5, [r4, #12]
 8001fc6:	e7cf      	b.n	8001f68 <__smakebuf_r+0x18>

08001fc8 <_fstat_r>:
 8001fc8:	b538      	push	{r3, r4, r5, lr}
 8001fca:	4d07      	ldr	r5, [pc, #28]	; (8001fe8 <_fstat_r+0x20>)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	4604      	mov	r4, r0
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	602b      	str	r3, [r5, #0]
 8001fd6:	f7fe ff14 	bl	8000e02 <_fstat>
 8001fda:	1c43      	adds	r3, r0, #1
 8001fdc:	d102      	bne.n	8001fe4 <_fstat_r+0x1c>
 8001fde:	682b      	ldr	r3, [r5, #0]
 8001fe0:	b103      	cbz	r3, 8001fe4 <_fstat_r+0x1c>
 8001fe2:	6023      	str	r3, [r4, #0]
 8001fe4:	bd38      	pop	{r3, r4, r5, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000294 	.word	0x20000294

08001fec <_isatty_r>:
 8001fec:	b538      	push	{r3, r4, r5, lr}
 8001fee:	4d06      	ldr	r5, [pc, #24]	; (8002008 <_isatty_r+0x1c>)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	602b      	str	r3, [r5, #0]
 8001ff8:	f7ff f86a 	bl	80010d0 <_isatty>
 8001ffc:	1c43      	adds	r3, r0, #1
 8001ffe:	d102      	bne.n	8002006 <_isatty_r+0x1a>
 8002000:	682b      	ldr	r3, [r5, #0]
 8002002:	b103      	cbz	r3, 8002006 <_isatty_r+0x1a>
 8002004:	6023      	str	r3, [r4, #0]
 8002006:	bd38      	pop	{r3, r4, r5, pc}
 8002008:	20000294 	.word	0x20000294

0800200c <_sbrk_r>:
 800200c:	b538      	push	{r3, r4, r5, lr}
 800200e:	4d06      	ldr	r5, [pc, #24]	; (8002028 <_sbrk_r+0x1c>)
 8002010:	2300      	movs	r3, #0
 8002012:	4604      	mov	r4, r0
 8002014:	4608      	mov	r0, r1
 8002016:	602b      	str	r3, [r5, #0]
 8002018:	f7fe fd74 	bl	8000b04 <_sbrk>
 800201c:	1c43      	adds	r3, r0, #1
 800201e:	d102      	bne.n	8002026 <_sbrk_r+0x1a>
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	b103      	cbz	r3, 8002026 <_sbrk_r+0x1a>
 8002024:	6023      	str	r3, [r4, #0]
 8002026:	bd38      	pop	{r3, r4, r5, pc}
 8002028:	20000294 	.word	0x20000294

0800202c <_init>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	bf00      	nop
 8002030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002032:	bc08      	pop	{r3}
 8002034:	469e      	mov	lr, r3
 8002036:	4770      	bx	lr

08002038 <_fini>:
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	bf00      	nop
 800203c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203e:	bc08      	pop	{r3}
 8002040:	469e      	mov	lr, r3
 8002042:	4770      	bx	lr
