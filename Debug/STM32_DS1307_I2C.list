
STM32_DS1307_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009bc  080009bc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009bc  080009bc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080009bc  080009bc  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009bc  080009bc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009bc  080009bc  000109bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009c0  080009c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080009c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000001c  080009e0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  080009e0  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001244  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c8  00000000  00000000  000212d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  000217a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fc  00000000  00000000  00021908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b92c  00000000  00000000  00021a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000133b  00000000  00000000  0003d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b4a4  00000000  00000000  0003e66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000474  00000000  00000000  000d9b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d9f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080009a4 	.word	0x080009a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000020 	.word	0x20000020
 8000204:	080009a4 	.word	0x080009a4

08000208 <I2C1_STOP>:
static inline void I2C1_START(void) { I2C1->CR2 |= I2C_CR2_START; }

/*
 * Generuje STOP po zakoÅ„czeniu obecnego transferu
 */
static inline void I2C1_STOP(void) { I2C1->CR2 |= I2C_CR2_STOP; }
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <I2C1_STOP+0x1c>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <I2C1_STOP+0x1c>)
 8000212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000216:	6053      	str	r3, [r2, #4]
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40005400 	.word	0x40005400

08000228 <DS1307_I2C_ENABLE_OSCILLATOR>:
#include "stm32f746xx.h"
#include "DS1307_I2C.h"



void DS1307_I2C_ENABLE_OSCILLATOR(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 800022c:	20d0      	movs	r0, #208	; 0xd0
 800022e:	f000 fa03 	bl	8000638 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(SECONDS_REG);
 8000232:	2000      	movs	r0, #0
 8000234:	f000 fa2c 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(SECONDS_REG_CLEAR);
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fa29 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_STOP();
 800023e:	f7ff ffe3 	bl	8000208 <I2C1_STOP>
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}

08000246 <DS1307_SET_24H_MODE>:

void DS1307_SET_24H_MODE(void){
 8000246:	b580      	push	{r7, lr}
 8000248:	af00      	add	r7, sp, #0
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 800024a:	20d0      	movs	r0, #208	; 0xd0
 800024c:	f000 f9f4 	bl	8000638 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(HOURS_REG);
 8000250:	2002      	movs	r0, #2
 8000252:	f000 fa1d 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(HOURS_REG_CLEAR);
 8000256:	2000      	movs	r0, #0
 8000258:	f000 fa1a 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_STOP();
 800025c:	f7ff ffd4 	bl	8000208 <I2C1_STOP>
}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}

08000264 <DS1307_INIT_CONF>:

void DS1307_INIT_CONF(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	DS1307_I2C_ENABLE_OSCILLATOR();
 8000268:	f7ff ffde 	bl	8000228 <DS1307_I2C_ENABLE_OSCILLATOR>
	DS1307_SET_24H_MODE();
 800026c:	f7ff ffeb 	bl	8000246 <DS1307_SET_24H_MODE>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}

08000274 <DS1307_SET_TIME>:

void DS1307_SET_TIME(uint8_t SEC, uint8_t MIN, uint8_t HOUR){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	460b      	mov	r3, r1
 8000280:	71bb      	strb	r3, [r7, #6]
 8000282:	4613      	mov	r3, r2
 8000284:	717b      	strb	r3, [r7, #5]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 8000286:	20d0      	movs	r0, #208	; 0xd0
 8000288:	f000 f9d6 	bl	8000638 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(SECONDS_REG);
 800028c:	2000      	movs	r0, #0
 800028e:	f000 f9ff 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(SEC & 0x7F);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000298:	b2db      	uxtb	r3, r3
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f9f8 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(MIN & 0x7F);
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f9f1 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(HOUR & 0x3F);
 80002ae:	797b      	ldrb	r3, [r7, #5]
 80002b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f9ea 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_STOP();
 80002bc:	f7ff ffa4 	bl	8000208 <I2C1_STOP>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <DS1307_SET_DATE>:

void DS1307_SET_DATE(uint8_t DAY, uint8_t DATE, uint8_t MONTH, uint8_t YEAR){
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4604      	mov	r4, r0
 80002d0:	4608      	mov	r0, r1
 80002d2:	4611      	mov	r1, r2
 80002d4:	461a      	mov	r2, r3
 80002d6:	4623      	mov	r3, r4
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	4603      	mov	r3, r0
 80002dc:	71bb      	strb	r3, [r7, #6]
 80002de:	460b      	mov	r3, r1
 80002e0:	717b      	strb	r3, [r7, #5]
 80002e2:	4613      	mov	r3, r2
 80002e4:	713b      	strb	r3, [r7, #4]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 80002e6:	20d0      	movs	r0, #208	; 0xd0
 80002e8:	f000 f9a6 	bl	8000638 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(DAYS_REG);
 80002ec:	2003      	movs	r0, #3
 80002ee:	f000 f9cf 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(DAY & 0x07);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	f003 0307 	and.w	r3, r3, #7
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f9c8 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(DATE & 0x3F);
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f9c1 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(MONTH & 0x1F);
 800030e:	797b      	ldrb	r3, [r7, #5]
 8000310:	f003 031f 	and.w	r3, r3, #31
 8000314:	b2db      	uxtb	r3, r3
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f9ba 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(YEAR);
 800031c:	793b      	ldrb	r3, [r7, #4]
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f9b6 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_STOP();
 8000324:	f7ff ff70 	bl	8000208 <I2C1_STOP>
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bd90      	pop	{r4, r7, pc}

08000330 <DS1307_GET_TIME>:

void DS1307_GET_TIME(uint8_t *ptr_SEC, uint8_t *ptr_MIN, uint8_t *ptr_HOUR){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 800033c:	20d0      	movs	r0, #208	; 0xd0
 800033e:	f000 f97b 	bl	8000638 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(SECONDS_REG);
 8000342:	2000      	movs	r0, #0
 8000344:	f000 f9a4 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000348:	20d1      	movs	r0, #209	; 0xd1
 800034a:	f000 f98a 	bl	8000662 <I2C1_SELECT_AND_START_RD>
	*ptr_SEC = (I2C1_READ_BYTE() & 0x7F);
 800034e:	f000 f9b1 	bl	80006b4 <I2C1_READ_BYTE>
 8000352:	4603      	mov	r3, r0
 8000354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000358:	b2da      	uxtb	r2, r3
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 800035e:	20d1      	movs	r0, #209	; 0xd1
 8000360:	f000 f97f 	bl	8000662 <I2C1_SELECT_AND_START_RD>
	*ptr_MIN = (I2C1_READ_BYTE() & 0x7F);
 8000364:	f000 f9a6 	bl	80006b4 <I2C1_READ_BYTE>
 8000368:	4603      	mov	r3, r0
 800036a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800036e:	b2da      	uxtb	r2, r3
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000374:	20d1      	movs	r0, #209	; 0xd1
 8000376:	f000 f974 	bl	8000662 <I2C1_SELECT_AND_START_RD>
	*ptr_HOUR = (I2C1_READ_BYTE() & 0x3F);
 800037a:	f000 f99b 	bl	80006b4 <I2C1_READ_BYTE>
 800037e:	4603      	mov	r3, r0
 8000380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000384:	b2da      	uxtb	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	701a      	strb	r2, [r3, #0]
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <DS1307_GET_DATE>:

void DS1307_GET_DATE(uint8_t *ptr_DAY, uint8_t *ptr_DATE, uint8_t *ptr_MONTH, uint8_t *ptr_YEAR){
 8000392:	b580      	push	{r7, lr}
 8000394:	b084      	sub	sp, #16
 8000396:	af00      	add	r7, sp, #0
 8000398:	60f8      	str	r0, [r7, #12]
 800039a:	60b9      	str	r1, [r7, #8]
 800039c:	607a      	str	r2, [r7, #4]
 800039e:	603b      	str	r3, [r7, #0]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 80003a0:	20d0      	movs	r0, #208	; 0xd0
 80003a2:	f000 f949 	bl	8000638 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(DAYS_REG);
 80003a6:	2003      	movs	r0, #3
 80003a8:	f000 f972 	bl	8000690 <I2C1_SEND_BYTE>
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 80003ac:	20d1      	movs	r0, #209	; 0xd1
 80003ae:	f000 f958 	bl	8000662 <I2C1_SELECT_AND_START_RD>
	*ptr_DAY = (I2C1_READ_BYTE() & 0x07);
 80003b2:	f000 f97f 	bl	80006b4 <I2C1_READ_BYTE>
 80003b6:	4603      	mov	r3, r0
 80003b8:	f003 0307 	and.w	r3, r3, #7
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 80003c2:	20d1      	movs	r0, #209	; 0xd1
 80003c4:	f000 f94d 	bl	8000662 <I2C1_SELECT_AND_START_RD>
	*ptr_DATE = (I2C1_READ_BYTE() & 0x3F);
 80003c8:	f000 f974 	bl	80006b4 <I2C1_READ_BYTE>
 80003cc:	4603      	mov	r3, r0
 80003ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 80003d8:	20d1      	movs	r0, #209	; 0xd1
 80003da:	f000 f942 	bl	8000662 <I2C1_SELECT_AND_START_RD>
	*ptr_MONTH = (I2C1_READ_BYTE() & 0x1F);
 80003de:	f000 f969 	bl	80006b4 <I2C1_READ_BYTE>
 80003e2:	4603      	mov	r3, r0
 80003e4:	f003 031f 	and.w	r3, r3, #31
 80003e8:	b2da      	uxtb	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 80003ee:	20d1      	movs	r0, #209	; 0xd1
 80003f0:	f000 f937 	bl	8000662 <I2C1_SELECT_AND_START_RD>
	*ptr_YEAR = I2C1_READ_BYTE();
 80003f4:	f000 f95e 	bl	80006b4 <I2C1_READ_BYTE>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	701a      	strb	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <I2C1_START>:
static inline void I2C1_START(void) { I2C1->CR2 |= I2C_CR2_START; }
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <I2C1_START+0x1c>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <I2C1_START+0x1c>)
 8000412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000416:	6053      	str	r3, [r2, #4]
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40005400 	.word	0x40005400

08000428 <I2C1_SET_ADDR>:

/*
 * Ustawia adres urzÄ…dznia docelowego
 */
static inline void I2C1_SET_ADDR(uint8_t Address) { I2C1->CR2 |= Address; }
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <I2C1_SET_ADDR+0x24>)
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4904      	ldr	r1, [pc, #16]	; (800044c <I2C1_SET_ADDR+0x24>)
 800043a:	4313      	orrs	r3, r2
 800043c:	604b      	str	r3, [r1, #4]
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40005400 	.word	0x40005400

08000450 <I2C1_SET_WRITE>:

/*
 * Ustawia I2C na wysyÅ‚anie danych
 */
static inline void I2C1_SET_WRITE(void) { I2C1->CR2 &= ~(I2C_CR2_RD_WRN); }
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <I2C1_SET_WRITE+0x1c>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <I2C1_SET_WRITE+0x1c>)
 800045a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800045e:	6053      	str	r3, [r2, #4]
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40005400 	.word	0x40005400

08000470 <I2C1_SET_READ>:

/*
 * Ustawia I2C na odbieranie danych
 */
static inline void I2C1_SET_READ(void) { I2C1->CR2 |= I2C_CR2_RD_WRN; }
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <I2C1_SET_READ+0x1c>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <I2C1_SET_READ+0x1c>)
 800047a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800047e:	6053      	str	r3, [r2, #4]
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40005400 	.word	0x40005400

08000490 <I2C1_SET_1_BYTE_TRANSFER>:

/*
 * Ustawia I2C na wysÅ‚anie/odbieranie 1 bajtu
 */
static inline void I2C1_SET_1_BYTE_TRANSFER(void) { I2C1->CR2 |= (1 << 16); }
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <I2C1_SET_1_BYTE_TRANSFER+0x1c>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <I2C1_SET_1_BYTE_TRANSFER+0x1c>)
 800049a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800049e:	6053      	str	r3, [r2, #4]
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40005400 	.word	0x40005400

080004b0 <I2C1_WAIT_FOR_START>:

/*
 * Ustawia I2C na wysÅ‚anie/odbieranie 1 bajtu
 */
static inline void I2C1_WAIT_FOR_START(void) {
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	while(I2C1->CR2 & I2C_CR2_START){  }
 80004b4:	bf00      	nop
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <I2C1_WAIT_FOR_START+0x20>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d1f9      	bne.n	80004b6 <I2C1_WAIT_FOR_START+0x6>
}
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40005400 	.word	0x40005400

080004d4 <I2C1_WAIT_FOR_TXDR_EMPTY>:

/*
 * Czeka na oprÃ³Å¼nienie rejestru TXDR
 */
static inline void I2C1_WAIT_FOR_TXDR_EMPTY(void) {
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	while(!(I2C1->ISR & I2C_ISR_TXE)){  }
 80004d8:	bf00      	nop
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <I2C1_WAIT_FOR_TXDR_EMPTY+0x20>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f9      	beq.n	80004da <I2C1_WAIT_FOR_TXDR_EMPTY+0x6>
}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40005400 	.word	0x40005400

080004f8 <I2C1_WAIT_FOR_REC_COMPLETE>:

/*
 * Czeka na zakoÅ„czenie odbioru danych
 */
static inline void I2C1_WAIT_FOR_REC_COMPLETE(void) {
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	while(!(I2C1->ISR & I2C_ISR_RXNE)){  }
 80004fc:	bf00      	nop
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <I2C1_WAIT_FOR_REC_COMPLETE+0x20>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <I2C1_WAIT_FOR_REC_COMPLETE+0x6>
}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40005400 	.word	0x40005400

0800051c <I2C1_SEND_NACK>:

/*
 * WysyÅ‚a NACK po odebraniu bajtu
 */
static inline void I2C1_SEND_NACK(void) { I2C1->CR2 |= I2C_CR2_NACK; }
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <I2C1_SEND_NACK+0x1c>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <I2C1_SEND_NACK+0x1c>)
 8000526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800052a:	6053      	str	r3, [r2, #4]
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40005400 	.word	0x40005400

0800053c <I2C1_WAIT_FOR_TR_COMPLETE>:

/*
 * Czeka na zakoÅ„czenie transferu danych
 */
static inline void I2C1_WAIT_FOR_TR_COMPLETE(void) {
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	while(!(I2C1->ISR & I2C_ISR_TC)){  }
 8000540:	bf00      	nop
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <I2C1_WAIT_FOR_TR_COMPLETE+0x20>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f9      	beq.n	8000542 <I2C1_WAIT_FOR_TR_COMPLETE+0x6>
}
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40005400 	.word	0x40005400

08000560 <I2C1_GPIO_CONF>:

#include <stdint.h>
#include "stm32f746xx.h"
#include "i2c1.h"

void I2C1_GPIO_CONF(void){
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	//GPIOB CLOCK ENABLE
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <I2C1_GPIO_CONF+0x4c>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	4a10      	ldr	r2, [pc, #64]	; (80005ac <I2C1_GPIO_CONF+0x4c>)
 800056a:	f043 0302 	orr.w	r3, r3, #2
 800056e:	6313      	str	r3, [r2, #48]	; 0x30
	//ALTERNATE FUNCTION MODE
	GPIOB->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <I2C1_GPIO_CONF+0x50>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <I2C1_GPIO_CONF+0x50>)
 8000576:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800057a:	6013      	str	r3, [r2, #0]
	//OUTPUT SPEED HIGH
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1 | GPIO_OSPEEDER_OSPEEDR9_1;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <I2C1_GPIO_CONF+0x50>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <I2C1_GPIO_CONF+0x50>)
 8000582:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000586:	6093      	str	r3, [r2, #8]
	//PULL UP
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR9_0;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <I2C1_GPIO_CONF+0x50>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <I2C1_GPIO_CONF+0x50>)
 800058e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000592:	60d3      	str	r3, [r2, #12]
	//ALTERNATE FUNCTION SELECT (AF4)
	GPIOB->AFR[1] |= (0x45 << 0) | (0x4 << 4);
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <I2C1_GPIO_CONF+0x50>)
 8000596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <I2C1_GPIO_CONF+0x50>)
 800059a:	f043 0345 	orr.w	r3, r3, #69	; 0x45
 800059e:	6253      	str	r3, [r2, #36]	; 0x24
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020400 	.word	0x40020400

080005b4 <I2C1_CONF>:

void I2C1_CONF(void){
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	//I2C1 CLOCK ENABLE
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <I2C1_CONF+0x7c>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <I2C1_CONF+0x7c>)
 80005be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40

	//PERIPHERAL DISABLE (RESET)
	I2C1->CR1 &= ~(I2C_CR1_PE);
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <I2C1_CONF+0x80>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <I2C1_CONF+0x80>)
 80005ca:	f023 0301 	bic.w	r3, r3, #1
 80005ce:	6013      	str	r3, [r2, #0]

	//APB1 PERIPHERAL CLOCK -> 16 MHZ
	//TIMING REGISTER
	//TIMING PRESCALLER
	I2C1->TIMINGR |= (3 << 28);
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <I2C1_CONF+0x80>)
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <I2C1_CONF+0x80>)
 80005d6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80005da:	6113      	str	r3, [r2, #16]
	//DATA SETUP TIME (SCLDEL)
	I2C1->TIMINGR |= (0x4 << 20);
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <I2C1_CONF+0x80>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <I2C1_CONF+0x80>)
 80005e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e6:	6113      	str	r3, [r2, #16]
	//DATA HOLD TIME (SDADEL)
	I2C1->TIMINGR |= (0x2 << 16);
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <I2C1_CONF+0x80>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <I2C1_CONF+0x80>)
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	6113      	str	r3, [r2, #16]
	//SCL HIGH PERIOD
	I2C1->TIMINGR |= (0xF << 8);
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <I2C1_CONF+0x80>)
 80005f6:	691b      	ldr	r3, [r3, #16]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <I2C1_CONF+0x80>)
 80005fa:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80005fe:	6113      	str	r3, [r2, #16]
	//SCL LOW PERIOD
	I2C1->TIMINGR |= (0x13 << 0);
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <I2C1_CONF+0x80>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <I2C1_CONF+0x80>)
 8000606:	f043 0313 	orr.w	r3, r3, #19
 800060a:	6113      	str	r3, [r2, #16]

	//NOSTRECH BIT CLEARED (STM IN MASTER MODE)
	I2C1->CR1 &= ~(I2C_CR1_NOSTRETCH);
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <I2C1_CONF+0x80>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <I2C1_CONF+0x80>)
 8000612:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000616:	6013      	str	r3, [r2, #0]

	//PERIPHERAL ENABLE
	I2C1->CR1 |= I2C_CR1_PE;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <I2C1_CONF+0x80>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <I2C1_CONF+0x80>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40005400 	.word	0x40005400

08000638 <I2C1_SELECT_AND_START_WR>:

void I2C1_SELECT_AND_START_WR(uint8_t Address){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	I2C1_SET_ADDR(Address);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff feef 	bl	8000428 <I2C1_SET_ADDR>
	I2C1_SET_WRITE();
 800064a:	f7ff ff01 	bl	8000450 <I2C1_SET_WRITE>
	I2C1_SET_1_BYTE_TRANSFER();
 800064e:	f7ff ff1f 	bl	8000490 <I2C1_SET_1_BYTE_TRANSFER>
	I2C1_START();
 8000652:	f7ff fed9 	bl	8000408 <I2C1_START>

	I2C1_WAIT_FOR_START();
 8000656:	f7ff ff2b 	bl	80004b0 <I2C1_WAIT_FOR_START>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <I2C1_SELECT_AND_START_RD>:

void I2C1_SELECT_AND_START_RD(uint8_t Address){
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
	I2C1_SET_ADDR(Address);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff feda 	bl	8000428 <I2C1_SET_ADDR>
	I2C1_SET_READ();
 8000674:	f7ff fefc 	bl	8000470 <I2C1_SET_READ>
	I2C1_SET_1_BYTE_TRANSFER();
 8000678:	f7ff ff0a 	bl	8000490 <I2C1_SET_1_BYTE_TRANSFER>
	I2C1_SEND_NACK();
 800067c:	f7ff ff4e 	bl	800051c <I2C1_SEND_NACK>
	I2C1_START();
 8000680:	f7ff fec2 	bl	8000408 <I2C1_START>

	I2C1_WAIT_FOR_START();
 8000684:	f7ff ff14 	bl	80004b0 <I2C1_WAIT_FOR_START>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <I2C1_SEND_BYTE>:

void I2C1_SEND_BYTE(uint8_t Byte){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	I2C1_WAIT_FOR_TXDR_EMPTY();
 800069a:	f7ff ff1b 	bl	80004d4 <I2C1_WAIT_FOR_TXDR_EMPTY>
	I2C1->TXDR = Byte;
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <I2C1_SEND_BYTE+0x20>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	6293      	str	r3, [r2, #40]	; 0x28
	I2C1_WAIT_FOR_TR_COMPLETE();
 80006a4:	f7ff ff4a 	bl	800053c <I2C1_WAIT_FOR_TR_COMPLETE>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40005400 	.word	0x40005400

080006b4 <I2C1_READ_BYTE>:

uint8_t I2C1_READ_BYTE(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	I2C1_WAIT_FOR_REC_COMPLETE();
 80006b8:	f7ff ff1e 	bl	80004f8 <I2C1_WAIT_FOR_REC_COMPLETE>
	return I2C1->RXDR;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <I2C1_READ_BYTE+0x14>)
 80006be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c0:	b2db      	uxtb	r3, r3
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40005400 	.word	0x40005400

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ffc2 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <bin2bcd>:
#include "i2c1.h"
#include "DS1307_I2C.h"

uint8_t bcd2bin(uint8_t n) { return ((((n >> 4) & 0x0F) * 10) + (n & 0x0F)); }

uint8_t bin2bcd(uint8_t n) { return (((n / 10) << 4) | (n % 10)); }
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <bin2bcd+0x44>)
 8000772:	fba2 2303 	umull	r2, r3, r2, r3
 8000776:	08db      	lsrs	r3, r3, #3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	011b      	lsls	r3, r3, #4
 800077c:	b258      	sxtb	r0, r3
 800077e:	79fa      	ldrb	r2, [r7, #7]
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <bin2bcd+0x44>)
 8000782:	fba3 1302 	umull	r1, r3, r3, r2
 8000786:	08d9      	lsrs	r1, r3, #3
 8000788:	460b      	mov	r3, r1
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	b25b      	sxtb	r3, r3
 8000796:	4303      	orrs	r3, r0
 8000798:	b25b      	sxtb	r3, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	cccccccd 	.word	0xcccccccd

080007ac <SysTick_Handler>:
uint8_t *ptr_MONTH = &MONTH;
uint8_t *ptr_YEAR = &YEAR;



void SysTick_Handler(void){
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	//INCREASE SYSTEM TIMER
	Tick++;
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <SysTick_Handler+0x18>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <SysTick_Handler+0x18>)
 80007b8:	6013      	str	r3, [r2, #0]
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	20000038 	.word	0x20000038

080007c8 <DELAY>:

void DELAY(uint32_t Delay_ms){
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
    uint32_t StartTime = Tick;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <DELAY+0x2c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
    while(Tick < (StartTime + Delay_ms))
 80007d6:	bf00      	nop
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	441a      	add	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <DELAY+0x2c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d8f8      	bhi.n	80007d8 <DELAY+0x10>
    {
        // Just wait
    }
}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	20000038 	.word	0x20000038

080007f8 <main>:
/*
 * Funkcja gÅ‚Ã³wna programu
 */

int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

	SysTick_Config(16000000/1000);
 80007fc:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000800:	f7ff ff8e 	bl	8000720 <SysTick_Config>
	/*
	 * Czas poczÄ…tkowy:
	 * 08:00:00
	 * 1 (poniedziaÅ‚ek), 1/3/2024
	 */
	SEC = bin2bcd(0);
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff ffad 	bl	8000764 <bin2bcd>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <main+0xd8>)
 8000810:	701a      	strb	r2, [r3, #0]
	MIN = bin2bcd(0);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff ffa6 	bl	8000764 <bin2bcd>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <main+0xdc>)
 800081e:	701a      	strb	r2, [r3, #0]
	HOUR = bin2bcd(8);
 8000820:	2008      	movs	r0, #8
 8000822:	f7ff ff9f 	bl	8000764 <bin2bcd>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <main+0xe0>)
 800082c:	701a      	strb	r2, [r3, #0]
	DAY = bin2bcd(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ff98 	bl	8000764 <bin2bcd>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <main+0xe4>)
 800083a:	701a      	strb	r2, [r3, #0]
	DATE = bin2bcd(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f7ff ff91 	bl	8000764 <bin2bcd>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <main+0xe8>)
 8000848:	701a      	strb	r2, [r3, #0]
	MONTH = bin2bcd(3);
 800084a:	2003      	movs	r0, #3
 800084c:	f7ff ff8a 	bl	8000764 <bin2bcd>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <main+0xec>)
 8000856:	701a      	strb	r2, [r3, #0]
	YEAR = bin2bcd(24);
 8000858:	2018      	movs	r0, #24
 800085a:	f7ff ff83 	bl	8000764 <bin2bcd>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <main+0xf0>)
 8000864:	701a      	strb	r2, [r3, #0]

	I2C1_GPIO_CONF();
 8000866:	f7ff fe7b 	bl	8000560 <I2C1_GPIO_CONF>
	I2C1_CONF();
 800086a:	f7ff fea3 	bl	80005b4 <I2C1_CONF>

	DS1307_INIT_CONF();
 800086e:	f7ff fcf9 	bl	8000264 <DS1307_INIT_CONF>

	DS1307_SET_TIME(SEC, MIN, HOUR);
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <main+0xd8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <main+0xdc>)
 8000878:	7811      	ldrb	r1, [r2, #0]
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <main+0xe0>)
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fcf8 	bl	8000274 <DS1307_SET_TIME>
	DS1307_SET_DATE(DAY, DATE, MONTH, YEAR);
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <main+0xe4>)
 8000886:	7818      	ldrb	r0, [r3, #0]
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <main+0xe8>)
 800088a:	7819      	ldrb	r1, [r3, #0]
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <main+0xec>)
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <main+0xf0>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	f7ff fd18 	bl	80002c8 <DS1307_SET_DATE>

	while(1){

		DELAY(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089c:	f7ff ff94 	bl	80007c8 <DELAY>
		DELAY(1000);
 80008a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a4:	f7ff ff90 	bl	80007c8 <DELAY>

		DS1307_GET_TIME(ptr_SEC, ptr_MIN, ptr_HOUR);
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <main+0xf4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <main+0xf8>)
 80008ae:	6811      	ldr	r1, [r2, #0]
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <main+0xfc>)
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fd3b 	bl	8000330 <DS1307_GET_TIME>
		DS1307_GET_DATE(ptr_DAY, ptr_DATE, ptr_MONTH, ptr_YEAR);
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <main+0x100>)
 80008bc:	6818      	ldr	r0, [r3, #0]
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <main+0x104>)
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <main+0x108>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <main+0x10c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f7ff fd62 	bl	8000392 <DS1307_GET_DATE>
		DELAY(1000);
 80008ce:	e7e3      	b.n	8000898 <main+0xa0>
 80008d0:	2000003c 	.word	0x2000003c
 80008d4:	2000003d 	.word	0x2000003d
 80008d8:	2000003e 	.word	0x2000003e
 80008dc:	2000003f 	.word	0x2000003f
 80008e0:	20000040 	.word	0x20000040
 80008e4:	20000041 	.word	0x20000041
 80008e8:	20000042 	.word	0x20000042
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000004 	.word	0x20000004
 80008f4:	20000008 	.word	0x20000008
 80008f8:	2000000c 	.word	0x2000000c
 80008fc:	20000010 	.word	0x20000010
 8000900:	20000014 	.word	0x20000014
 8000904:	20000018 	.word	0x20000018

08000908 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800090c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	; (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	; (8000954 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000936:	f000 f811 	bl	800095c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff ff5d 	bl	80007f8 <main>

0800093e <LoopForever>:

LoopForever:
  b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   r0, =_estack
 8000940:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800094c:	080009c4 	.word	0x080009c4
  ldr r2, =_sbss
 8000950:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000954:	20000044 	.word	0x20000044

08000958 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <__libc_init_array>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4d0d      	ldr	r5, [pc, #52]	; (8000994 <__libc_init_array+0x38>)
 8000960:	4c0d      	ldr	r4, [pc, #52]	; (8000998 <__libc_init_array+0x3c>)
 8000962:	1b64      	subs	r4, r4, r5
 8000964:	10a4      	asrs	r4, r4, #2
 8000966:	2600      	movs	r6, #0
 8000968:	42a6      	cmp	r6, r4
 800096a:	d109      	bne.n	8000980 <__libc_init_array+0x24>
 800096c:	4d0b      	ldr	r5, [pc, #44]	; (800099c <__libc_init_array+0x40>)
 800096e:	4c0c      	ldr	r4, [pc, #48]	; (80009a0 <__libc_init_array+0x44>)
 8000970:	f000 f818 	bl	80009a4 <_init>
 8000974:	1b64      	subs	r4, r4, r5
 8000976:	10a4      	asrs	r4, r4, #2
 8000978:	2600      	movs	r6, #0
 800097a:	42a6      	cmp	r6, r4
 800097c:	d105      	bne.n	800098a <__libc_init_array+0x2e>
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f855 3b04 	ldr.w	r3, [r5], #4
 8000984:	4798      	blx	r3
 8000986:	3601      	adds	r6, #1
 8000988:	e7ee      	b.n	8000968 <__libc_init_array+0xc>
 800098a:	f855 3b04 	ldr.w	r3, [r5], #4
 800098e:	4798      	blx	r3
 8000990:	3601      	adds	r6, #1
 8000992:	e7f2      	b.n	800097a <__libc_init_array+0x1e>
 8000994:	080009bc 	.word	0x080009bc
 8000998:	080009bc 	.word	0x080009bc
 800099c:	080009bc 	.word	0x080009bc
 80009a0:	080009c0 	.word	0x080009c0

080009a4 <_init>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	bf00      	nop
 80009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009aa:	bc08      	pop	{r3}
 80009ac:	469e      	mov	lr, r3
 80009ae:	4770      	bx	lr

080009b0 <_fini>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	bf00      	nop
 80009b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b6:	bc08      	pop	{r3}
 80009b8:	469e      	mov	lr, r3
 80009ba:	4770      	bx	lr
