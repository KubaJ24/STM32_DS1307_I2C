
STM32_DS1307_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002004  08002004  00012004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d0  080020d0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080020d0  080020d0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020d0  080020d0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d0  080020d0  000120d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080020d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000080  08002158  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08002158  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013d5  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005e1  00000000  00000000  000214c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00021ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fd  00000000  00000000  00021c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2e8  00000000  00000000  00021d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018f6  00000000  00000000  0003e005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d766  00000000  00000000  0003f8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000fd4  00000000  00000000  000dd064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000de038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001fec 	.word	0x08001fec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08001fec 	.word	0x08001fec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <I2C1_STOP>:
static inline void I2C1_START(void) { I2C1->CR2 |= I2C_CR2_START; }

/*
 * Generuje STOP po zakoÅ„czeniu obecnego transferu
 */
static inline void I2C1_STOP(void) { I2C1->CR2 |= I2C_CR2_STOP; }
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <I2C1_STOP+0x1c>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <I2C1_STOP+0x1c>)
 80002ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ce:	6053      	str	r3, [r2, #4]
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40005400 	.word	0x40005400

080002e0 <DS1307_I2C_ENABLE_OSCILLATOR>:
#include "stm32f746xx.h"
#include "DS1307_I2C.h"



void DS1307_I2C_ENABLE_OSCILLATOR(void){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 80002e4:	2068      	movs	r0, #104	; 0x68
 80002e6:	f000 f9d7 	bl	8000698 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(SECONDS_REG);
 80002ea:	2012      	movs	r0, #18
 80002ec:	f000 fa00 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(SECONDS_REG_CLEAR);
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 f9fd 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_STOP();
 80002f6:	f7ff ffe3 	bl	80002c0 <I2C1_STOP>
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}

080002fe <DS1307_SET_24H_MODE>:

void DS1307_SET_24H_MODE(void){
 80002fe:	b580      	push	{r7, lr}
 8000300:	af00      	add	r7, sp, #0
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 8000302:	2068      	movs	r0, #104	; 0x68
 8000304:	f000 f9c8 	bl	8000698 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(HOURS_REG);
 8000308:	2002      	movs	r0, #2
 800030a:	f000 f9f1 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(HOURS_REG_CLEAR);
 800030e:	2000      	movs	r0, #0
 8000310:	f000 f9ee 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_STOP();
 8000314:	f7ff ffd4 	bl	80002c0 <I2C1_STOP>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}

0800031c <DS1307_INIT_CONF>:

void DS1307_INIT_CONF(void){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	DS1307_I2C_ENABLE_OSCILLATOR();
 8000320:	f7ff ffde 	bl	80002e0 <DS1307_I2C_ENABLE_OSCILLATOR>
	DS1307_SET_24H_MODE();
 8000324:	f7ff ffeb 	bl	80002fe <DS1307_SET_24H_MODE>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <DS1307_SET_TIME>:

void DS1307_SET_TIME(uint8_t SEC, uint8_t MIN, uint8_t HOUR){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
 8000336:	460b      	mov	r3, r1
 8000338:	71bb      	strb	r3, [r7, #6]
 800033a:	4613      	mov	r3, r2
 800033c:	717b      	strb	r3, [r7, #5]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 800033e:	2068      	movs	r0, #104	; 0x68
 8000340:	f000 f9aa 	bl	8000698 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(SECONDS_REG);
 8000344:	2012      	movs	r0, #18
 8000346:	f000 f9d3 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(SEC & 0x7F);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f9cc 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(MIN & 0x7F);
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800035e:	b2db      	uxtb	r3, r3
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f9c5 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(HOUR & 0x3F);
 8000366:	797b      	ldrb	r3, [r7, #5]
 8000368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f9be 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_STOP();
 8000374:	f7ff ffa4 	bl	80002c0 <I2C1_STOP>
}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <DS1307_SET_DATE>:

void DS1307_SET_DATE(uint8_t DAY, uint8_t DATE, uint8_t MONTH, uint8_t YEAR){
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4604      	mov	r4, r0
 8000388:	4608      	mov	r0, r1
 800038a:	4611      	mov	r1, r2
 800038c:	461a      	mov	r2, r3
 800038e:	4623      	mov	r3, r4
 8000390:	71fb      	strb	r3, [r7, #7]
 8000392:	4603      	mov	r3, r0
 8000394:	71bb      	strb	r3, [r7, #6]
 8000396:	460b      	mov	r3, r1
 8000398:	717b      	strb	r3, [r7, #5]
 800039a:	4613      	mov	r3, r2
 800039c:	713b      	strb	r3, [r7, #4]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 800039e:	2068      	movs	r0, #104	; 0x68
 80003a0:	f000 f97a 	bl	8000698 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(DAYS_REG);
 80003a4:	2003      	movs	r0, #3
 80003a6:	f000 f9a3 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(DAY & 0x07);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f003 0307 	and.w	r3, r3, #7
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f99c 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(DATE & 0x3F);
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f995 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(MONTH & 0x1F);
 80003c6:	797b      	ldrb	r3, [r7, #5]
 80003c8:	f003 031f 	and.w	r3, r3, #31
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f98e 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SEND_BYTE(YEAR);
 80003d4:	793b      	ldrb	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f98a 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_STOP();
 80003dc:	f7ff ff70 	bl	80002c0 <I2C1_STOP>
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd90      	pop	{r4, r7, pc}

080003e8 <DS1307_GET_TIME>:

void DS1307_GET_TIME(uint8_t *ptr_SEC, uint8_t *ptr_MIN, uint8_t *ptr_HOUR){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 80003f4:	2068      	movs	r0, #104	; 0x68
 80003f6:	f000 f94f 	bl	8000698 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(SECONDS_REG);
 80003fa:	2012      	movs	r0, #18
 80003fc:	f000 f978 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000400:	2069      	movs	r0, #105	; 0x69
 8000402:	f000 f95c 	bl	80006be <I2C1_SELECT_AND_START_RD>
	*ptr_SEC = (I2C1_READ_BYTE() & 0x7F);
 8000406:	f000 f98d 	bl	8000724 <I2C1_READ_BYTE>
 800040a:	4603      	mov	r3, r0
 800040c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000410:	b2da      	uxtb	r2, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000416:	2069      	movs	r0, #105	; 0x69
 8000418:	f000 f951 	bl	80006be <I2C1_SELECT_AND_START_RD>
	*ptr_MIN = (I2C1_READ_BYTE() & 0x7F);
 800041c:	f000 f982 	bl	8000724 <I2C1_READ_BYTE>
 8000420:	4603      	mov	r3, r0
 8000422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000426:	b2da      	uxtb	r2, r3
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 800042c:	2069      	movs	r0, #105	; 0x69
 800042e:	f000 f946 	bl	80006be <I2C1_SELECT_AND_START_RD>
	*ptr_HOUR = (I2C1_READ_BYTE() & 0x3F);
 8000432:	f000 f977 	bl	8000724 <I2C1_READ_BYTE>
 8000436:	4603      	mov	r3, r0
 8000438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800043c:	b2da      	uxtb	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	701a      	strb	r2, [r3, #0]
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <DS1307_GET_DATE>:

void DS1307_GET_DATE(uint8_t *ptr_DAY, uint8_t *ptr_DATE, uint8_t *ptr_MONTH, uint8_t *ptr_YEAR){
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	60f8      	str	r0, [r7, #12]
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	607a      	str	r2, [r7, #4]
 8000456:	603b      	str	r3, [r7, #0]
	I2C1_SELECT_AND_START_WR(DS1307_ADDRESS | I2C1_WRITE);
 8000458:	2068      	movs	r0, #104	; 0x68
 800045a:	f000 f91d 	bl	8000698 <I2C1_SELECT_AND_START_WR>
	I2C1_SEND_BYTE(DAYS_REG);
 800045e:	2003      	movs	r0, #3
 8000460:	f000 f946 	bl	80006f0 <I2C1_SEND_BYTE>
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000464:	2069      	movs	r0, #105	; 0x69
 8000466:	f000 f92a 	bl	80006be <I2C1_SELECT_AND_START_RD>
	*ptr_DAY = (I2C1_READ_BYTE() & 0x07);
 800046a:	f000 f95b 	bl	8000724 <I2C1_READ_BYTE>
 800046e:	4603      	mov	r3, r0
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	b2da      	uxtb	r2, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 800047a:	2069      	movs	r0, #105	; 0x69
 800047c:	f000 f91f 	bl	80006be <I2C1_SELECT_AND_START_RD>
	*ptr_DATE = (I2C1_READ_BYTE() & 0x3F);
 8000480:	f000 f950 	bl	8000724 <I2C1_READ_BYTE>
 8000484:	4603      	mov	r3, r0
 8000486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800048a:	b2da      	uxtb	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 8000490:	2069      	movs	r0, #105	; 0x69
 8000492:	f000 f914 	bl	80006be <I2C1_SELECT_AND_START_RD>
	*ptr_MONTH = (I2C1_READ_BYTE() & 0x1F);
 8000496:	f000 f945 	bl	8000724 <I2C1_READ_BYTE>
 800049a:	4603      	mov	r3, r0
 800049c:	f003 031f 	and.w	r3, r3, #31
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	701a      	strb	r2, [r3, #0]
	I2C1_SELECT_AND_START_RD(DS1307_ADDRESS | I2C1_READ);
 80004a6:	2069      	movs	r0, #105	; 0x69
 80004a8:	f000 f909 	bl	80006be <I2C1_SELECT_AND_START_RD>
	*ptr_YEAR = I2C1_READ_BYTE();
 80004ac:	f000 f93a 	bl	8000724 <I2C1_READ_BYTE>
 80004b0:	4603      	mov	r3, r0
 80004b2:	461a      	mov	r2, r3
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	701a      	strb	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <I2C1_START>:
static inline void I2C1_START(void) { I2C1->CR2 |= I2C_CR2_START; }
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <I2C1_START+0x1c>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <I2C1_START+0x1c>)
 80004ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ce:	6053      	str	r3, [r2, #4]
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40005400 	.word	0x40005400

080004e0 <I2C1_SET_ADDR>:

/*
 * Ustawia adres urzÄ…dznia docelowego
 */
static inline void I2C1_SET_ADDR(uint8_t Address) { I2C1->CR2 |= Address; }
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <I2C1_SET_ADDR+0x24>)
 80004ec:	685a      	ldr	r2, [r3, #4]
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <I2C1_SET_ADDR+0x24>)
 80004f2:	4313      	orrs	r3, r2
 80004f4:	604b      	str	r3, [r1, #4]
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40005400 	.word	0x40005400

08000508 <I2C1_SET_1_BYTE_TRANSFER>:
static inline void I2C1_SET_READ(void) { I2C1->CR2 |= I2C_CR2_RD_WRN; }

/*
 * Ustawia I2C na wysÅ‚anie/odbieranie 1 bajtu
 */
static inline void I2C1_SET_1_BYTE_TRANSFER(void) { I2C1->CR2 |= (1 << 16); }
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <I2C1_SET_1_BYTE_TRANSFER+0x1c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <I2C1_SET_1_BYTE_TRANSFER+0x1c>)
 8000512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000516:	6053      	str	r3, [r2, #4]
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40005400 	.word	0x40005400

08000528 <I2C1_WAIT_FOR_START>:

/*
 * Ustawia I2C na wysÅ‚anie/odbieranie 1 bajtu
 */
static inline void I2C1_WAIT_FOR_START(void) {
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	while(I2C1->CR2 & I2C_CR2_START){  }
 800052c:	bf00      	nop
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <I2C1_WAIT_FOR_START+0x20>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000536:	2b00      	cmp	r3, #0
 8000538:	d1f9      	bne.n	800052e <I2C1_WAIT_FOR_START+0x6>
}
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40005400 	.word	0x40005400

0800054c <I2C1_WAIT_FOR_TXDR_EMPTY>:

/*
 * Czeka na oprÃ³Å¼nienie rejestru TXDR
 */
static inline void I2C1_WAIT_FOR_TXDR_EMPTY(void) {
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	while(!(I2C1->ISR & I2C_ISR_TXE)){  }
 8000550:	bf00      	nop
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <I2C1_WAIT_FOR_TXDR_EMPTY+0x20>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f9      	beq.n	8000552 <I2C1_WAIT_FOR_TXDR_EMPTY+0x6>
}
 800055e:	bf00      	nop
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40005400 	.word	0x40005400

08000570 <I2C1_WAIT_FOR_REC_COMPLETE>:

/*
 * Czeka na zakoÅ„czenie odbioru danych
 */
static inline void I2C1_WAIT_FOR_REC_COMPLETE(void) {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	while(!(I2C1->ISR & I2C_ISR_RXNE)){  }
 8000574:	bf00      	nop
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <I2C1_WAIT_FOR_REC_COMPLETE+0x20>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <I2C1_WAIT_FOR_REC_COMPLETE+0x6>
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40005400 	.word	0x40005400

08000594 <I2C1_SEND_NACK>:

/*
 * WysyÅ‚a NACK po odebraniu bajtu
 */
static inline void I2C1_SEND_NACK(void) { I2C1->CR2 |= I2C_CR2_NACK; }
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <I2C1_SEND_NACK+0x1c>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <I2C1_SEND_NACK+0x1c>)
 800059e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a2:	6053      	str	r3, [r2, #4]
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40005400 	.word	0x40005400

080005b4 <I2C1_GPIO_CONF>:

#include <stdint.h>
#include "stm32f746xx.h"
#include "i2c1.h"

void I2C1_GPIO_CONF(void){
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	//GPIOB CLOCK ENABLE
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <I2C1_GPIO_CONF+0x4c>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a10      	ldr	r2, [pc, #64]	; (8000600 <I2C1_GPIO_CONF+0x4c>)
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30
	//ALTERNATE FUNCTION MODE
	GPIOB->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <I2C1_GPIO_CONF+0x50>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <I2C1_GPIO_CONF+0x50>)
 80005ca:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80005ce:	6013      	str	r3, [r2, #0]
	//OUTPUT SPEED HIGH
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1 | GPIO_OSPEEDER_OSPEEDR9_1;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <I2C1_GPIO_CONF+0x50>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <I2C1_GPIO_CONF+0x50>)
 80005d6:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80005da:	6093      	str	r3, [r2, #8]
	//PULL UP
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR9_0;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <I2C1_GPIO_CONF+0x50>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a08      	ldr	r2, [pc, #32]	; (8000604 <I2C1_GPIO_CONF+0x50>)
 80005e2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80005e6:	60d3      	str	r3, [r2, #12]
	//ALTERNATE FUNCTION SELECT (AF4)
	GPIOB->AFR[1] |= (0x4 << 0) | (0x4 << 4);
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <I2C1_GPIO_CONF+0x50>)
 80005ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ec:	4a05      	ldr	r2, [pc, #20]	; (8000604 <I2C1_GPIO_CONF+0x50>)
 80005ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80005f2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40020400 	.word	0x40020400

08000608 <I2C1_CONF>:

void I2C1_CONF(void){
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	//I2C1 CLOCK ENABLE
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <I2C1_CONF+0x88>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <I2C1_CONF+0x88>)
 8000612:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40

	//PERIPHERAL DISABLE (RESET)
	I2C1->CR1 &= ~(I2C_CR1_PE);
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <I2C1_CONF+0x8c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <I2C1_CONF+0x8c>)
 800061e:	f023 0301 	bic.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

	//APB1 PERIPHERAL CLOCK -> 16 MHZ
	//TIMING REGISTER
	//TIMING PRESCALLER
	I2C1->TIMINGR |= (3 << 28);
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <I2C1_CONF+0x8c>)
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <I2C1_CONF+0x8c>)
 800062a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800062e:	6113      	str	r3, [r2, #16]
	//DATA SETUP TIME (SCLDEL)
	I2C1->TIMINGR |= (0x4 << 20);
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <I2C1_CONF+0x8c>)
 8000632:	691b      	ldr	r3, [r3, #16]
 8000634:	4a17      	ldr	r2, [pc, #92]	; (8000694 <I2C1_CONF+0x8c>)
 8000636:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800063a:	6113      	str	r3, [r2, #16]
	//DATA HOLD TIME (SDADEL)
	I2C1->TIMINGR |= (0x2 << 16);
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <I2C1_CONF+0x8c>)
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <I2C1_CONF+0x8c>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	6113      	str	r3, [r2, #16]
	//SCL HIGH PERIOD
	I2C1->TIMINGR |= (0xF << 8);
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <I2C1_CONF+0x8c>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	4a11      	ldr	r2, [pc, #68]	; (8000694 <I2C1_CONF+0x8c>)
 800064e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000652:	6113      	str	r3, [r2, #16]
	//SCL LOW PERIOD
	I2C1->TIMINGR |= (0x13 << 0);
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <I2C1_CONF+0x8c>)
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <I2C1_CONF+0x8c>)
 800065a:	f043 0313 	orr.w	r3, r3, #19
 800065e:	6113      	str	r3, [r2, #16]

	//NOSTRECH BIT CLEARED (STM IN MASTER MODE)
	I2C1->CR1 &= ~(I2C_CR1_NOSTRETCH);
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <I2C1_CONF+0x8c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <I2C1_CONF+0x8c>)
 8000666:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800066a:	6013      	str	r3, [r2, #0]

	//SET OWN ADDRESS
	I2C1->OAR1 |= 0x03 << 1;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <I2C1_CONF+0x8c>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <I2C1_CONF+0x8c>)
 8000672:	f043 0306 	orr.w	r3, r3, #6
 8000676:	6093      	str	r3, [r2, #8]

	//PERIPHERAL ENABLE
	I2C1->CR1 |= I2C_CR1_PE;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <I2C1_CONF+0x8c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a05      	ldr	r2, [pc, #20]	; (8000694 <I2C1_CONF+0x8c>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40005400 	.word	0x40005400

08000698 <I2C1_SELECT_AND_START_WR>:

void I2C1_SELECT_AND_START_WR(uint8_t Address){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	I2C1_SET_ADDR(Address | I2C1_WRITE);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff1b 	bl	80004e0 <I2C1_SET_ADDR>
	//I2C1_SET_WRITE();
	I2C1_SET_1_BYTE_TRANSFER();
 80006aa:	f7ff ff2d 	bl	8000508 <I2C1_SET_1_BYTE_TRANSFER>
	I2C1_START();
 80006ae:	f7ff ff07 	bl	80004c0 <I2C1_START>

	I2C1_WAIT_FOR_START();
 80006b2:	f7ff ff39 	bl	8000528 <I2C1_WAIT_FOR_START>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <I2C1_SELECT_AND_START_RD>:

void I2C1_SELECT_AND_START_RD(uint8_t Address){
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	71fb      	strb	r3, [r7, #7]
	I2C1_SET_ADDR(Address | I2C1_READ);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff05 	bl	80004e0 <I2C1_SET_ADDR>
	//I2C1_SET_READ();
	I2C1_SET_1_BYTE_TRANSFER();
 80006d6:	f7ff ff17 	bl	8000508 <I2C1_SET_1_BYTE_TRANSFER>
	I2C1_SEND_NACK();
 80006da:	f7ff ff5b 	bl	8000594 <I2C1_SEND_NACK>
	I2C1_START();
 80006de:	f7ff feef 	bl	80004c0 <I2C1_START>

	I2C1_WAIT_FOR_START();
 80006e2:	f7ff ff21 	bl	8000528 <I2C1_WAIT_FOR_START>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <I2C1_SEND_BYTE>:

void I2C1_SEND_BYTE(uint8_t Byte){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	I2C1_WAIT_FOR_TXDR_EMPTY();
 80006fa:	f7ff ff27 	bl	800054c <I2C1_WAIT_FOR_TXDR_EMPTY>
	I2C1->TXDR = Byte;
 80006fe:	4a07      	ldr	r2, [pc, #28]	; (800071c <I2C1_SEND_BYTE+0x2c>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	6293      	str	r3, [r2, #40]	; 0x28
	printf("%d\n", Byte);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <I2C1_SEND_BYTE+0x30>)
 800070a:	f000 fd9f 	bl	800124c <iprintf>
	I2C1_WAIT_FOR_TXDR_EMPTY();
 800070e:	f7ff ff1d 	bl	800054c <I2C1_WAIT_FOR_TXDR_EMPTY>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40005400 	.word	0x40005400
 8000720:	08002004 	.word	0x08002004

08000724 <I2C1_READ_BYTE>:

uint8_t I2C1_READ_BYTE(void){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	I2C1_WAIT_FOR_REC_COMPLETE();
 8000728:	f7ff ff22 	bl	8000570 <I2C1_WAIT_FOR_REC_COMPLETE>
	return I2C1->RXDR;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <I2C1_READ_BYTE+0x14>)
 800072e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000730:	b2db      	uxtb	r3, r3
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40005400 	.word	0x40005400

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	; (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	; (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a0:	d301      	bcc.n	80007a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00f      	b.n	80007c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <SysTick_Config+0x40>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ae:	210f      	movs	r1, #15
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f7ff ffc2 	bl	800073c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <SysTick_Config+0x40>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <SysTick_Config+0x40>)
 80007c0:	2207      	movs	r2, #7
 80007c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <bcd2bin>:
#include <stdint.h>
#include "stm32f746xx.h"
#include "i2c1.h"
#include "DS1307_I2C.h"

uint8_t bcd2bin(uint8_t n) { return ((((n >> 4) & 0x0F) * 10) + (n & 0x0F)); }
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	091b      	lsrs	r3, r3, #4
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	0092      	lsls	r2, r2, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 030f 	and.w	r3, r3, #15
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4413      	add	r3, r2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <bin2bcd>:

uint8_t bin2bcd(uint8_t n) { return (((n / 10) << 4) | (n % 10)); }
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <bin2bcd+0x44>)
 8000816:	fba2 2303 	umull	r2, r3, r2, r3
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	b2db      	uxtb	r3, r3
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	b258      	sxtb	r0, r3
 8000822:	79fa      	ldrb	r2, [r7, #7]
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <bin2bcd+0x44>)
 8000826:	fba3 1302 	umull	r1, r3, r3, r2
 800082a:	08d9      	lsrs	r1, r3, #3
 800082c:	460b      	mov	r3, r1
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	440b      	add	r3, r1
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	b25b      	sxtb	r3, r3
 800083a:	4303      	orrs	r3, r0
 800083c:	b25b      	sxtb	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	cccccccd 	.word	0xcccccccd

08000850 <SysTick_Handler>:



extern void initialise_monitor_handles();

void SysTick_Handler(void){
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
	//INCREASE SYSTEM TIMER
	Tick++;
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SysTick_Handler+0x18>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a03      	ldr	r2, [pc, #12]	; (8000868 <SysTick_Handler+0x18>)
 800085c:	6013      	str	r3, [r2, #0]
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	2000009c 	.word	0x2000009c

0800086c <DELAY>:

void DELAY(uint32_t Delay_ms){
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    uint32_t StartTime = Tick;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <DELAY+0x2c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	60fb      	str	r3, [r7, #12]
    while(Tick < (StartTime + Delay_ms))
 800087a:	bf00      	nop
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	441a      	add	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <DELAY+0x2c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d8f8      	bhi.n	800087c <DELAY+0x10>
    {
        // Just wait
    }
}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	2000009c 	.word	0x2000009c

0800089c <main>:
/*
 * Funkcja gÅ‚Ã³wna programu
 */

int main(void)
{
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089e:	b083      	sub	sp, #12
 80008a0:	af02      	add	r7, sp, #8

	SysTick_Config(16000000/1000);
 80008a2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80008a6:	f7ff ff73 	bl	8000790 <SysTick_Config>

	initialise_monitor_handles();
 80008aa:	f000 fb91 	bl	8000fd0 <initialise_monitor_handles>
	/*
	 * Czas poczÄ…tkowy:
	 * 08:00:00
	 * 1 (poniedziaÅ‚ek), 1/3/2024
	 */
	SEC = bin2bcd(0);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff ffaa 	bl	8000808 <bin2bcd>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b6f      	ldr	r3, [pc, #444]	; (8000a78 <main+0x1dc>)
 80008ba:	701a      	strb	r2, [r3, #0]
	MIN = bin2bcd(0);
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff ffa3 	bl	8000808 <bin2bcd>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b6d      	ldr	r3, [pc, #436]	; (8000a7c <main+0x1e0>)
 80008c8:	701a      	strb	r2, [r3, #0]
	HOUR = bin2bcd(8);
 80008ca:	2008      	movs	r0, #8
 80008cc:	f7ff ff9c 	bl	8000808 <bin2bcd>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b6a      	ldr	r3, [pc, #424]	; (8000a80 <main+0x1e4>)
 80008d6:	701a      	strb	r2, [r3, #0]
	DAY = bin2bcd(1);
 80008d8:	2001      	movs	r0, #1
 80008da:	f7ff ff95 	bl	8000808 <bin2bcd>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b68      	ldr	r3, [pc, #416]	; (8000a84 <main+0x1e8>)
 80008e4:	701a      	strb	r2, [r3, #0]
	DATE = bin2bcd(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ff8e 	bl	8000808 <bin2bcd>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b65      	ldr	r3, [pc, #404]	; (8000a88 <main+0x1ec>)
 80008f2:	701a      	strb	r2, [r3, #0]
	MONTH = bin2bcd(3);
 80008f4:	2003      	movs	r0, #3
 80008f6:	f7ff ff87 	bl	8000808 <bin2bcd>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <main+0x1f0>)
 8000900:	701a      	strb	r2, [r3, #0]
	YEAR = bin2bcd(24);
 8000902:	2018      	movs	r0, #24
 8000904:	f7ff ff80 	bl	8000808 <bin2bcd>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <main+0x1f4>)
 800090e:	701a      	strb	r2, [r3, #0]

	I2C1_GPIO_CONF();
 8000910:	f7ff fe50 	bl	80005b4 <I2C1_GPIO_CONF>
	I2C1_CONF();
 8000914:	f7ff fe78 	bl	8000608 <I2C1_CONF>

	printf("I2C skonfigurowane\n");
 8000918:	485e      	ldr	r0, [pc, #376]	; (8000a94 <main+0x1f8>)
 800091a:	f000 fcfd 	bl	8001318 <puts>

	DS1307_INIT_CONF();
 800091e:	f7ff fcfd 	bl	800031c <DS1307_INIT_CONF>

	printf("DS1307 skonfigurowany\n");
 8000922:	485d      	ldr	r0, [pc, #372]	; (8000a98 <main+0x1fc>)
 8000924:	f000 fcf8 	bl	8001318 <puts>

	DS1307_SET_TIME(SEC, MIN, HOUR);
 8000928:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <main+0x1dc>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4a53      	ldr	r2, [pc, #332]	; (8000a7c <main+0x1e0>)
 800092e:	7811      	ldrb	r1, [r2, #0]
 8000930:	4a53      	ldr	r2, [pc, #332]	; (8000a80 <main+0x1e4>)
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fcf9 	bl	800032c <DS1307_SET_TIME>
	DS1307_SET_DATE(DAY, DATE, MONTH, YEAR);
 800093a:	4b52      	ldr	r3, [pc, #328]	; (8000a84 <main+0x1e8>)
 800093c:	7818      	ldrb	r0, [r3, #0]
 800093e:	4b52      	ldr	r3, [pc, #328]	; (8000a88 <main+0x1ec>)
 8000940:	7819      	ldrb	r1, [r3, #0]
 8000942:	4b52      	ldr	r3, [pc, #328]	; (8000a8c <main+0x1f0>)
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <main+0x1f4>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	f7ff fd19 	bl	8000380 <DS1307_SET_DATE>

	printf("Czas poczÄ…tkowy:\n");
 800094e:	4853      	ldr	r0, [pc, #332]	; (8000a9c <main+0x200>)
 8000950:	f000 fce2 	bl	8001318 <puts>
	printf("Godzina: %d : %d : %d", bcd2bin(HOUR), bcd2bin(MIN), bcd2bin(SEC));
 8000954:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <main+0x1e4>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff3b 	bl	80007d4 <bcd2bin>
 800095e:	4603      	mov	r3, r0
 8000960:	461c      	mov	r4, r3
 8000962:	4b46      	ldr	r3, [pc, #280]	; (8000a7c <main+0x1e0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff34 	bl	80007d4 <bcd2bin>
 800096c:	4603      	mov	r3, r0
 800096e:	461d      	mov	r5, r3
 8000970:	4b41      	ldr	r3, [pc, #260]	; (8000a78 <main+0x1dc>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff2d 	bl	80007d4 <bcd2bin>
 800097a:	4603      	mov	r3, r0
 800097c:	462a      	mov	r2, r5
 800097e:	4621      	mov	r1, r4
 8000980:	4847      	ldr	r0, [pc, #284]	; (8000aa0 <main+0x204>)
 8000982:	f000 fc63 	bl	800124c <iprintf>
	printf("        Data: %d / %d / %d / 20%d\n", bcd2bin(DAY), bcd2bin(DATE), bcd2bin(MONTH), bcd2bin(YEAR));
 8000986:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <main+0x1e8>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff22 	bl	80007d4 <bcd2bin>
 8000990:	4603      	mov	r3, r0
 8000992:	461c      	mov	r4, r3
 8000994:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <main+0x1ec>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff1b 	bl	80007d4 <bcd2bin>
 800099e:	4603      	mov	r3, r0
 80009a0:	461d      	mov	r5, r3
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <main+0x1f0>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff14 	bl	80007d4 <bcd2bin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461e      	mov	r6, r3
 80009b0:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <main+0x1f4>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff0d 	bl	80007d4 <bcd2bin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	4633      	mov	r3, r6
 80009c0:	462a      	mov	r2, r5
 80009c2:	4621      	mov	r1, r4
 80009c4:	4837      	ldr	r0, [pc, #220]	; (8000aa4 <main+0x208>)
 80009c6:	f000 fc41 	bl	800124c <iprintf>

	while(1){

		DELAY(1000);
 80009ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ce:	f7ff ff4d 	bl	800086c <DELAY>
		DELAY(1000);
 80009d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d6:	f7ff ff49 	bl	800086c <DELAY>

		DS1307_GET_TIME(ptr_SEC, ptr_MIN, ptr_HOUR);
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <main+0x20c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <main+0x210>)
 80009e0:	6811      	ldr	r1, [r2, #0]
 80009e2:	4a33      	ldr	r2, [pc, #204]	; (8000ab0 <main+0x214>)
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fcfe 	bl	80003e8 <DS1307_GET_TIME>
		DS1307_GET_DATE(ptr_DAY, ptr_DATE, ptr_MONTH, ptr_YEAR);
 80009ec:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <main+0x218>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <main+0x21c>)
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	4b31      	ldr	r3, [pc, #196]	; (8000abc <main+0x220>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <main+0x224>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f7ff fd25 	bl	800044a <DS1307_GET_DATE>

		printf("Godzina: %d : %d : %d", bcd2bin(HOUR), bcd2bin(MIN), bcd2bin(SEC));
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <main+0x1e4>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fee5 	bl	80007d4 <bcd2bin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461c      	mov	r4, r3
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <main+0x1e0>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fede 	bl	80007d4 <bcd2bin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461d      	mov	r5, r3
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <main+0x1dc>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fed7 	bl	80007d4 <bcd2bin>
 8000a26:	4603      	mov	r3, r0
 8000a28:	462a      	mov	r2, r5
 8000a2a:	4621      	mov	r1, r4
 8000a2c:	481c      	ldr	r0, [pc, #112]	; (8000aa0 <main+0x204>)
 8000a2e:	f000 fc0d 	bl	800124c <iprintf>
		printf("        Data: %d / %d / %d / 20%d\n", bcd2bin(DAY), bcd2bin(DATE), bcd2bin(MONTH), bcd2bin(YEAR));
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <main+0x1e8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fecc 	bl	80007d4 <bcd2bin>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461c      	mov	r4, r3
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <main+0x1ec>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fec5 	bl	80007d4 <bcd2bin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461d      	mov	r5, r3
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <main+0x1f0>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff febe 	bl	80007d4 <bcd2bin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461e      	mov	r6, r3
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <main+0x1f4>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff feb7 	bl	80007d4 <bcd2bin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	4633      	mov	r3, r6
 8000a6c:	462a      	mov	r2, r5
 8000a6e:	4621      	mov	r1, r4
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <main+0x208>)
 8000a72:	f000 fbeb 	bl	800124c <iprintf>
		DELAY(1000);
 8000a76:	e7a8      	b.n	80009ca <main+0x12e>
 8000a78:	200000a0 	.word	0x200000a0
 8000a7c:	200000a1 	.word	0x200000a1
 8000a80:	200000a2 	.word	0x200000a2
 8000a84:	200000a3 	.word	0x200000a3
 8000a88:	200000a4 	.word	0x200000a4
 8000a8c:	200000a5 	.word	0x200000a5
 8000a90:	200000a6 	.word	0x200000a6
 8000a94:	08002008 	.word	0x08002008
 8000a98:	0800201c 	.word	0x0800201c
 8000a9c:	08002034 	.word	0x08002034
 8000aa0:	08002048 	.word	0x08002048
 8000aa4:	08002060 	.word	0x08002060
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	20000010 	.word	0x20000010
 8000abc:	20000014 	.word	0x20000014
 8000ac0:	20000018 	.word	0x20000018

08000ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <_sbrk+0x5c>)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <_sbrk+0x60>)
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_sbrk+0x64>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <_sbrk+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d207      	bcs.n	8000b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af4:	f000 fd3e 	bl	8001574 <__errno>
 8000af8:	4603      	mov	r3, r0
 8000afa:	220c      	movs	r2, #12
 8000afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	e009      	b.n	8000b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <_sbrk+0x64>)
 8000b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20050000 	.word	0x20050000
 8000b24:	00000400 	.word	0x00000400
 8000b28:	200000a8 	.word	0x200000a8
 8000b2c:	200002a8 	.word	0x200002a8

08000b30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b5e:	f000 fd0f 	bl	8001580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b62:	f7ff fe9b 	bl	800089c <main>

08000b66 <LoopForever>:

LoopForever:
  b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   r0, =_estack
 8000b68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000b74:	080020d8 	.word	0x080020d8
  ldr r2, =_sbss
 8000b78:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000b7c:	200002a4 	.word	0x200002a4

08000b80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC_IRQHandler>
	...

08000b84 <findslot>:
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <findslot+0x2c>)
 8000b86:	b510      	push	{r4, lr}
 8000b88:	4604      	mov	r4, r0
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	b118      	cbz	r0, 8000b96 <findslot+0x12>
 8000b8e:	6a03      	ldr	r3, [r0, #32]
 8000b90:	b90b      	cbnz	r3, 8000b96 <findslot+0x12>
 8000b92:	f000 fb25 	bl	80011e0 <__sinit>
 8000b96:	2c13      	cmp	r4, #19
 8000b98:	d807      	bhi.n	8000baa <findslot+0x26>
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <findslot+0x30>)
 8000b9c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8000ba0:	3201      	adds	r2, #1
 8000ba2:	d002      	beq.n	8000baa <findslot+0x26>
 8000ba4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8000ba8:	bd10      	pop	{r4, pc}
 8000baa:	2000      	movs	r0, #0
 8000bac:	e7fc      	b.n	8000ba8 <findslot+0x24>
 8000bae:	bf00      	nop
 8000bb0:	2000007c 	.word	0x2000007c
 8000bb4:	200000b8 	.word	0x200000b8

08000bb8 <error>:
 8000bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bba:	4604      	mov	r4, r0
 8000bbc:	f000 fcda 	bl	8001574 <__errno>
 8000bc0:	2613      	movs	r6, #19
 8000bc2:	4605      	mov	r5, r0
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4639      	mov	r1, r7
 8000bca:	beab      	bkpt	0x00ab
 8000bcc:	4606      	mov	r6, r0
 8000bce:	602e      	str	r6, [r5, #0]
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bd4 <checkerror>:
 8000bd4:	1c43      	adds	r3, r0, #1
 8000bd6:	d101      	bne.n	8000bdc <checkerror+0x8>
 8000bd8:	f7ff bfee 	b.w	8000bb8 <error>
 8000bdc:	4770      	bx	lr

08000bde <_swiread>:
 8000bde:	b530      	push	{r4, r5, lr}
 8000be0:	b085      	sub	sp, #20
 8000be2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000be6:	9203      	str	r2, [sp, #12]
 8000be8:	2406      	movs	r4, #6
 8000bea:	ad01      	add	r5, sp, #4
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	beab      	bkpt	0x00ab
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f7ff ffed 	bl	8000bd4 <checkerror>
 8000bfa:	b005      	add	sp, #20
 8000bfc:	bd30      	pop	{r4, r5, pc}

08000bfe <_read>:
 8000bfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c00:	4615      	mov	r5, r2
 8000c02:	9101      	str	r1, [sp, #4]
 8000c04:	f7ff ffbe 	bl	8000b84 <findslot>
 8000c08:	9901      	ldr	r1, [sp, #4]
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	b938      	cbnz	r0, 8000c1e <_read+0x20>
 8000c0e:	f000 fcb1 	bl	8001574 <__errno>
 8000c12:	2309      	movs	r3, #9
 8000c14:	6003      	str	r3, [r0, #0]
 8000c16:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1a:	b003      	add	sp, #12
 8000c1c:	bd30      	pop	{r4, r5, pc}
 8000c1e:	6800      	ldr	r0, [r0, #0]
 8000c20:	462a      	mov	r2, r5
 8000c22:	f7ff ffdc 	bl	8000bde <_swiread>
 8000c26:	1c43      	adds	r3, r0, #1
 8000c28:	d0f7      	beq.n	8000c1a <_read+0x1c>
 8000c2a:	6863      	ldr	r3, [r4, #4]
 8000c2c:	1a2a      	subs	r2, r5, r0
 8000c2e:	4413      	add	r3, r2
 8000c30:	6063      	str	r3, [r4, #4]
 8000c32:	4610      	mov	r0, r2
 8000c34:	e7f1      	b.n	8000c1a <_read+0x1c>

08000c36 <_swilseek>:
 8000c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c38:	460c      	mov	r4, r1
 8000c3a:	4616      	mov	r6, r2
 8000c3c:	f7ff ffa2 	bl	8000b84 <findslot>
 8000c40:	4605      	mov	r5, r0
 8000c42:	b940      	cbnz	r0, 8000c56 <_swilseek+0x20>
 8000c44:	f000 fc96 	bl	8001574 <__errno>
 8000c48:	2309      	movs	r3, #9
 8000c4a:	6003      	str	r3, [r0, #0]
 8000c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8000c50:	4620      	mov	r0, r4
 8000c52:	b003      	add	sp, #12
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c56:	2e02      	cmp	r6, #2
 8000c58:	d903      	bls.n	8000c62 <_swilseek+0x2c>
 8000c5a:	f000 fc8b 	bl	8001574 <__errno>
 8000c5e:	2316      	movs	r3, #22
 8000c60:	e7f3      	b.n	8000c4a <_swilseek+0x14>
 8000c62:	2e01      	cmp	r6, #1
 8000c64:	d112      	bne.n	8000c8c <_swilseek+0x56>
 8000c66:	6843      	ldr	r3, [r0, #4]
 8000c68:	18e4      	adds	r4, r4, r3
 8000c6a:	d4f6      	bmi.n	8000c5a <_swilseek+0x24>
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	260a      	movs	r6, #10
 8000c70:	e9cd 3400 	strd	r3, r4, [sp]
 8000c74:	466f      	mov	r7, sp
 8000c76:	4630      	mov	r0, r6
 8000c78:	4639      	mov	r1, r7
 8000c7a:	beab      	bkpt	0x00ab
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	4630      	mov	r0, r6
 8000c80:	f7ff ffa8 	bl	8000bd4 <checkerror>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	dbe1      	blt.n	8000c4c <_swilseek+0x16>
 8000c88:	606c      	str	r4, [r5, #4]
 8000c8a:	e7e1      	b.n	8000c50 <_swilseek+0x1a>
 8000c8c:	2e02      	cmp	r6, #2
 8000c8e:	6803      	ldr	r3, [r0, #0]
 8000c90:	d1ec      	bne.n	8000c6c <_swilseek+0x36>
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	260c      	movs	r6, #12
 8000c96:	466f      	mov	r7, sp
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	beab      	bkpt	0x00ab
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	f7ff ff97 	bl	8000bd4 <checkerror>
 8000ca6:	1c43      	adds	r3, r0, #1
 8000ca8:	d0d0      	beq.n	8000c4c <_swilseek+0x16>
 8000caa:	4404      	add	r4, r0
 8000cac:	e7de      	b.n	8000c6c <_swilseek+0x36>

08000cae <_lseek>:
 8000cae:	f7ff bfc2 	b.w	8000c36 <_swilseek>

08000cb2 <_swiwrite>:
 8000cb2:	b530      	push	{r4, r5, lr}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000cba:	9203      	str	r2, [sp, #12]
 8000cbc:	2405      	movs	r4, #5
 8000cbe:	ad01      	add	r5, sp, #4
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	beab      	bkpt	0x00ab
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f7ff ff83 	bl	8000bd4 <checkerror>
 8000cce:	b005      	add	sp, #20
 8000cd0:	bd30      	pop	{r4, r5, pc}

08000cd2 <_write>:
 8000cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000cd4:	4615      	mov	r5, r2
 8000cd6:	9101      	str	r1, [sp, #4]
 8000cd8:	f7ff ff54 	bl	8000b84 <findslot>
 8000cdc:	9901      	ldr	r1, [sp, #4]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	b930      	cbnz	r0, 8000cf0 <_write+0x1e>
 8000ce2:	f000 fc47 	bl	8001574 <__errno>
 8000ce6:	2309      	movs	r3, #9
 8000ce8:	6003      	str	r3, [r0, #0]
 8000cea:	f04f 30ff 	mov.w	r0, #4294967295
 8000cee:	e012      	b.n	8000d16 <_write+0x44>
 8000cf0:	6800      	ldr	r0, [r0, #0]
 8000cf2:	462a      	mov	r2, r5
 8000cf4:	f7ff ffdd 	bl	8000cb2 <_swiwrite>
 8000cf8:	2800      	cmp	r0, #0
 8000cfa:	dbf6      	blt.n	8000cea <_write+0x18>
 8000cfc:	6862      	ldr	r2, [r4, #4]
 8000cfe:	1a2b      	subs	r3, r5, r0
 8000d00:	441a      	add	r2, r3
 8000d02:	42a8      	cmp	r0, r5
 8000d04:	6062      	str	r2, [r4, #4]
 8000d06:	d105      	bne.n	8000d14 <_write+0x42>
 8000d08:	2000      	movs	r0, #0
 8000d0a:	b003      	add	sp, #12
 8000d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d10:	f7ff bf52 	b.w	8000bb8 <error>
 8000d14:	4618      	mov	r0, r3
 8000d16:	b003      	add	sp, #12
 8000d18:	bd30      	pop	{r4, r5, pc}

08000d1a <_swiclose>:
 8000d1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d1c:	2402      	movs	r4, #2
 8000d1e:	9001      	str	r0, [sp, #4]
 8000d20:	ad01      	add	r5, sp, #4
 8000d22:	4620      	mov	r0, r4
 8000d24:	4629      	mov	r1, r5
 8000d26:	beab      	bkpt	0x00ab
 8000d28:	4604      	mov	r4, r0
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f7ff ff52 	bl	8000bd4 <checkerror>
 8000d30:	b003      	add	sp, #12
 8000d32:	bd30      	pop	{r4, r5, pc}

08000d34 <_close>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4605      	mov	r5, r0
 8000d38:	f7ff ff24 	bl	8000b84 <findslot>
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	b930      	cbnz	r0, 8000d4e <_close+0x1a>
 8000d40:	f000 fc18 	bl	8001574 <__errno>
 8000d44:	2309      	movs	r3, #9
 8000d46:	6003      	str	r3, [r0, #0]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	bd38      	pop	{r3, r4, r5, pc}
 8000d4e:	3d01      	subs	r5, #1
 8000d50:	2d01      	cmp	r5, #1
 8000d52:	d809      	bhi.n	8000d68 <_close+0x34>
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <_close+0x48>)
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d104      	bne.n	8000d68 <_close+0x34>
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	6003      	str	r3, [r0, #0]
 8000d64:	2000      	movs	r0, #0
 8000d66:	e7f1      	b.n	8000d4c <_close+0x18>
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	f7ff ffd6 	bl	8000d1a <_swiclose>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d1ec      	bne.n	8000d4c <_close+0x18>
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	6023      	str	r3, [r4, #0]
 8000d78:	e7e8      	b.n	8000d4c <_close+0x18>
 8000d7a:	bf00      	nop
 8000d7c:	200000b8 	.word	0x200000b8

08000d80 <_swistat>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	460c      	mov	r4, r1
 8000d84:	f7ff fefe 	bl	8000b84 <findslot>
 8000d88:	4605      	mov	r5, r0
 8000d8a:	b930      	cbnz	r0, 8000d9a <_swistat+0x1a>
 8000d8c:	f000 fbf2 	bl	8001574 <__errno>
 8000d90:	2309      	movs	r3, #9
 8000d92:	6003      	str	r3, [r0, #0]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	bd70      	pop	{r4, r5, r6, pc}
 8000d9a:	6863      	ldr	r3, [r4, #4]
 8000d9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da0:	6063      	str	r3, [r4, #4]
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	64a3      	str	r3, [r4, #72]	; 0x48
 8000da8:	260c      	movs	r6, #12
 8000daa:	4630      	mov	r0, r6
 8000dac:	4629      	mov	r1, r5
 8000dae:	beab      	bkpt	0x00ab
 8000db0:	4605      	mov	r5, r0
 8000db2:	4628      	mov	r0, r5
 8000db4:	f7ff ff0e 	bl	8000bd4 <checkerror>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	bf1c      	itt	ne
 8000dbc:	6120      	strne	r0, [r4, #16]
 8000dbe:	2000      	movne	r0, #0
 8000dc0:	e7ea      	b.n	8000d98 <_swistat+0x18>

08000dc2 <_fstat>:
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4604      	mov	r4, r0
 8000dca:	2258      	movs	r2, #88	; 0x58
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fb83 	bl	80014d8 <memset>
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dda:	f7ff bfd1 	b.w	8000d80 <_swistat>

08000dde <_stat>:
 8000dde:	b538      	push	{r3, r4, r5, lr}
 8000de0:	460d      	mov	r5, r1
 8000de2:	4604      	mov	r4, r0
 8000de4:	2258      	movs	r2, #88	; 0x58
 8000de6:	2100      	movs	r1, #0
 8000de8:	4628      	mov	r0, r5
 8000dea:	f000 fb75 	bl	80014d8 <memset>
 8000dee:	4620      	mov	r0, r4
 8000df0:	2100      	movs	r1, #0
 8000df2:	f000 f811 	bl	8000e18 <_swiopen>
 8000df6:	1c43      	adds	r3, r0, #1
 8000df8:	4604      	mov	r4, r0
 8000dfa:	d00b      	beq.n	8000e14 <_stat+0x36>
 8000dfc:	686b      	ldr	r3, [r5, #4]
 8000dfe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8000e02:	606b      	str	r3, [r5, #4]
 8000e04:	4629      	mov	r1, r5
 8000e06:	f7ff ffbb 	bl	8000d80 <_swistat>
 8000e0a:	4605      	mov	r5, r0
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff ff91 	bl	8000d34 <_close>
 8000e12:	462c      	mov	r4, r5
 8000e14:	4620      	mov	r0, r4
 8000e16:	bd38      	pop	{r3, r4, r5, pc}

08000e18 <_swiopen>:
 8000e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e1c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000ec8 <_swiopen+0xb0>
 8000e20:	b097      	sub	sp, #92	; 0x5c
 8000e22:	4607      	mov	r7, r0
 8000e24:	460e      	mov	r6, r1
 8000e26:	2500      	movs	r5, #0
 8000e28:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8000e2c:	1c61      	adds	r1, r4, #1
 8000e2e:	d037      	beq.n	8000ea0 <_swiopen+0x88>
 8000e30:	3501      	adds	r5, #1
 8000e32:	2d14      	cmp	r5, #20
 8000e34:	d1f8      	bne.n	8000e28 <_swiopen+0x10>
 8000e36:	f000 fb9d 	bl	8001574 <__errno>
 8000e3a:	2318      	movs	r3, #24
 8000e3c:	6003      	str	r3, [r0, #0]
 8000e3e:	f04f 34ff 	mov.w	r4, #4294967295
 8000e42:	e03d      	b.n	8000ec0 <_swiopen+0xa8>
 8000e44:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8000e48:	f240 6301 	movw	r3, #1537	; 0x601
 8000e4c:	07b2      	lsls	r2, r6, #30
 8000e4e:	bf48      	it	mi
 8000e50:	f044 0402 	orrmi.w	r4, r4, #2
 8000e54:	421e      	tst	r6, r3
 8000e56:	bf18      	it	ne
 8000e58:	f044 0404 	orrne.w	r4, r4, #4
 8000e5c:	0733      	lsls	r3, r6, #28
 8000e5e:	bf48      	it	mi
 8000e60:	f024 0404 	bicmi.w	r4, r4, #4
 8000e64:	4638      	mov	r0, r7
 8000e66:	bf48      	it	mi
 8000e68:	f044 0408 	orrmi.w	r4, r4, #8
 8000e6c:	9700      	str	r7, [sp, #0]
 8000e6e:	f7ff f9cf 	bl	8000210 <strlen>
 8000e72:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8000e76:	2401      	movs	r4, #1
 8000e78:	4620      	mov	r0, r4
 8000e7a:	4649      	mov	r1, r9
 8000e7c:	beab      	bkpt	0x00ab
 8000e7e:	4604      	mov	r4, r0
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	db08      	blt.n	8000e96 <_swiopen+0x7e>
 8000e84:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8000e88:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c8 3004 	str.w	r3, [r8, #4]
 8000e92:	462c      	mov	r4, r5
 8000e94:	e014      	b.n	8000ec0 <_swiopen+0xa8>
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff fe8e 	bl	8000bb8 <error>
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	e00f      	b.n	8000ec0 <_swiopen+0xa8>
 8000ea0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8000ea4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8000ea8:	46e9      	mov	r9, sp
 8000eaa:	d1cb      	bne.n	8000e44 <_swiopen+0x2c>
 8000eac:	4649      	mov	r1, r9
 8000eae:	4638      	mov	r0, r7
 8000eb0:	f7ff ff95 	bl	8000dde <_stat>
 8000eb4:	3001      	adds	r0, #1
 8000eb6:	d0c5      	beq.n	8000e44 <_swiopen+0x2c>
 8000eb8:	f000 fb5c 	bl	8001574 <__errno>
 8000ebc:	2311      	movs	r3, #17
 8000ebe:	6003      	str	r3, [r0, #0]
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	b017      	add	sp, #92	; 0x5c
 8000ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ec8:	200000b8 	.word	0x200000b8

08000ecc <_get_semihosting_exts>:
 8000ecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	460f      	mov	r7, r1
 8000ed4:	482a      	ldr	r0, [pc, #168]	; (8000f80 <_get_semihosting_exts+0xb4>)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4615      	mov	r5, r2
 8000eda:	f7ff ff9d 	bl	8000e18 <_swiopen>
 8000ede:	462a      	mov	r2, r5
 8000ee0:	4604      	mov	r4, r0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	f000 faf7 	bl	80014d8 <memset>
 8000eea:	1c63      	adds	r3, r4, #1
 8000eec:	d016      	beq.n	8000f1c <_get_semihosting_exts+0x50>
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fe48 	bl	8000b84 <findslot>
 8000ef4:	f04f 080c 	mov.w	r8, #12
 8000ef8:	4681      	mov	r9, r0
 8000efa:	4640      	mov	r0, r8
 8000efc:	4649      	mov	r1, r9
 8000efe:	beab      	bkpt	0x00ab
 8000f00:	4680      	mov	r8, r0
 8000f02:	4640      	mov	r0, r8
 8000f04:	f7ff fe66 	bl	8000bd4 <checkerror>
 8000f08:	2803      	cmp	r0, #3
 8000f0a:	dd02      	ble.n	8000f12 <_get_semihosting_exts+0x46>
 8000f0c:	1ec3      	subs	r3, r0, #3
 8000f0e:	42ab      	cmp	r3, r5
 8000f10:	dc08      	bgt.n	8000f24 <_get_semihosting_exts+0x58>
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff ff0e 	bl	8000d34 <_close>
 8000f18:	f04f 34ff 	mov.w	r4, #4294967295
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	b003      	add	sp, #12
 8000f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f24:	2204      	movs	r2, #4
 8000f26:	eb0d 0102 	add.w	r1, sp, r2
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff fe67 	bl	8000bfe <_read>
 8000f30:	2803      	cmp	r0, #3
 8000f32:	ddee      	ble.n	8000f12 <_get_semihosting_exts+0x46>
 8000f34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f38:	2b53      	cmp	r3, #83	; 0x53
 8000f3a:	d1ea      	bne.n	8000f12 <_get_semihosting_exts+0x46>
 8000f3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000f40:	2b48      	cmp	r3, #72	; 0x48
 8000f42:	d1e6      	bne.n	8000f12 <_get_semihosting_exts+0x46>
 8000f44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000f48:	2b46      	cmp	r3, #70	; 0x46
 8000f4a:	d1e2      	bne.n	8000f12 <_get_semihosting_exts+0x46>
 8000f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f50:	2b42      	cmp	r3, #66	; 0x42
 8000f52:	d1de      	bne.n	8000f12 <_get_semihosting_exts+0x46>
 8000f54:	2201      	movs	r2, #1
 8000f56:	4639      	mov	r1, r7
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff fe6c 	bl	8000c36 <_swilseek>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	dbd7      	blt.n	8000f12 <_get_semihosting_exts+0x46>
 8000f62:	462a      	mov	r2, r5
 8000f64:	4631      	mov	r1, r6
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff fe49 	bl	8000bfe <_read>
 8000f6c:	4605      	mov	r5, r0
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f7ff fee0 	bl	8000d34 <_close>
 8000f74:	4628      	mov	r0, r5
 8000f76:	f7ff fe2d 	bl	8000bd4 <checkerror>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	e7ce      	b.n	8000f1c <_get_semihosting_exts+0x50>
 8000f7e:	bf00      	nop
 8000f80:	08002083 	.word	0x08002083

08000f84 <initialise_semihosting_exts>:
 8000f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f86:	4d0a      	ldr	r5, [pc, #40]	; (8000fb0 <initialise_semihosting_exts+0x2c>)
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <initialise_semihosting_exts+0x30>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	a801      	add	r0, sp, #4
 8000f90:	6029      	str	r1, [r5, #0]
 8000f92:	6022      	str	r2, [r4, #0]
 8000f94:	f7ff ff9a 	bl	8000ecc <_get_semihosting_exts>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	dd07      	ble.n	8000fac <initialise_semihosting_exts+0x28>
 8000f9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000fa0:	f003 0201 	and.w	r2, r3, #1
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	602a      	str	r2, [r5, #0]
 8000faa:	6023      	str	r3, [r4, #0]
 8000fac:	b003      	add	sp, #12
 8000fae:	bd30      	pop	{r4, r5, pc}
 8000fb0:	2000001c 	.word	0x2000001c
 8000fb4:	20000020 	.word	0x20000020

08000fb8 <_has_ext_stdout_stderr>:
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	4c04      	ldr	r4, [pc, #16]	; (8000fcc <_has_ext_stdout_stderr+0x14>)
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da01      	bge.n	8000fc6 <_has_ext_stdout_stderr+0xe>
 8000fc2:	f7ff ffdf 	bl	8000f84 <initialise_semihosting_exts>
 8000fc6:	6820      	ldr	r0, [r4, #0]
 8000fc8:	bd10      	pop	{r4, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000020 	.word	0x20000020

08000fd0 <initialise_monitor_handles>:
 8000fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001088 <initialise_monitor_handles+0xb8>
 8000fda:	f8cd 9004 	str.w	r9, [sp, #4]
 8000fde:	2303      	movs	r3, #3
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	9303      	str	r3, [sp, #12]
 8000fe4:	af01      	add	r7, sp, #4
 8000fe6:	9402      	str	r4, [sp, #8]
 8000fe8:	2501      	movs	r5, #1
 8000fea:	4628      	mov	r0, r5
 8000fec:	4639      	mov	r1, r7
 8000fee:	beab      	bkpt	0x00ab
 8000ff0:	4605      	mov	r5, r0
 8000ff2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800108c <initialise_monitor_handles+0xbc>
 8000ff6:	4623      	mov	r3, r4
 8000ff8:	4c20      	ldr	r4, [pc, #128]	; (800107c <initialise_monitor_handles+0xac>)
 8000ffa:	f8c8 5000 	str.w	r5, [r8]
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8001002:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001006:	3301      	adds	r3, #1
 8001008:	2b14      	cmp	r3, #20
 800100a:	d1fa      	bne.n	8001002 <initialise_monitor_handles+0x32>
 800100c:	f7ff ffd4 	bl	8000fb8 <_has_ext_stdout_stderr>
 8001010:	4d1b      	ldr	r5, [pc, #108]	; (8001080 <initialise_monitor_handles+0xb0>)
 8001012:	b1d0      	cbz	r0, 800104a <initialise_monitor_handles+0x7a>
 8001014:	f04f 0a03 	mov.w	sl, #3
 8001018:	2304      	movs	r3, #4
 800101a:	f8cd 9004 	str.w	r9, [sp, #4]
 800101e:	2601      	movs	r6, #1
 8001020:	f8cd a00c 	str.w	sl, [sp, #12]
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	4630      	mov	r0, r6
 8001028:	4639      	mov	r1, r7
 800102a:	beab      	bkpt	0x00ab
 800102c:	4683      	mov	fp, r0
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <initialise_monitor_handles+0xb4>)
 8001030:	f8cd 9004 	str.w	r9, [sp, #4]
 8001034:	f8c3 b000 	str.w	fp, [r3]
 8001038:	2308      	movs	r3, #8
 800103a:	f8cd a00c 	str.w	sl, [sp, #12]
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	4630      	mov	r0, r6
 8001042:	4639      	mov	r1, r7
 8001044:	beab      	bkpt	0x00ab
 8001046:	4606      	mov	r6, r0
 8001048:	602e      	str	r6, [r5, #0]
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	bf02      	ittt	eq
 8001050:	4b0c      	ldreq	r3, [pc, #48]	; (8001084 <initialise_monitor_handles+0xb4>)
 8001052:	681b      	ldreq	r3, [r3, #0]
 8001054:	602b      	streq	r3, [r5, #0]
 8001056:	2600      	movs	r6, #0
 8001058:	f8d8 3000 	ldr.w	r3, [r8]
 800105c:	6023      	str	r3, [r4, #0]
 800105e:	6066      	str	r6, [r4, #4]
 8001060:	f7ff ffaa 	bl	8000fb8 <_has_ext_stdout_stderr>
 8001064:	b130      	cbz	r0, 8001074 <initialise_monitor_handles+0xa4>
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <initialise_monitor_handles+0xb4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800106e:	682b      	ldr	r3, [r5, #0]
 8001070:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001074:	b005      	add	sp, #20
 8001076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800107a:	bf00      	nop
 800107c:	200000b8 	.word	0x200000b8
 8001080:	200000ac 	.word	0x200000ac
 8001084:	200000b4 	.word	0x200000b4
 8001088:	08002099 	.word	0x08002099
 800108c:	200000b0 	.word	0x200000b0

08001090 <_isatty>:
 8001090:	b570      	push	{r4, r5, r6, lr}
 8001092:	f7ff fd77 	bl	8000b84 <findslot>
 8001096:	2509      	movs	r5, #9
 8001098:	4604      	mov	r4, r0
 800109a:	b920      	cbnz	r0, 80010a6 <_isatty+0x16>
 800109c:	f000 fa6a 	bl	8001574 <__errno>
 80010a0:	6005      	str	r5, [r0, #0]
 80010a2:	4620      	mov	r0, r4
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
 80010a6:	4628      	mov	r0, r5
 80010a8:	4621      	mov	r1, r4
 80010aa:	beab      	bkpt	0x00ab
 80010ac:	4604      	mov	r4, r0
 80010ae:	2c01      	cmp	r4, #1
 80010b0:	d0f7      	beq.n	80010a2 <_isatty+0x12>
 80010b2:	f000 fa5f 	bl	8001574 <__errno>
 80010b6:	2400      	movs	r4, #0
 80010b8:	4605      	mov	r5, r0
 80010ba:	2613      	movs	r6, #19
 80010bc:	4630      	mov	r0, r6
 80010be:	4621      	mov	r1, r4
 80010c0:	beab      	bkpt	0x00ab
 80010c2:	4606      	mov	r6, r0
 80010c4:	602e      	str	r6, [r5, #0]
 80010c6:	e7ec      	b.n	80010a2 <_isatty+0x12>

080010c8 <std>:
 80010c8:	2300      	movs	r3, #0
 80010ca:	b510      	push	{r4, lr}
 80010cc:	4604      	mov	r4, r0
 80010ce:	e9c0 3300 	strd	r3, r3, [r0]
 80010d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010d6:	6083      	str	r3, [r0, #8]
 80010d8:	8181      	strh	r1, [r0, #12]
 80010da:	6643      	str	r3, [r0, #100]	; 0x64
 80010dc:	81c2      	strh	r2, [r0, #14]
 80010de:	6183      	str	r3, [r0, #24]
 80010e0:	4619      	mov	r1, r3
 80010e2:	2208      	movs	r2, #8
 80010e4:	305c      	adds	r0, #92	; 0x5c
 80010e6:	f000 f9f7 	bl	80014d8 <memset>
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <std+0x58>)
 80010ec:	6263      	str	r3, [r4, #36]	; 0x24
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <std+0x5c>)
 80010f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <std+0x60>)
 80010f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <std+0x64>)
 80010f8:	6323      	str	r3, [r4, #48]	; 0x30
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <std+0x68>)
 80010fc:	6224      	str	r4, [r4, #32]
 80010fe:	429c      	cmp	r4, r3
 8001100:	d006      	beq.n	8001110 <std+0x48>
 8001102:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001106:	4294      	cmp	r4, r2
 8001108:	d002      	beq.n	8001110 <std+0x48>
 800110a:	33d0      	adds	r3, #208	; 0xd0
 800110c:	429c      	cmp	r4, r3
 800110e:	d105      	bne.n	800111c <std+0x54>
 8001110:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001118:	f000 ba56 	b.w	80015c8 <__retarget_lock_init_recursive>
 800111c:	bd10      	pop	{r4, pc}
 800111e:	bf00      	nop
 8001120:	08001329 	.word	0x08001329
 8001124:	0800134b 	.word	0x0800134b
 8001128:	08001383 	.word	0x08001383
 800112c:	080013a7 	.word	0x080013a7
 8001130:	20000158 	.word	0x20000158

08001134 <stdio_exit_handler>:
 8001134:	4a02      	ldr	r2, [pc, #8]	; (8001140 <stdio_exit_handler+0xc>)
 8001136:	4903      	ldr	r1, [pc, #12]	; (8001144 <stdio_exit_handler+0x10>)
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <stdio_exit_handler+0x14>)
 800113a:	f000 b869 	b.w	8001210 <_fwalk_sglue>
 800113e:	bf00      	nop
 8001140:	20000024 	.word	0x20000024
 8001144:	08001e75 	.word	0x08001e75
 8001148:	20000030 	.word	0x20000030

0800114c <cleanup_stdio>:
 800114c:	6841      	ldr	r1, [r0, #4]
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <cleanup_stdio+0x34>)
 8001150:	4299      	cmp	r1, r3
 8001152:	b510      	push	{r4, lr}
 8001154:	4604      	mov	r4, r0
 8001156:	d001      	beq.n	800115c <cleanup_stdio+0x10>
 8001158:	f000 fe8c 	bl	8001e74 <_fflush_r>
 800115c:	68a1      	ldr	r1, [r4, #8]
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <cleanup_stdio+0x38>)
 8001160:	4299      	cmp	r1, r3
 8001162:	d002      	beq.n	800116a <cleanup_stdio+0x1e>
 8001164:	4620      	mov	r0, r4
 8001166:	f000 fe85 	bl	8001e74 <_fflush_r>
 800116a:	68e1      	ldr	r1, [r4, #12]
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <cleanup_stdio+0x3c>)
 800116e:	4299      	cmp	r1, r3
 8001170:	d004      	beq.n	800117c <cleanup_stdio+0x30>
 8001172:	4620      	mov	r0, r4
 8001174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001178:	f000 be7c 	b.w	8001e74 <_fflush_r>
 800117c:	bd10      	pop	{r4, pc}
 800117e:	bf00      	nop
 8001180:	20000158 	.word	0x20000158
 8001184:	200001c0 	.word	0x200001c0
 8001188:	20000228 	.word	0x20000228

0800118c <global_stdio_init.part.0>:
 800118c:	b510      	push	{r4, lr}
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <global_stdio_init.part.0+0x30>)
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <global_stdio_init.part.0+0x34>)
 8001192:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <global_stdio_init.part.0+0x38>)
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	4620      	mov	r0, r4
 8001198:	2200      	movs	r2, #0
 800119a:	2104      	movs	r1, #4
 800119c:	f7ff ff94 	bl	80010c8 <std>
 80011a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80011a4:	2201      	movs	r2, #1
 80011a6:	2109      	movs	r1, #9
 80011a8:	f7ff ff8e 	bl	80010c8 <std>
 80011ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80011b0:	2202      	movs	r2, #2
 80011b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b6:	2112      	movs	r1, #18
 80011b8:	f7ff bf86 	b.w	80010c8 <std>
 80011bc:	20000290 	.word	0x20000290
 80011c0:	20000158 	.word	0x20000158
 80011c4:	08001135 	.word	0x08001135

080011c8 <__sfp_lock_acquire>:
 80011c8:	4801      	ldr	r0, [pc, #4]	; (80011d0 <__sfp_lock_acquire+0x8>)
 80011ca:	f000 b9fe 	b.w	80015ca <__retarget_lock_acquire_recursive>
 80011ce:	bf00      	nop
 80011d0:	20000299 	.word	0x20000299

080011d4 <__sfp_lock_release>:
 80011d4:	4801      	ldr	r0, [pc, #4]	; (80011dc <__sfp_lock_release+0x8>)
 80011d6:	f000 b9f9 	b.w	80015cc <__retarget_lock_release_recursive>
 80011da:	bf00      	nop
 80011dc:	20000299 	.word	0x20000299

080011e0 <__sinit>:
 80011e0:	b510      	push	{r4, lr}
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff fff0 	bl	80011c8 <__sfp_lock_acquire>
 80011e8:	6a23      	ldr	r3, [r4, #32]
 80011ea:	b11b      	cbz	r3, 80011f4 <__sinit+0x14>
 80011ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011f0:	f7ff bff0 	b.w	80011d4 <__sfp_lock_release>
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__sinit+0x28>)
 80011f6:	6223      	str	r3, [r4, #32]
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__sinit+0x2c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f5      	bne.n	80011ec <__sinit+0xc>
 8001200:	f7ff ffc4 	bl	800118c <global_stdio_init.part.0>
 8001204:	e7f2      	b.n	80011ec <__sinit+0xc>
 8001206:	bf00      	nop
 8001208:	0800114d 	.word	0x0800114d
 800120c:	20000290 	.word	0x20000290

08001210 <_fwalk_sglue>:
 8001210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001214:	4607      	mov	r7, r0
 8001216:	4688      	mov	r8, r1
 8001218:	4614      	mov	r4, r2
 800121a:	2600      	movs	r6, #0
 800121c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001220:	f1b9 0901 	subs.w	r9, r9, #1
 8001224:	d505      	bpl.n	8001232 <_fwalk_sglue+0x22>
 8001226:	6824      	ldr	r4, [r4, #0]
 8001228:	2c00      	cmp	r4, #0
 800122a:	d1f7      	bne.n	800121c <_fwalk_sglue+0xc>
 800122c:	4630      	mov	r0, r6
 800122e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001232:	89ab      	ldrh	r3, [r5, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d907      	bls.n	8001248 <_fwalk_sglue+0x38>
 8001238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800123c:	3301      	adds	r3, #1
 800123e:	d003      	beq.n	8001248 <_fwalk_sglue+0x38>
 8001240:	4629      	mov	r1, r5
 8001242:	4638      	mov	r0, r7
 8001244:	47c0      	blx	r8
 8001246:	4306      	orrs	r6, r0
 8001248:	3568      	adds	r5, #104	; 0x68
 800124a:	e7e9      	b.n	8001220 <_fwalk_sglue+0x10>

0800124c <iprintf>:
 800124c:	b40f      	push	{r0, r1, r2, r3}
 800124e:	b507      	push	{r0, r1, r2, lr}
 8001250:	4906      	ldr	r1, [pc, #24]	; (800126c <iprintf+0x20>)
 8001252:	ab04      	add	r3, sp, #16
 8001254:	6808      	ldr	r0, [r1, #0]
 8001256:	f853 2b04 	ldr.w	r2, [r3], #4
 800125a:	6881      	ldr	r1, [r0, #8]
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f000 fad9 	bl	8001814 <_vfiprintf_r>
 8001262:	b003      	add	sp, #12
 8001264:	f85d eb04 	ldr.w	lr, [sp], #4
 8001268:	b004      	add	sp, #16
 800126a:	4770      	bx	lr
 800126c:	2000007c 	.word	0x2000007c

08001270 <_puts_r>:
 8001270:	6a03      	ldr	r3, [r0, #32]
 8001272:	b570      	push	{r4, r5, r6, lr}
 8001274:	6884      	ldr	r4, [r0, #8]
 8001276:	4605      	mov	r5, r0
 8001278:	460e      	mov	r6, r1
 800127a:	b90b      	cbnz	r3, 8001280 <_puts_r+0x10>
 800127c:	f7ff ffb0 	bl	80011e0 <__sinit>
 8001280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001282:	07db      	lsls	r3, r3, #31
 8001284:	d405      	bmi.n	8001292 <_puts_r+0x22>
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	0598      	lsls	r0, r3, #22
 800128a:	d402      	bmi.n	8001292 <_puts_r+0x22>
 800128c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800128e:	f000 f99c 	bl	80015ca <__retarget_lock_acquire_recursive>
 8001292:	89a3      	ldrh	r3, [r4, #12]
 8001294:	0719      	lsls	r1, r3, #28
 8001296:	d513      	bpl.n	80012c0 <_puts_r+0x50>
 8001298:	6923      	ldr	r3, [r4, #16]
 800129a:	b18b      	cbz	r3, 80012c0 <_puts_r+0x50>
 800129c:	3e01      	subs	r6, #1
 800129e:	68a3      	ldr	r3, [r4, #8]
 80012a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80012a4:	3b01      	subs	r3, #1
 80012a6:	60a3      	str	r3, [r4, #8]
 80012a8:	b9e9      	cbnz	r1, 80012e6 <_puts_r+0x76>
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da2e      	bge.n	800130c <_puts_r+0x9c>
 80012ae:	4622      	mov	r2, r4
 80012b0:	210a      	movs	r1, #10
 80012b2:	4628      	mov	r0, r5
 80012b4:	f000 f87b 	bl	80013ae <__swbuf_r>
 80012b8:	3001      	adds	r0, #1
 80012ba:	d007      	beq.n	80012cc <_puts_r+0x5c>
 80012bc:	250a      	movs	r5, #10
 80012be:	e007      	b.n	80012d0 <_puts_r+0x60>
 80012c0:	4621      	mov	r1, r4
 80012c2:	4628      	mov	r0, r5
 80012c4:	f000 f8b0 	bl	8001428 <__swsetup_r>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d0e7      	beq.n	800129c <_puts_r+0x2c>
 80012cc:	f04f 35ff 	mov.w	r5, #4294967295
 80012d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012d2:	07da      	lsls	r2, r3, #31
 80012d4:	d405      	bmi.n	80012e2 <_puts_r+0x72>
 80012d6:	89a3      	ldrh	r3, [r4, #12]
 80012d8:	059b      	lsls	r3, r3, #22
 80012da:	d402      	bmi.n	80012e2 <_puts_r+0x72>
 80012dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012de:	f000 f975 	bl	80015cc <__retarget_lock_release_recursive>
 80012e2:	4628      	mov	r0, r5
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da04      	bge.n	80012f4 <_puts_r+0x84>
 80012ea:	69a2      	ldr	r2, [r4, #24]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dc06      	bgt.n	80012fe <_puts_r+0x8e>
 80012f0:	290a      	cmp	r1, #10
 80012f2:	d004      	beq.n	80012fe <_puts_r+0x8e>
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	6022      	str	r2, [r4, #0]
 80012fa:	7019      	strb	r1, [r3, #0]
 80012fc:	e7cf      	b.n	800129e <_puts_r+0x2e>
 80012fe:	4622      	mov	r2, r4
 8001300:	4628      	mov	r0, r5
 8001302:	f000 f854 	bl	80013ae <__swbuf_r>
 8001306:	3001      	adds	r0, #1
 8001308:	d1c9      	bne.n	800129e <_puts_r+0x2e>
 800130a:	e7df      	b.n	80012cc <_puts_r+0x5c>
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	250a      	movs	r5, #10
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	6022      	str	r2, [r4, #0]
 8001314:	701d      	strb	r5, [r3, #0]
 8001316:	e7db      	b.n	80012d0 <_puts_r+0x60>

08001318 <puts>:
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <puts+0xc>)
 800131a:	4601      	mov	r1, r0
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	f7ff bfa7 	b.w	8001270 <_puts_r>
 8001322:	bf00      	nop
 8001324:	2000007c 	.word	0x2000007c

08001328 <__sread>:
 8001328:	b510      	push	{r4, lr}
 800132a:	460c      	mov	r4, r1
 800132c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001330:	f000 f8fc 	bl	800152c <_read_r>
 8001334:	2800      	cmp	r0, #0
 8001336:	bfab      	itete	ge
 8001338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800133a:	89a3      	ldrhlt	r3, [r4, #12]
 800133c:	181b      	addge	r3, r3, r0
 800133e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001342:	bfac      	ite	ge
 8001344:	6563      	strge	r3, [r4, #84]	; 0x54
 8001346:	81a3      	strhlt	r3, [r4, #12]
 8001348:	bd10      	pop	{r4, pc}

0800134a <__swrite>:
 800134a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134e:	461f      	mov	r7, r3
 8001350:	898b      	ldrh	r3, [r1, #12]
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	4605      	mov	r5, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4616      	mov	r6, r2
 800135a:	d505      	bpl.n	8001368 <__swrite+0x1e>
 800135c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001360:	2302      	movs	r3, #2
 8001362:	2200      	movs	r2, #0
 8001364:	f000 f8d0 	bl	8001508 <_lseek_r>
 8001368:	89a3      	ldrh	r3, [r4, #12]
 800136a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800136e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001372:	81a3      	strh	r3, [r4, #12]
 8001374:	4632      	mov	r2, r6
 8001376:	463b      	mov	r3, r7
 8001378:	4628      	mov	r0, r5
 800137a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800137e:	f000 b8e7 	b.w	8001550 <_write_r>

08001382 <__sseek>:
 8001382:	b510      	push	{r4, lr}
 8001384:	460c      	mov	r4, r1
 8001386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800138a:	f000 f8bd 	bl	8001508 <_lseek_r>
 800138e:	1c43      	adds	r3, r0, #1
 8001390:	89a3      	ldrh	r3, [r4, #12]
 8001392:	bf15      	itete	ne
 8001394:	6560      	strne	r0, [r4, #84]	; 0x54
 8001396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800139a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800139e:	81a3      	strheq	r3, [r4, #12]
 80013a0:	bf18      	it	ne
 80013a2:	81a3      	strhne	r3, [r4, #12]
 80013a4:	bd10      	pop	{r4, pc}

080013a6 <__sclose>:
 80013a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013aa:	f000 b89d 	b.w	80014e8 <_close_r>

080013ae <__swbuf_r>:
 80013ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b0:	460e      	mov	r6, r1
 80013b2:	4614      	mov	r4, r2
 80013b4:	4605      	mov	r5, r0
 80013b6:	b118      	cbz	r0, 80013c0 <__swbuf_r+0x12>
 80013b8:	6a03      	ldr	r3, [r0, #32]
 80013ba:	b90b      	cbnz	r3, 80013c0 <__swbuf_r+0x12>
 80013bc:	f7ff ff10 	bl	80011e0 <__sinit>
 80013c0:	69a3      	ldr	r3, [r4, #24]
 80013c2:	60a3      	str	r3, [r4, #8]
 80013c4:	89a3      	ldrh	r3, [r4, #12]
 80013c6:	071a      	lsls	r2, r3, #28
 80013c8:	d525      	bpl.n	8001416 <__swbuf_r+0x68>
 80013ca:	6923      	ldr	r3, [r4, #16]
 80013cc:	b31b      	cbz	r3, 8001416 <__swbuf_r+0x68>
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	6922      	ldr	r2, [r4, #16]
 80013d2:	1a98      	subs	r0, r3, r2
 80013d4:	6963      	ldr	r3, [r4, #20]
 80013d6:	b2f6      	uxtb	r6, r6
 80013d8:	4283      	cmp	r3, r0
 80013da:	4637      	mov	r7, r6
 80013dc:	dc04      	bgt.n	80013e8 <__swbuf_r+0x3a>
 80013de:	4621      	mov	r1, r4
 80013e0:	4628      	mov	r0, r5
 80013e2:	f000 fd47 	bl	8001e74 <_fflush_r>
 80013e6:	b9e0      	cbnz	r0, 8001422 <__swbuf_r+0x74>
 80013e8:	68a3      	ldr	r3, [r4, #8]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	60a3      	str	r3, [r4, #8]
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	6022      	str	r2, [r4, #0]
 80013f4:	701e      	strb	r6, [r3, #0]
 80013f6:	6962      	ldr	r2, [r4, #20]
 80013f8:	1c43      	adds	r3, r0, #1
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d004      	beq.n	8001408 <__swbuf_r+0x5a>
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	07db      	lsls	r3, r3, #31
 8001402:	d506      	bpl.n	8001412 <__swbuf_r+0x64>
 8001404:	2e0a      	cmp	r6, #10
 8001406:	d104      	bne.n	8001412 <__swbuf_r+0x64>
 8001408:	4621      	mov	r1, r4
 800140a:	4628      	mov	r0, r5
 800140c:	f000 fd32 	bl	8001e74 <_fflush_r>
 8001410:	b938      	cbnz	r0, 8001422 <__swbuf_r+0x74>
 8001412:	4638      	mov	r0, r7
 8001414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001416:	4621      	mov	r1, r4
 8001418:	4628      	mov	r0, r5
 800141a:	f000 f805 	bl	8001428 <__swsetup_r>
 800141e:	2800      	cmp	r0, #0
 8001420:	d0d5      	beq.n	80013ce <__swbuf_r+0x20>
 8001422:	f04f 37ff 	mov.w	r7, #4294967295
 8001426:	e7f4      	b.n	8001412 <__swbuf_r+0x64>

08001428 <__swsetup_r>:
 8001428:	b538      	push	{r3, r4, r5, lr}
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <__swsetup_r+0xac>)
 800142c:	4605      	mov	r5, r0
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	460c      	mov	r4, r1
 8001432:	b118      	cbz	r0, 800143c <__swsetup_r+0x14>
 8001434:	6a03      	ldr	r3, [r0, #32]
 8001436:	b90b      	cbnz	r3, 800143c <__swsetup_r+0x14>
 8001438:	f7ff fed2 	bl	80011e0 <__sinit>
 800143c:	89a3      	ldrh	r3, [r4, #12]
 800143e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001442:	0718      	lsls	r0, r3, #28
 8001444:	d422      	bmi.n	800148c <__swsetup_r+0x64>
 8001446:	06d9      	lsls	r1, r3, #27
 8001448:	d407      	bmi.n	800145a <__swsetup_r+0x32>
 800144a:	2309      	movs	r3, #9
 800144c:	602b      	str	r3, [r5, #0]
 800144e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001452:	81a3      	strh	r3, [r4, #12]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	e034      	b.n	80014c4 <__swsetup_r+0x9c>
 800145a:	0758      	lsls	r0, r3, #29
 800145c:	d512      	bpl.n	8001484 <__swsetup_r+0x5c>
 800145e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001460:	b141      	cbz	r1, 8001474 <__swsetup_r+0x4c>
 8001462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001466:	4299      	cmp	r1, r3
 8001468:	d002      	beq.n	8001470 <__swsetup_r+0x48>
 800146a:	4628      	mov	r0, r5
 800146c:	f000 f8b0 	bl	80015d0 <_free_r>
 8001470:	2300      	movs	r3, #0
 8001472:	6363      	str	r3, [r4, #52]	; 0x34
 8001474:	89a3      	ldrh	r3, [r4, #12]
 8001476:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800147a:	81a3      	strh	r3, [r4, #12]
 800147c:	2300      	movs	r3, #0
 800147e:	6063      	str	r3, [r4, #4]
 8001480:	6923      	ldr	r3, [r4, #16]
 8001482:	6023      	str	r3, [r4, #0]
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	81a3      	strh	r3, [r4, #12]
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	b94b      	cbnz	r3, 80014a4 <__swsetup_r+0x7c>
 8001490:	89a3      	ldrh	r3, [r4, #12]
 8001492:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149a:	d003      	beq.n	80014a4 <__swsetup_r+0x7c>
 800149c:	4621      	mov	r1, r4
 800149e:	4628      	mov	r0, r5
 80014a0:	f000 fd36 	bl	8001f10 <__smakebuf_r>
 80014a4:	89a0      	ldrh	r0, [r4, #12]
 80014a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014aa:	f010 0301 	ands.w	r3, r0, #1
 80014ae:	d00a      	beq.n	80014c6 <__swsetup_r+0x9e>
 80014b0:	2300      	movs	r3, #0
 80014b2:	60a3      	str	r3, [r4, #8]
 80014b4:	6963      	ldr	r3, [r4, #20]
 80014b6:	425b      	negs	r3, r3
 80014b8:	61a3      	str	r3, [r4, #24]
 80014ba:	6923      	ldr	r3, [r4, #16]
 80014bc:	b943      	cbnz	r3, 80014d0 <__swsetup_r+0xa8>
 80014be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014c2:	d1c4      	bne.n	800144e <__swsetup_r+0x26>
 80014c4:	bd38      	pop	{r3, r4, r5, pc}
 80014c6:	0781      	lsls	r1, r0, #30
 80014c8:	bf58      	it	pl
 80014ca:	6963      	ldrpl	r3, [r4, #20]
 80014cc:	60a3      	str	r3, [r4, #8]
 80014ce:	e7f4      	b.n	80014ba <__swsetup_r+0x92>
 80014d0:	2000      	movs	r0, #0
 80014d2:	e7f7      	b.n	80014c4 <__swsetup_r+0x9c>
 80014d4:	2000007c 	.word	0x2000007c

080014d8 <memset>:
 80014d8:	4402      	add	r2, r0
 80014da:	4603      	mov	r3, r0
 80014dc:	4293      	cmp	r3, r2
 80014de:	d100      	bne.n	80014e2 <memset+0xa>
 80014e0:	4770      	bx	lr
 80014e2:	f803 1b01 	strb.w	r1, [r3], #1
 80014e6:	e7f9      	b.n	80014dc <memset+0x4>

080014e8 <_close_r>:
 80014e8:	b538      	push	{r3, r4, r5, lr}
 80014ea:	4d06      	ldr	r5, [pc, #24]	; (8001504 <_close_r+0x1c>)
 80014ec:	2300      	movs	r3, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	602b      	str	r3, [r5, #0]
 80014f4:	f7ff fc1e 	bl	8000d34 <_close>
 80014f8:	1c43      	adds	r3, r0, #1
 80014fa:	d102      	bne.n	8001502 <_close_r+0x1a>
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	b103      	cbz	r3, 8001502 <_close_r+0x1a>
 8001500:	6023      	str	r3, [r4, #0]
 8001502:	bd38      	pop	{r3, r4, r5, pc}
 8001504:	20000294 	.word	0x20000294

08001508 <_lseek_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4d07      	ldr	r5, [pc, #28]	; (8001528 <_lseek_r+0x20>)
 800150c:	4604      	mov	r4, r0
 800150e:	4608      	mov	r0, r1
 8001510:	4611      	mov	r1, r2
 8001512:	2200      	movs	r2, #0
 8001514:	602a      	str	r2, [r5, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	f7ff fbc9 	bl	8000cae <_lseek>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d102      	bne.n	8001526 <_lseek_r+0x1e>
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	b103      	cbz	r3, 8001526 <_lseek_r+0x1e>
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	bd38      	pop	{r3, r4, r5, pc}
 8001528:	20000294 	.word	0x20000294

0800152c <_read_r>:
 800152c:	b538      	push	{r3, r4, r5, lr}
 800152e:	4d07      	ldr	r5, [pc, #28]	; (800154c <_read_r+0x20>)
 8001530:	4604      	mov	r4, r0
 8001532:	4608      	mov	r0, r1
 8001534:	4611      	mov	r1, r2
 8001536:	2200      	movs	r2, #0
 8001538:	602a      	str	r2, [r5, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	f7ff fb5f 	bl	8000bfe <_read>
 8001540:	1c43      	adds	r3, r0, #1
 8001542:	d102      	bne.n	800154a <_read_r+0x1e>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	b103      	cbz	r3, 800154a <_read_r+0x1e>
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	20000294 	.word	0x20000294

08001550 <_write_r>:
 8001550:	b538      	push	{r3, r4, r5, lr}
 8001552:	4d07      	ldr	r5, [pc, #28]	; (8001570 <_write_r+0x20>)
 8001554:	4604      	mov	r4, r0
 8001556:	4608      	mov	r0, r1
 8001558:	4611      	mov	r1, r2
 800155a:	2200      	movs	r2, #0
 800155c:	602a      	str	r2, [r5, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	f7ff fbb7 	bl	8000cd2 <_write>
 8001564:	1c43      	adds	r3, r0, #1
 8001566:	d102      	bne.n	800156e <_write_r+0x1e>
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	b103      	cbz	r3, 800156e <_write_r+0x1e>
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	bd38      	pop	{r3, r4, r5, pc}
 8001570:	20000294 	.word	0x20000294

08001574 <__errno>:
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <__errno+0x8>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	2000007c 	.word	0x2000007c

08001580 <__libc_init_array>:
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	4d0d      	ldr	r5, [pc, #52]	; (80015b8 <__libc_init_array+0x38>)
 8001584:	4c0d      	ldr	r4, [pc, #52]	; (80015bc <__libc_init_array+0x3c>)
 8001586:	1b64      	subs	r4, r4, r5
 8001588:	10a4      	asrs	r4, r4, #2
 800158a:	2600      	movs	r6, #0
 800158c:	42a6      	cmp	r6, r4
 800158e:	d109      	bne.n	80015a4 <__libc_init_array+0x24>
 8001590:	4d0b      	ldr	r5, [pc, #44]	; (80015c0 <__libc_init_array+0x40>)
 8001592:	4c0c      	ldr	r4, [pc, #48]	; (80015c4 <__libc_init_array+0x44>)
 8001594:	f000 fd2a 	bl	8001fec <_init>
 8001598:	1b64      	subs	r4, r4, r5
 800159a:	10a4      	asrs	r4, r4, #2
 800159c:	2600      	movs	r6, #0
 800159e:	42a6      	cmp	r6, r4
 80015a0:	d105      	bne.n	80015ae <__libc_init_array+0x2e>
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
 80015a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015a8:	4798      	blx	r3
 80015aa:	3601      	adds	r6, #1
 80015ac:	e7ee      	b.n	800158c <__libc_init_array+0xc>
 80015ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b2:	4798      	blx	r3
 80015b4:	3601      	adds	r6, #1
 80015b6:	e7f2      	b.n	800159e <__libc_init_array+0x1e>
 80015b8:	080020d0 	.word	0x080020d0
 80015bc:	080020d0 	.word	0x080020d0
 80015c0:	080020d0 	.word	0x080020d0
 80015c4:	080020d4 	.word	0x080020d4

080015c8 <__retarget_lock_init_recursive>:
 80015c8:	4770      	bx	lr

080015ca <__retarget_lock_acquire_recursive>:
 80015ca:	4770      	bx	lr

080015cc <__retarget_lock_release_recursive>:
 80015cc:	4770      	bx	lr
	...

080015d0 <_free_r>:
 80015d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015d2:	2900      	cmp	r1, #0
 80015d4:	d044      	beq.n	8001660 <_free_r+0x90>
 80015d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015da:	9001      	str	r0, [sp, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f1a1 0404 	sub.w	r4, r1, #4
 80015e2:	bfb8      	it	lt
 80015e4:	18e4      	addlt	r4, r4, r3
 80015e6:	f000 f8df 	bl	80017a8 <__malloc_lock>
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <_free_r+0x94>)
 80015ec:	9801      	ldr	r0, [sp, #4]
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	b933      	cbnz	r3, 8001600 <_free_r+0x30>
 80015f2:	6063      	str	r3, [r4, #4]
 80015f4:	6014      	str	r4, [r2, #0]
 80015f6:	b003      	add	sp, #12
 80015f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80015fc:	f000 b8da 	b.w	80017b4 <__malloc_unlock>
 8001600:	42a3      	cmp	r3, r4
 8001602:	d908      	bls.n	8001616 <_free_r+0x46>
 8001604:	6825      	ldr	r5, [r4, #0]
 8001606:	1961      	adds	r1, r4, r5
 8001608:	428b      	cmp	r3, r1
 800160a:	bf01      	itttt	eq
 800160c:	6819      	ldreq	r1, [r3, #0]
 800160e:	685b      	ldreq	r3, [r3, #4]
 8001610:	1949      	addeq	r1, r1, r5
 8001612:	6021      	streq	r1, [r4, #0]
 8001614:	e7ed      	b.n	80015f2 <_free_r+0x22>
 8001616:	461a      	mov	r2, r3
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	b10b      	cbz	r3, 8001620 <_free_r+0x50>
 800161c:	42a3      	cmp	r3, r4
 800161e:	d9fa      	bls.n	8001616 <_free_r+0x46>
 8001620:	6811      	ldr	r1, [r2, #0]
 8001622:	1855      	adds	r5, r2, r1
 8001624:	42a5      	cmp	r5, r4
 8001626:	d10b      	bne.n	8001640 <_free_r+0x70>
 8001628:	6824      	ldr	r4, [r4, #0]
 800162a:	4421      	add	r1, r4
 800162c:	1854      	adds	r4, r2, r1
 800162e:	42a3      	cmp	r3, r4
 8001630:	6011      	str	r1, [r2, #0]
 8001632:	d1e0      	bne.n	80015f6 <_free_r+0x26>
 8001634:	681c      	ldr	r4, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	6053      	str	r3, [r2, #4]
 800163a:	440c      	add	r4, r1
 800163c:	6014      	str	r4, [r2, #0]
 800163e:	e7da      	b.n	80015f6 <_free_r+0x26>
 8001640:	d902      	bls.n	8001648 <_free_r+0x78>
 8001642:	230c      	movs	r3, #12
 8001644:	6003      	str	r3, [r0, #0]
 8001646:	e7d6      	b.n	80015f6 <_free_r+0x26>
 8001648:	6825      	ldr	r5, [r4, #0]
 800164a:	1961      	adds	r1, r4, r5
 800164c:	428b      	cmp	r3, r1
 800164e:	bf04      	itt	eq
 8001650:	6819      	ldreq	r1, [r3, #0]
 8001652:	685b      	ldreq	r3, [r3, #4]
 8001654:	6063      	str	r3, [r4, #4]
 8001656:	bf04      	itt	eq
 8001658:	1949      	addeq	r1, r1, r5
 800165a:	6021      	streq	r1, [r4, #0]
 800165c:	6054      	str	r4, [r2, #4]
 800165e:	e7ca      	b.n	80015f6 <_free_r+0x26>
 8001660:	b003      	add	sp, #12
 8001662:	bd30      	pop	{r4, r5, pc}
 8001664:	2000029c 	.word	0x2000029c

08001668 <sbrk_aligned>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	4e0e      	ldr	r6, [pc, #56]	; (80016a4 <sbrk_aligned+0x3c>)
 800166c:	460c      	mov	r4, r1
 800166e:	6831      	ldr	r1, [r6, #0]
 8001670:	4605      	mov	r5, r0
 8001672:	b911      	cbnz	r1, 800167a <sbrk_aligned+0x12>
 8001674:	f000 fcaa 	bl	8001fcc <_sbrk_r>
 8001678:	6030      	str	r0, [r6, #0]
 800167a:	4621      	mov	r1, r4
 800167c:	4628      	mov	r0, r5
 800167e:	f000 fca5 	bl	8001fcc <_sbrk_r>
 8001682:	1c43      	adds	r3, r0, #1
 8001684:	d00a      	beq.n	800169c <sbrk_aligned+0x34>
 8001686:	1cc4      	adds	r4, r0, #3
 8001688:	f024 0403 	bic.w	r4, r4, #3
 800168c:	42a0      	cmp	r0, r4
 800168e:	d007      	beq.n	80016a0 <sbrk_aligned+0x38>
 8001690:	1a21      	subs	r1, r4, r0
 8001692:	4628      	mov	r0, r5
 8001694:	f000 fc9a 	bl	8001fcc <_sbrk_r>
 8001698:	3001      	adds	r0, #1
 800169a:	d101      	bne.n	80016a0 <sbrk_aligned+0x38>
 800169c:	f04f 34ff 	mov.w	r4, #4294967295
 80016a0:	4620      	mov	r0, r4
 80016a2:	bd70      	pop	{r4, r5, r6, pc}
 80016a4:	200002a0 	.word	0x200002a0

080016a8 <_malloc_r>:
 80016a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016ac:	1ccd      	adds	r5, r1, #3
 80016ae:	f025 0503 	bic.w	r5, r5, #3
 80016b2:	3508      	adds	r5, #8
 80016b4:	2d0c      	cmp	r5, #12
 80016b6:	bf38      	it	cc
 80016b8:	250c      	movcc	r5, #12
 80016ba:	2d00      	cmp	r5, #0
 80016bc:	4607      	mov	r7, r0
 80016be:	db01      	blt.n	80016c4 <_malloc_r+0x1c>
 80016c0:	42a9      	cmp	r1, r5
 80016c2:	d905      	bls.n	80016d0 <_malloc_r+0x28>
 80016c4:	230c      	movs	r3, #12
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	2600      	movs	r6, #0
 80016ca:	4630      	mov	r0, r6
 80016cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80017a4 <_malloc_r+0xfc>
 80016d4:	f000 f868 	bl	80017a8 <__malloc_lock>
 80016d8:	f8d8 3000 	ldr.w	r3, [r8]
 80016dc:	461c      	mov	r4, r3
 80016de:	bb5c      	cbnz	r4, 8001738 <_malloc_r+0x90>
 80016e0:	4629      	mov	r1, r5
 80016e2:	4638      	mov	r0, r7
 80016e4:	f7ff ffc0 	bl	8001668 <sbrk_aligned>
 80016e8:	1c43      	adds	r3, r0, #1
 80016ea:	4604      	mov	r4, r0
 80016ec:	d155      	bne.n	800179a <_malloc_r+0xf2>
 80016ee:	f8d8 4000 	ldr.w	r4, [r8]
 80016f2:	4626      	mov	r6, r4
 80016f4:	2e00      	cmp	r6, #0
 80016f6:	d145      	bne.n	8001784 <_malloc_r+0xdc>
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	d048      	beq.n	800178e <_malloc_r+0xe6>
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	4631      	mov	r1, r6
 8001700:	4638      	mov	r0, r7
 8001702:	eb04 0903 	add.w	r9, r4, r3
 8001706:	f000 fc61 	bl	8001fcc <_sbrk_r>
 800170a:	4581      	cmp	r9, r0
 800170c:	d13f      	bne.n	800178e <_malloc_r+0xe6>
 800170e:	6821      	ldr	r1, [r4, #0]
 8001710:	1a6d      	subs	r5, r5, r1
 8001712:	4629      	mov	r1, r5
 8001714:	4638      	mov	r0, r7
 8001716:	f7ff ffa7 	bl	8001668 <sbrk_aligned>
 800171a:	3001      	adds	r0, #1
 800171c:	d037      	beq.n	800178e <_malloc_r+0xe6>
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	442b      	add	r3, r5
 8001722:	6023      	str	r3, [r4, #0]
 8001724:	f8d8 3000 	ldr.w	r3, [r8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d038      	beq.n	800179e <_malloc_r+0xf6>
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	42a2      	cmp	r2, r4
 8001730:	d12b      	bne.n	800178a <_malloc_r+0xe2>
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	e00f      	b.n	8001758 <_malloc_r+0xb0>
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	1b52      	subs	r2, r2, r5
 800173c:	d41f      	bmi.n	800177e <_malloc_r+0xd6>
 800173e:	2a0b      	cmp	r2, #11
 8001740:	d917      	bls.n	8001772 <_malloc_r+0xca>
 8001742:	1961      	adds	r1, r4, r5
 8001744:	42a3      	cmp	r3, r4
 8001746:	6025      	str	r5, [r4, #0]
 8001748:	bf18      	it	ne
 800174a:	6059      	strne	r1, [r3, #4]
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	bf08      	it	eq
 8001750:	f8c8 1000 	streq.w	r1, [r8]
 8001754:	5162      	str	r2, [r4, r5]
 8001756:	604b      	str	r3, [r1, #4]
 8001758:	4638      	mov	r0, r7
 800175a:	f104 060b 	add.w	r6, r4, #11
 800175e:	f000 f829 	bl	80017b4 <__malloc_unlock>
 8001762:	f026 0607 	bic.w	r6, r6, #7
 8001766:	1d23      	adds	r3, r4, #4
 8001768:	1af2      	subs	r2, r6, r3
 800176a:	d0ae      	beq.n	80016ca <_malloc_r+0x22>
 800176c:	1b9b      	subs	r3, r3, r6
 800176e:	50a3      	str	r3, [r4, r2]
 8001770:	e7ab      	b.n	80016ca <_malloc_r+0x22>
 8001772:	42a3      	cmp	r3, r4
 8001774:	6862      	ldr	r2, [r4, #4]
 8001776:	d1dd      	bne.n	8001734 <_malloc_r+0x8c>
 8001778:	f8c8 2000 	str.w	r2, [r8]
 800177c:	e7ec      	b.n	8001758 <_malloc_r+0xb0>
 800177e:	4623      	mov	r3, r4
 8001780:	6864      	ldr	r4, [r4, #4]
 8001782:	e7ac      	b.n	80016de <_malloc_r+0x36>
 8001784:	4634      	mov	r4, r6
 8001786:	6876      	ldr	r6, [r6, #4]
 8001788:	e7b4      	b.n	80016f4 <_malloc_r+0x4c>
 800178a:	4613      	mov	r3, r2
 800178c:	e7cc      	b.n	8001728 <_malloc_r+0x80>
 800178e:	230c      	movs	r3, #12
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4638      	mov	r0, r7
 8001794:	f000 f80e 	bl	80017b4 <__malloc_unlock>
 8001798:	e797      	b.n	80016ca <_malloc_r+0x22>
 800179a:	6025      	str	r5, [r4, #0]
 800179c:	e7dc      	b.n	8001758 <_malloc_r+0xb0>
 800179e:	605b      	str	r3, [r3, #4]
 80017a0:	deff      	udf	#255	; 0xff
 80017a2:	bf00      	nop
 80017a4:	2000029c 	.word	0x2000029c

080017a8 <__malloc_lock>:
 80017a8:	4801      	ldr	r0, [pc, #4]	; (80017b0 <__malloc_lock+0x8>)
 80017aa:	f7ff bf0e 	b.w	80015ca <__retarget_lock_acquire_recursive>
 80017ae:	bf00      	nop
 80017b0:	20000298 	.word	0x20000298

080017b4 <__malloc_unlock>:
 80017b4:	4801      	ldr	r0, [pc, #4]	; (80017bc <__malloc_unlock+0x8>)
 80017b6:	f7ff bf09 	b.w	80015cc <__retarget_lock_release_recursive>
 80017ba:	bf00      	nop
 80017bc:	20000298 	.word	0x20000298

080017c0 <__sfputc_r>:
 80017c0:	6893      	ldr	r3, [r2, #8]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	b410      	push	{r4}
 80017c8:	6093      	str	r3, [r2, #8]
 80017ca:	da08      	bge.n	80017de <__sfputc_r+0x1e>
 80017cc:	6994      	ldr	r4, [r2, #24]
 80017ce:	42a3      	cmp	r3, r4
 80017d0:	db01      	blt.n	80017d6 <__sfputc_r+0x16>
 80017d2:	290a      	cmp	r1, #10
 80017d4:	d103      	bne.n	80017de <__sfputc_r+0x1e>
 80017d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017da:	f7ff bde8 	b.w	80013ae <__swbuf_r>
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	1c58      	adds	r0, r3, #1
 80017e2:	6010      	str	r0, [r2, #0]
 80017e4:	7019      	strb	r1, [r3, #0]
 80017e6:	4608      	mov	r0, r1
 80017e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <__sfputs_r>:
 80017ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f0:	4606      	mov	r6, r0
 80017f2:	460f      	mov	r7, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	18d5      	adds	r5, r2, r3
 80017f8:	42ac      	cmp	r4, r5
 80017fa:	d101      	bne.n	8001800 <__sfputs_r+0x12>
 80017fc:	2000      	movs	r0, #0
 80017fe:	e007      	b.n	8001810 <__sfputs_r+0x22>
 8001800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001804:	463a      	mov	r2, r7
 8001806:	4630      	mov	r0, r6
 8001808:	f7ff ffda 	bl	80017c0 <__sfputc_r>
 800180c:	1c43      	adds	r3, r0, #1
 800180e:	d1f3      	bne.n	80017f8 <__sfputs_r+0xa>
 8001810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001814 <_vfiprintf_r>:
 8001814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001818:	460d      	mov	r5, r1
 800181a:	b09d      	sub	sp, #116	; 0x74
 800181c:	4614      	mov	r4, r2
 800181e:	4698      	mov	r8, r3
 8001820:	4606      	mov	r6, r0
 8001822:	b118      	cbz	r0, 800182c <_vfiprintf_r+0x18>
 8001824:	6a03      	ldr	r3, [r0, #32]
 8001826:	b90b      	cbnz	r3, 800182c <_vfiprintf_r+0x18>
 8001828:	f7ff fcda 	bl	80011e0 <__sinit>
 800182c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800182e:	07d9      	lsls	r1, r3, #31
 8001830:	d405      	bmi.n	800183e <_vfiprintf_r+0x2a>
 8001832:	89ab      	ldrh	r3, [r5, #12]
 8001834:	059a      	lsls	r2, r3, #22
 8001836:	d402      	bmi.n	800183e <_vfiprintf_r+0x2a>
 8001838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800183a:	f7ff fec6 	bl	80015ca <__retarget_lock_acquire_recursive>
 800183e:	89ab      	ldrh	r3, [r5, #12]
 8001840:	071b      	lsls	r3, r3, #28
 8001842:	d501      	bpl.n	8001848 <_vfiprintf_r+0x34>
 8001844:	692b      	ldr	r3, [r5, #16]
 8001846:	b99b      	cbnz	r3, 8001870 <_vfiprintf_r+0x5c>
 8001848:	4629      	mov	r1, r5
 800184a:	4630      	mov	r0, r6
 800184c:	f7ff fdec 	bl	8001428 <__swsetup_r>
 8001850:	b170      	cbz	r0, 8001870 <_vfiprintf_r+0x5c>
 8001852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001854:	07dc      	lsls	r4, r3, #31
 8001856:	d504      	bpl.n	8001862 <_vfiprintf_r+0x4e>
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	b01d      	add	sp, #116	; 0x74
 800185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001862:	89ab      	ldrh	r3, [r5, #12]
 8001864:	0598      	lsls	r0, r3, #22
 8001866:	d4f7      	bmi.n	8001858 <_vfiprintf_r+0x44>
 8001868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800186a:	f7ff feaf 	bl	80015cc <__retarget_lock_release_recursive>
 800186e:	e7f3      	b.n	8001858 <_vfiprintf_r+0x44>
 8001870:	2300      	movs	r3, #0
 8001872:	9309      	str	r3, [sp, #36]	; 0x24
 8001874:	2320      	movs	r3, #32
 8001876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800187a:	f8cd 800c 	str.w	r8, [sp, #12]
 800187e:	2330      	movs	r3, #48	; 0x30
 8001880:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001a34 <_vfiprintf_r+0x220>
 8001884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001888:	f04f 0901 	mov.w	r9, #1
 800188c:	4623      	mov	r3, r4
 800188e:	469a      	mov	sl, r3
 8001890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001894:	b10a      	cbz	r2, 800189a <_vfiprintf_r+0x86>
 8001896:	2a25      	cmp	r2, #37	; 0x25
 8001898:	d1f9      	bne.n	800188e <_vfiprintf_r+0x7a>
 800189a:	ebba 0b04 	subs.w	fp, sl, r4
 800189e:	d00b      	beq.n	80018b8 <_vfiprintf_r+0xa4>
 80018a0:	465b      	mov	r3, fp
 80018a2:	4622      	mov	r2, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	4630      	mov	r0, r6
 80018a8:	f7ff ffa1 	bl	80017ee <__sfputs_r>
 80018ac:	3001      	adds	r0, #1
 80018ae:	f000 80a9 	beq.w	8001a04 <_vfiprintf_r+0x1f0>
 80018b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018b4:	445a      	add	r2, fp
 80018b6:	9209      	str	r2, [sp, #36]	; 0x24
 80018b8:	f89a 3000 	ldrb.w	r3, [sl]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80a1 	beq.w	8001a04 <_vfiprintf_r+0x1f0>
 80018c2:	2300      	movs	r3, #0
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018cc:	f10a 0a01 	add.w	sl, sl, #1
 80018d0:	9304      	str	r3, [sp, #16]
 80018d2:	9307      	str	r3, [sp, #28]
 80018d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018d8:	931a      	str	r3, [sp, #104]	; 0x68
 80018da:	4654      	mov	r4, sl
 80018dc:	2205      	movs	r2, #5
 80018de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018e2:	4854      	ldr	r0, [pc, #336]	; (8001a34 <_vfiprintf_r+0x220>)
 80018e4:	f7fe fc9c 	bl	8000220 <memchr>
 80018e8:	9a04      	ldr	r2, [sp, #16]
 80018ea:	b9d8      	cbnz	r0, 8001924 <_vfiprintf_r+0x110>
 80018ec:	06d1      	lsls	r1, r2, #27
 80018ee:	bf44      	itt	mi
 80018f0:	2320      	movmi	r3, #32
 80018f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018f6:	0713      	lsls	r3, r2, #28
 80018f8:	bf44      	itt	mi
 80018fa:	232b      	movmi	r3, #43	; 0x2b
 80018fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001900:	f89a 3000 	ldrb.w	r3, [sl]
 8001904:	2b2a      	cmp	r3, #42	; 0x2a
 8001906:	d015      	beq.n	8001934 <_vfiprintf_r+0x120>
 8001908:	9a07      	ldr	r2, [sp, #28]
 800190a:	4654      	mov	r4, sl
 800190c:	2000      	movs	r0, #0
 800190e:	f04f 0c0a 	mov.w	ip, #10
 8001912:	4621      	mov	r1, r4
 8001914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001918:	3b30      	subs	r3, #48	; 0x30
 800191a:	2b09      	cmp	r3, #9
 800191c:	d94d      	bls.n	80019ba <_vfiprintf_r+0x1a6>
 800191e:	b1b0      	cbz	r0, 800194e <_vfiprintf_r+0x13a>
 8001920:	9207      	str	r2, [sp, #28]
 8001922:	e014      	b.n	800194e <_vfiprintf_r+0x13a>
 8001924:	eba0 0308 	sub.w	r3, r0, r8
 8001928:	fa09 f303 	lsl.w	r3, r9, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	9304      	str	r3, [sp, #16]
 8001930:	46a2      	mov	sl, r4
 8001932:	e7d2      	b.n	80018da <_vfiprintf_r+0xc6>
 8001934:	9b03      	ldr	r3, [sp, #12]
 8001936:	1d19      	adds	r1, r3, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	9103      	str	r1, [sp, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	bfbb      	ittet	lt
 8001940:	425b      	neglt	r3, r3
 8001942:	f042 0202 	orrlt.w	r2, r2, #2
 8001946:	9307      	strge	r3, [sp, #28]
 8001948:	9307      	strlt	r3, [sp, #28]
 800194a:	bfb8      	it	lt
 800194c:	9204      	strlt	r2, [sp, #16]
 800194e:	7823      	ldrb	r3, [r4, #0]
 8001950:	2b2e      	cmp	r3, #46	; 0x2e
 8001952:	d10c      	bne.n	800196e <_vfiprintf_r+0x15a>
 8001954:	7863      	ldrb	r3, [r4, #1]
 8001956:	2b2a      	cmp	r3, #42	; 0x2a
 8001958:	d134      	bne.n	80019c4 <_vfiprintf_r+0x1b0>
 800195a:	9b03      	ldr	r3, [sp, #12]
 800195c:	1d1a      	adds	r2, r3, #4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	9203      	str	r2, [sp, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	bfb8      	it	lt
 8001966:	f04f 33ff 	movlt.w	r3, #4294967295
 800196a:	3402      	adds	r4, #2
 800196c:	9305      	str	r3, [sp, #20]
 800196e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001a44 <_vfiprintf_r+0x230>
 8001972:	7821      	ldrb	r1, [r4, #0]
 8001974:	2203      	movs	r2, #3
 8001976:	4650      	mov	r0, sl
 8001978:	f7fe fc52 	bl	8000220 <memchr>
 800197c:	b138      	cbz	r0, 800198e <_vfiprintf_r+0x17a>
 800197e:	9b04      	ldr	r3, [sp, #16]
 8001980:	eba0 000a 	sub.w	r0, r0, sl
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	4082      	lsls	r2, r0
 8001988:	4313      	orrs	r3, r2
 800198a:	3401      	adds	r4, #1
 800198c:	9304      	str	r3, [sp, #16]
 800198e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001992:	4829      	ldr	r0, [pc, #164]	; (8001a38 <_vfiprintf_r+0x224>)
 8001994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001998:	2206      	movs	r2, #6
 800199a:	f7fe fc41 	bl	8000220 <memchr>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d03f      	beq.n	8001a22 <_vfiprintf_r+0x20e>
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <_vfiprintf_r+0x228>)
 80019a4:	bb1b      	cbnz	r3, 80019ee <_vfiprintf_r+0x1da>
 80019a6:	9b03      	ldr	r3, [sp, #12]
 80019a8:	3307      	adds	r3, #7
 80019aa:	f023 0307 	bic.w	r3, r3, #7
 80019ae:	3308      	adds	r3, #8
 80019b0:	9303      	str	r3, [sp, #12]
 80019b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019b4:	443b      	add	r3, r7
 80019b6:	9309      	str	r3, [sp, #36]	; 0x24
 80019b8:	e768      	b.n	800188c <_vfiprintf_r+0x78>
 80019ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80019be:	460c      	mov	r4, r1
 80019c0:	2001      	movs	r0, #1
 80019c2:	e7a6      	b.n	8001912 <_vfiprintf_r+0xfe>
 80019c4:	2300      	movs	r3, #0
 80019c6:	3401      	adds	r4, #1
 80019c8:	9305      	str	r3, [sp, #20]
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 0c0a 	mov.w	ip, #10
 80019d0:	4620      	mov	r0, r4
 80019d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019d6:	3a30      	subs	r2, #48	; 0x30
 80019d8:	2a09      	cmp	r2, #9
 80019da:	d903      	bls.n	80019e4 <_vfiprintf_r+0x1d0>
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0c6      	beq.n	800196e <_vfiprintf_r+0x15a>
 80019e0:	9105      	str	r1, [sp, #20]
 80019e2:	e7c4      	b.n	800196e <_vfiprintf_r+0x15a>
 80019e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80019e8:	4604      	mov	r4, r0
 80019ea:	2301      	movs	r3, #1
 80019ec:	e7f0      	b.n	80019d0 <_vfiprintf_r+0x1bc>
 80019ee:	ab03      	add	r3, sp, #12
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	462a      	mov	r2, r5
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <_vfiprintf_r+0x22c>)
 80019f6:	a904      	add	r1, sp, #16
 80019f8:	4630      	mov	r0, r6
 80019fa:	f3af 8000 	nop.w
 80019fe:	4607      	mov	r7, r0
 8001a00:	1c78      	adds	r0, r7, #1
 8001a02:	d1d6      	bne.n	80019b2 <_vfiprintf_r+0x19e>
 8001a04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a06:	07d9      	lsls	r1, r3, #31
 8001a08:	d405      	bmi.n	8001a16 <_vfiprintf_r+0x202>
 8001a0a:	89ab      	ldrh	r3, [r5, #12]
 8001a0c:	059a      	lsls	r2, r3, #22
 8001a0e:	d402      	bmi.n	8001a16 <_vfiprintf_r+0x202>
 8001a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a12:	f7ff fddb 	bl	80015cc <__retarget_lock_release_recursive>
 8001a16:	89ab      	ldrh	r3, [r5, #12]
 8001a18:	065b      	lsls	r3, r3, #25
 8001a1a:	f53f af1d 	bmi.w	8001858 <_vfiprintf_r+0x44>
 8001a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a20:	e71c      	b.n	800185c <_vfiprintf_r+0x48>
 8001a22:	ab03      	add	r3, sp, #12
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	462a      	mov	r2, r5
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <_vfiprintf_r+0x22c>)
 8001a2a:	a904      	add	r1, sp, #16
 8001a2c:	4630      	mov	r0, r6
 8001a2e:	f000 f879 	bl	8001b24 <_printf_i>
 8001a32:	e7e4      	b.n	80019fe <_vfiprintf_r+0x1ea>
 8001a34:	0800209d 	.word	0x0800209d
 8001a38:	080020a7 	.word	0x080020a7
 8001a3c:	00000000 	.word	0x00000000
 8001a40:	080017ef 	.word	0x080017ef
 8001a44:	080020a3 	.word	0x080020a3

08001a48 <_printf_common>:
 8001a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a4c:	4616      	mov	r6, r2
 8001a4e:	4699      	mov	r9, r3
 8001a50:	688a      	ldr	r2, [r1, #8]
 8001a52:	690b      	ldr	r3, [r1, #16]
 8001a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	bfb8      	it	lt
 8001a5c:	4613      	movlt	r3, r2
 8001a5e:	6033      	str	r3, [r6, #0]
 8001a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a64:	4607      	mov	r7, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	b10a      	cbz	r2, 8001a6e <_printf_common+0x26>
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	6033      	str	r3, [r6, #0]
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	0699      	lsls	r1, r3, #26
 8001a72:	bf42      	ittt	mi
 8001a74:	6833      	ldrmi	r3, [r6, #0]
 8001a76:	3302      	addmi	r3, #2
 8001a78:	6033      	strmi	r3, [r6, #0]
 8001a7a:	6825      	ldr	r5, [r4, #0]
 8001a7c:	f015 0506 	ands.w	r5, r5, #6
 8001a80:	d106      	bne.n	8001a90 <_printf_common+0x48>
 8001a82:	f104 0a19 	add.w	sl, r4, #25
 8001a86:	68e3      	ldr	r3, [r4, #12]
 8001a88:	6832      	ldr	r2, [r6, #0]
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	42ab      	cmp	r3, r5
 8001a8e:	dc26      	bgt.n	8001ade <_printf_common+0x96>
 8001a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a94:	1e13      	subs	r3, r2, #0
 8001a96:	6822      	ldr	r2, [r4, #0]
 8001a98:	bf18      	it	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	0692      	lsls	r2, r2, #26
 8001a9e:	d42b      	bmi.n	8001af8 <_printf_common+0xb0>
 8001aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	4638      	mov	r0, r7
 8001aa8:	47c0      	blx	r8
 8001aaa:	3001      	adds	r0, #1
 8001aac:	d01e      	beq.n	8001aec <_printf_common+0xa4>
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	6922      	ldr	r2, [r4, #16]
 8001ab2:	f003 0306 	and.w	r3, r3, #6
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf02      	ittt	eq
 8001aba:	68e5      	ldreq	r5, [r4, #12]
 8001abc:	6833      	ldreq	r3, [r6, #0]
 8001abe:	1aed      	subeq	r5, r5, r3
 8001ac0:	68a3      	ldr	r3, [r4, #8]
 8001ac2:	bf0c      	ite	eq
 8001ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ac8:	2500      	movne	r5, #0
 8001aca:	4293      	cmp	r3, r2
 8001acc:	bfc4      	itt	gt
 8001ace:	1a9b      	subgt	r3, r3, r2
 8001ad0:	18ed      	addgt	r5, r5, r3
 8001ad2:	2600      	movs	r6, #0
 8001ad4:	341a      	adds	r4, #26
 8001ad6:	42b5      	cmp	r5, r6
 8001ad8:	d11a      	bne.n	8001b10 <_printf_common+0xc8>
 8001ada:	2000      	movs	r0, #0
 8001adc:	e008      	b.n	8001af0 <_printf_common+0xa8>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	4652      	mov	r2, sl
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	47c0      	blx	r8
 8001ae8:	3001      	adds	r0, #1
 8001aea:	d103      	bne.n	8001af4 <_printf_common+0xac>
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af4:	3501      	adds	r5, #1
 8001af6:	e7c6      	b.n	8001a86 <_printf_common+0x3e>
 8001af8:	18e1      	adds	r1, r4, r3
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	2030      	movs	r0, #48	; 0x30
 8001afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b02:	4422      	add	r2, r4
 8001b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	e7c7      	b.n	8001aa0 <_printf_common+0x58>
 8001b10:	2301      	movs	r3, #1
 8001b12:	4622      	mov	r2, r4
 8001b14:	4649      	mov	r1, r9
 8001b16:	4638      	mov	r0, r7
 8001b18:	47c0      	blx	r8
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	d0e6      	beq.n	8001aec <_printf_common+0xa4>
 8001b1e:	3601      	adds	r6, #1
 8001b20:	e7d9      	b.n	8001ad6 <_printf_common+0x8e>
	...

08001b24 <_printf_i>:
 8001b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b28:	7e0f      	ldrb	r7, [r1, #24]
 8001b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b2c:	2f78      	cmp	r7, #120	; 0x78
 8001b2e:	4691      	mov	r9, r2
 8001b30:	4680      	mov	r8, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	469a      	mov	sl, r3
 8001b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b3a:	d807      	bhi.n	8001b4c <_printf_i+0x28>
 8001b3c:	2f62      	cmp	r7, #98	; 0x62
 8001b3e:	d80a      	bhi.n	8001b56 <_printf_i+0x32>
 8001b40:	2f00      	cmp	r7, #0
 8001b42:	f000 80d4 	beq.w	8001cee <_printf_i+0x1ca>
 8001b46:	2f58      	cmp	r7, #88	; 0x58
 8001b48:	f000 80c0 	beq.w	8001ccc <_printf_i+0x1a8>
 8001b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b54:	e03a      	b.n	8001bcc <_printf_i+0xa8>
 8001b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b5a:	2b15      	cmp	r3, #21
 8001b5c:	d8f6      	bhi.n	8001b4c <_printf_i+0x28>
 8001b5e:	a101      	add	r1, pc, #4	; (adr r1, 8001b64 <_printf_i+0x40>)
 8001b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b64:	08001bbd 	.word	0x08001bbd
 8001b68:	08001bd1 	.word	0x08001bd1
 8001b6c:	08001b4d 	.word	0x08001b4d
 8001b70:	08001b4d 	.word	0x08001b4d
 8001b74:	08001b4d 	.word	0x08001b4d
 8001b78:	08001b4d 	.word	0x08001b4d
 8001b7c:	08001bd1 	.word	0x08001bd1
 8001b80:	08001b4d 	.word	0x08001b4d
 8001b84:	08001b4d 	.word	0x08001b4d
 8001b88:	08001b4d 	.word	0x08001b4d
 8001b8c:	08001b4d 	.word	0x08001b4d
 8001b90:	08001cd5 	.word	0x08001cd5
 8001b94:	08001bfd 	.word	0x08001bfd
 8001b98:	08001c8f 	.word	0x08001c8f
 8001b9c:	08001b4d 	.word	0x08001b4d
 8001ba0:	08001b4d 	.word	0x08001b4d
 8001ba4:	08001cf7 	.word	0x08001cf7
 8001ba8:	08001b4d 	.word	0x08001b4d
 8001bac:	08001bfd 	.word	0x08001bfd
 8001bb0:	08001b4d 	.word	0x08001b4d
 8001bb4:	08001b4d 	.word	0x08001b4d
 8001bb8:	08001c97 	.word	0x08001c97
 8001bbc:	682b      	ldr	r3, [r5, #0]
 8001bbe:	1d1a      	adds	r2, r3, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	602a      	str	r2, [r5, #0]
 8001bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e09f      	b.n	8001d10 <_printf_i+0x1ec>
 8001bd0:	6820      	ldr	r0, [r4, #0]
 8001bd2:	682b      	ldr	r3, [r5, #0]
 8001bd4:	0607      	lsls	r7, r0, #24
 8001bd6:	f103 0104 	add.w	r1, r3, #4
 8001bda:	6029      	str	r1, [r5, #0]
 8001bdc:	d501      	bpl.n	8001be2 <_printf_i+0xbe>
 8001bde:	681e      	ldr	r6, [r3, #0]
 8001be0:	e003      	b.n	8001bea <_printf_i+0xc6>
 8001be2:	0646      	lsls	r6, r0, #25
 8001be4:	d5fb      	bpl.n	8001bde <_printf_i+0xba>
 8001be6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001bea:	2e00      	cmp	r6, #0
 8001bec:	da03      	bge.n	8001bf6 <_printf_i+0xd2>
 8001bee:	232d      	movs	r3, #45	; 0x2d
 8001bf0:	4276      	negs	r6, r6
 8001bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bf6:	485a      	ldr	r0, [pc, #360]	; (8001d60 <_printf_i+0x23c>)
 8001bf8:	230a      	movs	r3, #10
 8001bfa:	e012      	b.n	8001c22 <_printf_i+0xfe>
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	6820      	ldr	r0, [r4, #0]
 8001c00:	1d19      	adds	r1, r3, #4
 8001c02:	6029      	str	r1, [r5, #0]
 8001c04:	0605      	lsls	r5, r0, #24
 8001c06:	d501      	bpl.n	8001c0c <_printf_i+0xe8>
 8001c08:	681e      	ldr	r6, [r3, #0]
 8001c0a:	e002      	b.n	8001c12 <_printf_i+0xee>
 8001c0c:	0641      	lsls	r1, r0, #25
 8001c0e:	d5fb      	bpl.n	8001c08 <_printf_i+0xe4>
 8001c10:	881e      	ldrh	r6, [r3, #0]
 8001c12:	4853      	ldr	r0, [pc, #332]	; (8001d60 <_printf_i+0x23c>)
 8001c14:	2f6f      	cmp	r7, #111	; 0x6f
 8001c16:	bf0c      	ite	eq
 8001c18:	2308      	moveq	r3, #8
 8001c1a:	230a      	movne	r3, #10
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c22:	6865      	ldr	r5, [r4, #4]
 8001c24:	60a5      	str	r5, [r4, #8]
 8001c26:	2d00      	cmp	r5, #0
 8001c28:	bfa2      	ittt	ge
 8001c2a:	6821      	ldrge	r1, [r4, #0]
 8001c2c:	f021 0104 	bicge.w	r1, r1, #4
 8001c30:	6021      	strge	r1, [r4, #0]
 8001c32:	b90e      	cbnz	r6, 8001c38 <_printf_i+0x114>
 8001c34:	2d00      	cmp	r5, #0
 8001c36:	d04b      	beq.n	8001cd0 <_printf_i+0x1ac>
 8001c38:	4615      	mov	r5, r2
 8001c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8001c42:	5dc7      	ldrb	r7, [r0, r7]
 8001c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c48:	4637      	mov	r7, r6
 8001c4a:	42bb      	cmp	r3, r7
 8001c4c:	460e      	mov	r6, r1
 8001c4e:	d9f4      	bls.n	8001c3a <_printf_i+0x116>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d10b      	bne.n	8001c6c <_printf_i+0x148>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	07de      	lsls	r6, r3, #31
 8001c58:	d508      	bpl.n	8001c6c <_printf_i+0x148>
 8001c5a:	6923      	ldr	r3, [r4, #16]
 8001c5c:	6861      	ldr	r1, [r4, #4]
 8001c5e:	4299      	cmp	r1, r3
 8001c60:	bfde      	ittt	le
 8001c62:	2330      	movle	r3, #48	; 0x30
 8001c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c6c:	1b52      	subs	r2, r2, r5
 8001c6e:	6122      	str	r2, [r4, #16]
 8001c70:	f8cd a000 	str.w	sl, [sp]
 8001c74:	464b      	mov	r3, r9
 8001c76:	aa03      	add	r2, sp, #12
 8001c78:	4621      	mov	r1, r4
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	f7ff fee4 	bl	8001a48 <_printf_common>
 8001c80:	3001      	adds	r0, #1
 8001c82:	d14a      	bne.n	8001d1a <_printf_i+0x1f6>
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	b004      	add	sp, #16
 8001c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	f043 0320 	orr.w	r3, r3, #32
 8001c94:	6023      	str	r3, [r4, #0]
 8001c96:	4833      	ldr	r0, [pc, #204]	; (8001d64 <_printf_i+0x240>)
 8001c98:	2778      	movs	r7, #120	; 0x78
 8001c9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	6829      	ldr	r1, [r5, #0]
 8001ca2:	061f      	lsls	r7, r3, #24
 8001ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ca8:	d402      	bmi.n	8001cb0 <_printf_i+0x18c>
 8001caa:	065f      	lsls	r7, r3, #25
 8001cac:	bf48      	it	mi
 8001cae:	b2b6      	uxthmi	r6, r6
 8001cb0:	07df      	lsls	r7, r3, #31
 8001cb2:	bf48      	it	mi
 8001cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8001cb8:	6029      	str	r1, [r5, #0]
 8001cba:	bf48      	it	mi
 8001cbc:	6023      	strmi	r3, [r4, #0]
 8001cbe:	b91e      	cbnz	r6, 8001cc8 <_printf_i+0x1a4>
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	f023 0320 	bic.w	r3, r3, #32
 8001cc6:	6023      	str	r3, [r4, #0]
 8001cc8:	2310      	movs	r3, #16
 8001cca:	e7a7      	b.n	8001c1c <_printf_i+0xf8>
 8001ccc:	4824      	ldr	r0, [pc, #144]	; (8001d60 <_printf_i+0x23c>)
 8001cce:	e7e4      	b.n	8001c9a <_printf_i+0x176>
 8001cd0:	4615      	mov	r5, r2
 8001cd2:	e7bd      	b.n	8001c50 <_printf_i+0x12c>
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	6826      	ldr	r6, [r4, #0]
 8001cd8:	6961      	ldr	r1, [r4, #20]
 8001cda:	1d18      	adds	r0, r3, #4
 8001cdc:	6028      	str	r0, [r5, #0]
 8001cde:	0635      	lsls	r5, r6, #24
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	d501      	bpl.n	8001ce8 <_printf_i+0x1c4>
 8001ce4:	6019      	str	r1, [r3, #0]
 8001ce6:	e002      	b.n	8001cee <_printf_i+0x1ca>
 8001ce8:	0670      	lsls	r0, r6, #25
 8001cea:	d5fb      	bpl.n	8001ce4 <_printf_i+0x1c0>
 8001cec:	8019      	strh	r1, [r3, #0]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	6123      	str	r3, [r4, #16]
 8001cf2:	4615      	mov	r5, r2
 8001cf4:	e7bc      	b.n	8001c70 <_printf_i+0x14c>
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	1d1a      	adds	r2, r3, #4
 8001cfa:	602a      	str	r2, [r5, #0]
 8001cfc:	681d      	ldr	r5, [r3, #0]
 8001cfe:	6862      	ldr	r2, [r4, #4]
 8001d00:	2100      	movs	r1, #0
 8001d02:	4628      	mov	r0, r5
 8001d04:	f7fe fa8c 	bl	8000220 <memchr>
 8001d08:	b108      	cbz	r0, 8001d0e <_printf_i+0x1ea>
 8001d0a:	1b40      	subs	r0, r0, r5
 8001d0c:	6060      	str	r0, [r4, #4]
 8001d0e:	6863      	ldr	r3, [r4, #4]
 8001d10:	6123      	str	r3, [r4, #16]
 8001d12:	2300      	movs	r3, #0
 8001d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d18:	e7aa      	b.n	8001c70 <_printf_i+0x14c>
 8001d1a:	6923      	ldr	r3, [r4, #16]
 8001d1c:	462a      	mov	r2, r5
 8001d1e:	4649      	mov	r1, r9
 8001d20:	4640      	mov	r0, r8
 8001d22:	47d0      	blx	sl
 8001d24:	3001      	adds	r0, #1
 8001d26:	d0ad      	beq.n	8001c84 <_printf_i+0x160>
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	079b      	lsls	r3, r3, #30
 8001d2c:	d413      	bmi.n	8001d56 <_printf_i+0x232>
 8001d2e:	68e0      	ldr	r0, [r4, #12]
 8001d30:	9b03      	ldr	r3, [sp, #12]
 8001d32:	4298      	cmp	r0, r3
 8001d34:	bfb8      	it	lt
 8001d36:	4618      	movlt	r0, r3
 8001d38:	e7a6      	b.n	8001c88 <_printf_i+0x164>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4632      	mov	r2, r6
 8001d3e:	4649      	mov	r1, r9
 8001d40:	4640      	mov	r0, r8
 8001d42:	47d0      	blx	sl
 8001d44:	3001      	adds	r0, #1
 8001d46:	d09d      	beq.n	8001c84 <_printf_i+0x160>
 8001d48:	3501      	adds	r5, #1
 8001d4a:	68e3      	ldr	r3, [r4, #12]
 8001d4c:	9903      	ldr	r1, [sp, #12]
 8001d4e:	1a5b      	subs	r3, r3, r1
 8001d50:	42ab      	cmp	r3, r5
 8001d52:	dcf2      	bgt.n	8001d3a <_printf_i+0x216>
 8001d54:	e7eb      	b.n	8001d2e <_printf_i+0x20a>
 8001d56:	2500      	movs	r5, #0
 8001d58:	f104 0619 	add.w	r6, r4, #25
 8001d5c:	e7f5      	b.n	8001d4a <_printf_i+0x226>
 8001d5e:	bf00      	nop
 8001d60:	080020ae 	.word	0x080020ae
 8001d64:	080020bf 	.word	0x080020bf

08001d68 <__sflush_r>:
 8001d68:	898a      	ldrh	r2, [r1, #12]
 8001d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6e:	4605      	mov	r5, r0
 8001d70:	0710      	lsls	r0, r2, #28
 8001d72:	460c      	mov	r4, r1
 8001d74:	d458      	bmi.n	8001e28 <__sflush_r+0xc0>
 8001d76:	684b      	ldr	r3, [r1, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	dc05      	bgt.n	8001d88 <__sflush_r+0x20>
 8001d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	dc02      	bgt.n	8001d88 <__sflush_r+0x20>
 8001d82:	2000      	movs	r0, #0
 8001d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d8a:	2e00      	cmp	r6, #0
 8001d8c:	d0f9      	beq.n	8001d82 <__sflush_r+0x1a>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d94:	682f      	ldr	r7, [r5, #0]
 8001d96:	6a21      	ldr	r1, [r4, #32]
 8001d98:	602b      	str	r3, [r5, #0]
 8001d9a:	d032      	beq.n	8001e02 <__sflush_r+0x9a>
 8001d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d9e:	89a3      	ldrh	r3, [r4, #12]
 8001da0:	075a      	lsls	r2, r3, #29
 8001da2:	d505      	bpl.n	8001db0 <__sflush_r+0x48>
 8001da4:	6863      	ldr	r3, [r4, #4]
 8001da6:	1ac0      	subs	r0, r0, r3
 8001da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001daa:	b10b      	cbz	r3, 8001db0 <__sflush_r+0x48>
 8001dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dae:	1ac0      	subs	r0, r0, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	4602      	mov	r2, r0
 8001db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001db6:	6a21      	ldr	r1, [r4, #32]
 8001db8:	4628      	mov	r0, r5
 8001dba:	47b0      	blx	r6
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	89a3      	ldrh	r3, [r4, #12]
 8001dc0:	d106      	bne.n	8001dd0 <__sflush_r+0x68>
 8001dc2:	6829      	ldr	r1, [r5, #0]
 8001dc4:	291d      	cmp	r1, #29
 8001dc6:	d82b      	bhi.n	8001e20 <__sflush_r+0xb8>
 8001dc8:	4a29      	ldr	r2, [pc, #164]	; (8001e70 <__sflush_r+0x108>)
 8001dca:	410a      	asrs	r2, r1
 8001dcc:	07d6      	lsls	r6, r2, #31
 8001dce:	d427      	bmi.n	8001e20 <__sflush_r+0xb8>
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6062      	str	r2, [r4, #4]
 8001dd4:	04d9      	lsls	r1, r3, #19
 8001dd6:	6922      	ldr	r2, [r4, #16]
 8001dd8:	6022      	str	r2, [r4, #0]
 8001dda:	d504      	bpl.n	8001de6 <__sflush_r+0x7e>
 8001ddc:	1c42      	adds	r2, r0, #1
 8001dde:	d101      	bne.n	8001de4 <__sflush_r+0x7c>
 8001de0:	682b      	ldr	r3, [r5, #0]
 8001de2:	b903      	cbnz	r3, 8001de6 <__sflush_r+0x7e>
 8001de4:	6560      	str	r0, [r4, #84]	; 0x54
 8001de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001de8:	602f      	str	r7, [r5, #0]
 8001dea:	2900      	cmp	r1, #0
 8001dec:	d0c9      	beq.n	8001d82 <__sflush_r+0x1a>
 8001dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001df2:	4299      	cmp	r1, r3
 8001df4:	d002      	beq.n	8001dfc <__sflush_r+0x94>
 8001df6:	4628      	mov	r0, r5
 8001df8:	f7ff fbea 	bl	80015d0 <_free_r>
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8001e00:	e7c0      	b.n	8001d84 <__sflush_r+0x1c>
 8001e02:	2301      	movs	r3, #1
 8001e04:	4628      	mov	r0, r5
 8001e06:	47b0      	blx	r6
 8001e08:	1c41      	adds	r1, r0, #1
 8001e0a:	d1c8      	bne.n	8001d9e <__sflush_r+0x36>
 8001e0c:	682b      	ldr	r3, [r5, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0c5      	beq.n	8001d9e <__sflush_r+0x36>
 8001e12:	2b1d      	cmp	r3, #29
 8001e14:	d001      	beq.n	8001e1a <__sflush_r+0xb2>
 8001e16:	2b16      	cmp	r3, #22
 8001e18:	d101      	bne.n	8001e1e <__sflush_r+0xb6>
 8001e1a:	602f      	str	r7, [r5, #0]
 8001e1c:	e7b1      	b.n	8001d82 <__sflush_r+0x1a>
 8001e1e:	89a3      	ldrh	r3, [r4, #12]
 8001e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e24:	81a3      	strh	r3, [r4, #12]
 8001e26:	e7ad      	b.n	8001d84 <__sflush_r+0x1c>
 8001e28:	690f      	ldr	r7, [r1, #16]
 8001e2a:	2f00      	cmp	r7, #0
 8001e2c:	d0a9      	beq.n	8001d82 <__sflush_r+0x1a>
 8001e2e:	0793      	lsls	r3, r2, #30
 8001e30:	680e      	ldr	r6, [r1, #0]
 8001e32:	bf08      	it	eq
 8001e34:	694b      	ldreq	r3, [r1, #20]
 8001e36:	600f      	str	r7, [r1, #0]
 8001e38:	bf18      	it	ne
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	eba6 0807 	sub.w	r8, r6, r7
 8001e40:	608b      	str	r3, [r1, #8]
 8001e42:	f1b8 0f00 	cmp.w	r8, #0
 8001e46:	dd9c      	ble.n	8001d82 <__sflush_r+0x1a>
 8001e48:	6a21      	ldr	r1, [r4, #32]
 8001e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e4c:	4643      	mov	r3, r8
 8001e4e:	463a      	mov	r2, r7
 8001e50:	4628      	mov	r0, r5
 8001e52:	47b0      	blx	r6
 8001e54:	2800      	cmp	r0, #0
 8001e56:	dc06      	bgt.n	8001e66 <__sflush_r+0xfe>
 8001e58:	89a3      	ldrh	r3, [r4, #12]
 8001e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5e:	81a3      	strh	r3, [r4, #12]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	e78e      	b.n	8001d84 <__sflush_r+0x1c>
 8001e66:	4407      	add	r7, r0
 8001e68:	eba8 0800 	sub.w	r8, r8, r0
 8001e6c:	e7e9      	b.n	8001e42 <__sflush_r+0xda>
 8001e6e:	bf00      	nop
 8001e70:	dfbffffe 	.word	0xdfbffffe

08001e74 <_fflush_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	690b      	ldr	r3, [r1, #16]
 8001e78:	4605      	mov	r5, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	b913      	cbnz	r3, 8001e84 <_fflush_r+0x10>
 8001e7e:	2500      	movs	r5, #0
 8001e80:	4628      	mov	r0, r5
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
 8001e84:	b118      	cbz	r0, 8001e8e <_fflush_r+0x1a>
 8001e86:	6a03      	ldr	r3, [r0, #32]
 8001e88:	b90b      	cbnz	r3, 8001e8e <_fflush_r+0x1a>
 8001e8a:	f7ff f9a9 	bl	80011e0 <__sinit>
 8001e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f3      	beq.n	8001e7e <_fflush_r+0xa>
 8001e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e98:	07d0      	lsls	r0, r2, #31
 8001e9a:	d404      	bmi.n	8001ea6 <_fflush_r+0x32>
 8001e9c:	0599      	lsls	r1, r3, #22
 8001e9e:	d402      	bmi.n	8001ea6 <_fflush_r+0x32>
 8001ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ea2:	f7ff fb92 	bl	80015ca <__retarget_lock_acquire_recursive>
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	f7ff ff5d 	bl	8001d68 <__sflush_r>
 8001eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001eb0:	07da      	lsls	r2, r3, #31
 8001eb2:	4605      	mov	r5, r0
 8001eb4:	d4e4      	bmi.n	8001e80 <_fflush_r+0xc>
 8001eb6:	89a3      	ldrh	r3, [r4, #12]
 8001eb8:	059b      	lsls	r3, r3, #22
 8001eba:	d4e1      	bmi.n	8001e80 <_fflush_r+0xc>
 8001ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ebe:	f7ff fb85 	bl	80015cc <__retarget_lock_release_recursive>
 8001ec2:	e7dd      	b.n	8001e80 <_fflush_r+0xc>

08001ec4 <__swhatbuf_r>:
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	460c      	mov	r4, r1
 8001ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ecc:	2900      	cmp	r1, #0
 8001ece:	b096      	sub	sp, #88	; 0x58
 8001ed0:	4615      	mov	r5, r2
 8001ed2:	461e      	mov	r6, r3
 8001ed4:	da0d      	bge.n	8001ef2 <__swhatbuf_r+0x2e>
 8001ed6:	89a3      	ldrh	r3, [r4, #12]
 8001ed8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001edc:	f04f 0100 	mov.w	r1, #0
 8001ee0:	bf0c      	ite	eq
 8001ee2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001ee6:	2340      	movne	r3, #64	; 0x40
 8001ee8:	2000      	movs	r0, #0
 8001eea:	6031      	str	r1, [r6, #0]
 8001eec:	602b      	str	r3, [r5, #0]
 8001eee:	b016      	add	sp, #88	; 0x58
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
 8001ef2:	466a      	mov	r2, sp
 8001ef4:	f000 f848 	bl	8001f88 <_fstat_r>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	dbec      	blt.n	8001ed6 <__swhatbuf_r+0x12>
 8001efc:	9901      	ldr	r1, [sp, #4]
 8001efe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001f02:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001f06:	4259      	negs	r1, r3
 8001f08:	4159      	adcs	r1, r3
 8001f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0e:	e7eb      	b.n	8001ee8 <__swhatbuf_r+0x24>

08001f10 <__smakebuf_r>:
 8001f10:	898b      	ldrh	r3, [r1, #12]
 8001f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f14:	079d      	lsls	r5, r3, #30
 8001f16:	4606      	mov	r6, r0
 8001f18:	460c      	mov	r4, r1
 8001f1a:	d507      	bpl.n	8001f2c <__smakebuf_r+0x1c>
 8001f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f20:	6023      	str	r3, [r4, #0]
 8001f22:	6123      	str	r3, [r4, #16]
 8001f24:	2301      	movs	r3, #1
 8001f26:	6163      	str	r3, [r4, #20]
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
 8001f2c:	ab01      	add	r3, sp, #4
 8001f2e:	466a      	mov	r2, sp
 8001f30:	f7ff ffc8 	bl	8001ec4 <__swhatbuf_r>
 8001f34:	9900      	ldr	r1, [sp, #0]
 8001f36:	4605      	mov	r5, r0
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f7ff fbb5 	bl	80016a8 <_malloc_r>
 8001f3e:	b948      	cbnz	r0, 8001f54 <__smakebuf_r+0x44>
 8001f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f44:	059a      	lsls	r2, r3, #22
 8001f46:	d4ef      	bmi.n	8001f28 <__smakebuf_r+0x18>
 8001f48:	f023 0303 	bic.w	r3, r3, #3
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	81a3      	strh	r3, [r4, #12]
 8001f52:	e7e3      	b.n	8001f1c <__smakebuf_r+0xc>
 8001f54:	89a3      	ldrh	r3, [r4, #12]
 8001f56:	6020      	str	r0, [r4, #0]
 8001f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5c:	81a3      	strh	r3, [r4, #12]
 8001f5e:	9b00      	ldr	r3, [sp, #0]
 8001f60:	6163      	str	r3, [r4, #20]
 8001f62:	9b01      	ldr	r3, [sp, #4]
 8001f64:	6120      	str	r0, [r4, #16]
 8001f66:	b15b      	cbz	r3, 8001f80 <__smakebuf_r+0x70>
 8001f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	f000 f81d 	bl	8001fac <_isatty_r>
 8001f72:	b128      	cbz	r0, 8001f80 <__smakebuf_r+0x70>
 8001f74:	89a3      	ldrh	r3, [r4, #12]
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	81a3      	strh	r3, [r4, #12]
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	431d      	orrs	r5, r3
 8001f84:	81a5      	strh	r5, [r4, #12]
 8001f86:	e7cf      	b.n	8001f28 <__smakebuf_r+0x18>

08001f88 <_fstat_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	4d07      	ldr	r5, [pc, #28]	; (8001fa8 <_fstat_r+0x20>)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	602b      	str	r3, [r5, #0]
 8001f96:	f7fe ff14 	bl	8000dc2 <_fstat>
 8001f9a:	1c43      	adds	r3, r0, #1
 8001f9c:	d102      	bne.n	8001fa4 <_fstat_r+0x1c>
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	b103      	cbz	r3, 8001fa4 <_fstat_r+0x1c>
 8001fa2:	6023      	str	r3, [r4, #0]
 8001fa4:	bd38      	pop	{r3, r4, r5, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000294 	.word	0x20000294

08001fac <_isatty_r>:
 8001fac:	b538      	push	{r3, r4, r5, lr}
 8001fae:	4d06      	ldr	r5, [pc, #24]	; (8001fc8 <_isatty_r+0x1c>)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	602b      	str	r3, [r5, #0]
 8001fb8:	f7ff f86a 	bl	8001090 <_isatty>
 8001fbc:	1c43      	adds	r3, r0, #1
 8001fbe:	d102      	bne.n	8001fc6 <_isatty_r+0x1a>
 8001fc0:	682b      	ldr	r3, [r5, #0]
 8001fc2:	b103      	cbz	r3, 8001fc6 <_isatty_r+0x1a>
 8001fc4:	6023      	str	r3, [r4, #0]
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
 8001fc8:	20000294 	.word	0x20000294

08001fcc <_sbrk_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4d06      	ldr	r5, [pc, #24]	; (8001fe8 <_sbrk_r+0x1c>)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	602b      	str	r3, [r5, #0]
 8001fd8:	f7fe fd74 	bl	8000ac4 <_sbrk>
 8001fdc:	1c43      	adds	r3, r0, #1
 8001fde:	d102      	bne.n	8001fe6 <_sbrk_r+0x1a>
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	b103      	cbz	r3, 8001fe6 <_sbrk_r+0x1a>
 8001fe4:	6023      	str	r3, [r4, #0]
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}
 8001fe8:	20000294 	.word	0x20000294

08001fec <_init>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	bf00      	nop
 8001ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff2:	bc08      	pop	{r3}
 8001ff4:	469e      	mov	lr, r3
 8001ff6:	4770      	bx	lr

08001ff8 <_fini>:
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	bf00      	nop
 8001ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffe:	bc08      	pop	{r3}
 8002000:	469e      	mov	lr, r3
 8002002:	4770      	bx	lr
